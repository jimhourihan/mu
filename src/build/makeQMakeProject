#!/usr/bin/env python
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#
#   Output a qmake.pro file which can be used with the current project. The
#   libraries are all assumed to be in the $BUILD_ROOT/lib directory
#
#   Limitations
#   -----------
#

import buildTools
import os
import re
import string

windowsDrive = "c"

buildTools.verbose = 0
p = buildTools.Project()
p.loadProjectInfo(".")
p.loadProjectDAG()
p.loadProjectFlags()
buildTools.verbose = 1

allprojects = p.projectsInBuildOrder()
root = p.root

windows = "-DPLATFORM_WINDOWS" in p.flags["CXXFLAGS"]

def pathAdjust(path):
    if windows:
	return string.join(path.split("/cygdrive/" + windowsDrive), windowsDrive + ":")
    else:
	return path

#
#   Open the .pro file
#

qfilename = "%s.pro" % root.name
file = open(qfilename, "w");

file.write("# CONFIG: %s, %s, %s\n" % (p.platform, p.compiler, p.arch)); 
file.write("#\n"); 
file.write("# NOTE: this file was created by automatically by the Tweak Build System\n"); 
file.write("#       you can recreate it from the Makefile via:\n");
file.write("#\n"); 
file.write("#           make %s.pro\n" % root.name)
file.write("#\n\n"); 

#
#   Generate the TEMPLATE
#

config = " debug"
template = ""

if root.type == "EXECUTABLE":
    template = "app"
if root.type == "EXECUTABLE_WITH_PLUGINS":
    template = "app"
elif root.type == "NSAPPLICATION":
    template = "app"
elif root.type == "LIBRARY":
    template = "lib"
    config += " staticlib"
elif root.type == "SHARED_LIBRARY":
    template = "lib"
    config += " dll"
elif root.type == "PLUGIN":
    template = "lib"
    config += " plugin"

if root.mocgenfiles != None:
    config += " qt"

if root.genfiles != None:
    for i in root.genfiles:
        if i[0:3] == "ui_":
            config += " uic"
            break

file.write("TEMPLATE = %s\n" % template)
file.write("CONFIG +=%s\n" % config)
# if using Qt libs add "qt"
# if using pthreads add "thread"

file.write("QT = \n");
# add: opengl network xml gui core sql svg 


(target, text) = os.path.splitext(root.target)
targetdir = os.path.dirname(target)
file.write("TARGET = %s\n" % pathAdjust(root.name))
file.write("DESTDIR = %s\n" % pathAdjust(targetdir))
#file.write("OBJECTS_DIR = %s\n" % pathAdjust(objectdir))
#file.write("QMAKE_TARGET = %s\n" % pathAdjust(root.target))

#
#   Generate the HEADERS
#

headers = ""
sources = ""

for src in root.srcs:
    (base, ext) = os.path.splitext(src)
    sources += " %s" % src
    hfile = "%s.h" % base
    if os.path.exists(hfile) == True:
        headers += " %s" % hfile

if headers != "":
    file.write("HEADERS +=%s\n" % headers)

if sources != "":
    file.write("SOURCES +=%s\n" % sources)

qt = ""

for m in root.mocgenfiles:
    qt += " %s" % m
    
if qt != "":
    file.write("QT =%s\n" % qt)

qrc = ""

for m in root.qtresources:
    if m != "":
        qrc += " %s.qrc" % m

if qrc != "":
    file.write("RESOURCES =%s\n" % qrc)

forms = ""

for f in root.genfiles:
    (base, ext) = os.path.splitext(f)
    if ext == ".h" and base[:3] == "ui_":
        forms += " %s.ui" % base[3:]

if forms != "":
    file.write("FORMS +=%s\n" % forms)

#
#   Generate INCLUDES
#

includePath = ""

if root.ipath != None:
    for ipath in root.ipath:
        includePath += " %s" % ipath

if includePath != "":
    file.write("INCLUDEPATH +=%s\n" % pathAdjust(includePath))

rallprojects = allprojects[:]
rallprojects.reverse()

libs = " -L%s" % os.path.join(p.build_root, "lib")

if windows == True:
    libs += " -L/usr/local/lib"

if root.libs != None:
    for l in root.libs:
        if l != "":
            libs += " -l%s" % l

#for l in rtargets:
#    if l.name != root.name:
#        libs += " -l%s" % l.name

if root.frameworks != None and windows == False:
    for f in root.frameworks:
        if f != "":
            libs += " -framework %s" % f

if libs != "":
    file.write("LIBS +=%s\n" % pathAdjust(libs))

#
#   Get all the libs in $BUILD_ROOT/lib
#

switches = ""
defines = ""

for f in p.flags.keys():
    if f == "CXXFLAGS":
        d = p.flags[f]
        for i in d:
            kind = i[0:2]
            if kind == "-D": 
                defines += " %s" % i[2:]
            if kind == "-f":
                switches += " %s" % i

if defines != "":
    file.write("DEFINES +=%s\n" % defines)

if switches != "":
    file.write("QMAKE_CXXFLAGS +=%s\n" % pathAdjust(switches))

#
#   Finish
#

file.write("\n");
file.close();

# Local Variables:
# mode: python
# end:
