#! /bin/tcsh -f
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#


set platform = `uname`

set distribution_target = "distribution"

if ( $PLATFORM == "WINDOWS" ) then
    set procs = 8
else
    set procs = 8
endif

if ( $PLATFORM == "LINUX" ) then
    setenv LD_LIBRARY_PATH  "${BUILD_ROOT}/lib:${LD_LIBRARY_PATH}"
endif

if ( $PLATFORM == "WINDOWS" ) then
    setenv PATH  "${BUILD_ROOT}/lib:${PATH}"
endif

set git_logfile = log.gitpull
echo "" >! ${git_logfile}
echo "********************** GIT STATUS ************" >> ${git_logfile}
echo "" >> ${git_logfile}
git log --pretty=oneline | head >> ${git_logfile}
echo "" >> ${git_logfile}
git status >>& ${git_logfile}

echo "" >> ${git_logfile}
echo "********************** GIT PULL **************" >> ${git_logfile}
echo "" >> ${git_logfile}
git pull >>& ${git_logfile}

if ($status != 0) then
    echo "PULL FAILED, exiting"
    echo "PULL FAILED, exiting" >> ${git_logfile}
    exit 1
endif

echo "" >> ${git_logfile}

echo "********************** GIT STATUS POST-PULL **" >> ${git_logfile}
echo "" >> ${git_logfile}
git log --pretty=oneline | head >> ${git_logfile}
echo "" >> ${git_logfile}
git status >>& ${git_logfile}


foreach python_version ( "2.6" "2.7" )
set prev_PATH = "${PATH}"
set prev_BUILD_ROOT = "${BUILD_ROOT}"
set prev_PYTHON_VERSION = ${PYTHON_VERSION}

setenv PYTHON_VERSION $python_version

# 
#  Replace the previous python version in env variables with
#  the current version.
#
setenv PATH `echo ${prev_PATH} | sed -e "s%python${prev_PYTHON_VERSION}%python${python_version}%g"`
setenv BUILD_ROOT `echo ${prev_BUILD_ROOT} | sed -e "s%python${prev_PYTHON_VERSION}%python${python_version}%g"`

if ( ${?RV_SUPPORT_PATH} ) then
    set prev_RV_SUPPORT_PATH = "${RV_SUPPORT_PATH}"
    setenv RV_SUPPORT_PATH `echo ${prev_RV_SUPPORT_PATH} | sed -e "s%python${prev_PYTHON_VERSION}%python${python_version}%g"`
endif
if ( ${?TWK_LIBQUICKTIME_PLUGIN_DIR} ) then
    set prev_TWK_LIBQUICKTIME_PLUGIN_DIR = "${TWK_LIBQUICKTIME_PLUGIN_DIR}"
    setenv TWK_LIBQUICKTIME_PLUGIN_DIR `echo ${prev_TWK_LIBQUICKTIME_PLUGIN_DIR} | sed -e "s%python${prev_PYTHON_VERSION}%python${python_version}%g"`
endif
if ( ${?MU_MODULE_PATH} ) then
    set prev_MU_MODULE_PATH = "${MU_MODULE_PATH}"
    setenv MU_MODULE_PATH `echo ${prev_MU_MODULE_PATH} | sed -e "s%python${prev_PYTHON_VERSION}%python${python_version}%g"`
endif
if ( ${?DYLD_FALLBACK_LIBRARY_PATH} ) then
    set prev_DYLD_FALLBACK_LIBRARY_PATH = "${DYLD_FALLBACK_LIBRARY_PATH}"
    setenv DYLD_FALLBACK_LIBRARY_PATH `echo ${prev_DYLD_FALLBACK_LIBRARY_PATH} | sed -e "s%python${prev_PYTHON_VERSION}%python${python_version}%g"`
endif
if ( ${?LD_LIBRARY_PATH} ) then
    set prev_LD_LIBRARY_PATH = "${LD_LIBRARY_PATH}"
    setenv LD_LIBRARY_PATH `echo ${prev_LD_LIBRARY_PATH} | sed -e "s%python${prev_PYTHON_VERSION}%python${python_version}%g"`
endif

set logfile = log.python${PYTHON_VERSION}

set MAJOR_VERSION = `make display_MAJOR_VERSION`
set MINOR_VERSION = `make display_MINOR_VERSION`
set REVISION_NUMBER = `make display_REVISION_NUMBER`

set version = ${MAJOR_VERSION}.${MINOR_VERSION}.${REVISION_NUMBER}

echo -n "started: "  >! ${logfile}
set startDate = "`date`"
echo $startDate >> ${logfile}
echo "" >> ${logfile}
echo "********************** TARGET ****************" >> ${logfile}
echo "" >> ${logfile}
echo "BUILD_ROOT" $BUILD_ROOT >>& ${logfile}
echo "ARCH      " $ARCH >>& ${logfile}
echo "platform  " $platform >>& ${logfile}
echo "PLATFORM  " $PLATFORM >>& ${logfile}
echo "VERSION   " $version >>& ${logfile}
echo $procs "procs" >>& ${logfile}

cat ${git_logfile} >> ${logfile}

if ( $# == 1 ) then
    set distribution_target = "$1"
endif

echo "" >> ${logfile}
echo "********************** MAKE DIST target=${distribution_target} *************" >> ${logfile}
echo "" >> ${logfile}
make -j $procs ${distribution_target} >>& ${logfile}
set err = $status
if ($err != 0) then
    rm -f ${git_logfile}
    exit $err
endif


echo "" >! ${logfile}.tmp
echo "********************** ERROR REPORT **********" >> ${logfile}.tmp
egrep -i "error|fatal|unresolved|failed|1 exit status" ${logfile} >> ${logfile}.tmp
if ( $PLATFORM == "LINUX" ) then
    echo "********************** SYMBOLS REPORT ********" >> ${logfile}.tmp
    echo "***********" >> ${logfile}.tmp
    echo "***********  NOTE: there should be no GLIBC symbols newer than 2.4 and no GLIBCXX symbols newer than 3.4.8 !" >> ${logfile}.tmp
    echo "***********" >> ${logfile}.tmp
    objdump -T `find $BUILD_ROOT -name '*.so' | sed -e '/symbols/d'` $BUILD_ROOT/bin/{rv.bin,rvio_sw.bin,rvio_hw.bin,rvsdi.bin} > symReport
    grep GLIBC_ symReport | sed 's/^.*\(GLIBC_[0-9.]*\).*$/\1/' | sort -u >> ${logfile}.tmp
    grep GLIBCXX_ symReport | sed -e 's/^.*\(GLIBCXX_[0-9.]*\).*$/\1/' | sort -u >> ${logfile}.tmp
    echo "*********** These symbols are too new:" >> ${logfile}.tmp
    egrep 'GLIBC_2.5|GLIBC_2.6|GLIBC_2.7|GLIBC_2.8|GLIBCXX_3.4.9' symReport >> ${logfile}.tmp
endif
echo "********************** DONE ******************" >> ${logfile}.tmp
cat ${logfile}.tmp >> ${logfile}

echo -n "finished: "  >> ${logfile}
date >> ${logfile}

echo ""
echo ""
cat ${logfile}.tmp
rm -f ${logfile}.tmp
echo ""
echo -n "finished: "
date

end

rm -f ${git_logfile}

exit $status

