#  -*- mode: makefile -*-
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#  This file works with MS VC10. There are some funny things in here to get
#  around issues with cl.exe:
#
#  _int64 == __int64
#
#	The MS compiler has a type called __int64 which works
#	fine. However, it appears that the compiler aliases the token
#	_int64 to __int64 as well. This is not represented in their
#	documentation. The define gets around this problem.
#
#   We'll use -FOO instead of /FOO any place we're allowed to in this
#   Makefile
#
#   Some LPATH and IPATH variables are picked up by the compiler/linker
#   via the env variables LIBS and IPATH.
#
#   Here's what's in my .cshrc (cygwin):
#
#
#
#   Not needed, but frequently used by code: Platform SDK and Direct X SDK
#
#

PLATFORM     = WINDOWS
ARCH         = IA32
PROCESSOR    = i386
COMPILER     = VC10


# removed from 32 bit

ifndef NOSWITCHES
SWITCHES    ?= -DTWK_NO_SGI_BYTE_ORDER \
               -DTWK_LITTLE_ENDIAN \
               -D__LITTLE_ENDIAN__ \
               -DTWK_NO_STD_MIN_MAX \
               -DBOOST_ALL_NO_LIB=1 \
               -DBOOST_ALL_DYN_LINK=1 \
               -D_WINDOWS \
	       -DWIN32=1 \
	       -D_WIN32=1 \
               -DGC_NOT_DLL \
               -DTWK_USE_GLEW \
	       -DIMPORT_GL32 \
               -DMINIZ_DLL=1 \
               -DZLIB_DLL=1 \
               -DZLIB_WINAPI=1 \
               -DOPENEXR_DLL=1 \
               -DPNG_USE_DLL=1 \
               -DCMS_DLL=1 \
               -J \
	       -D_CRT_SECURE_NO_DEPRECATE=1 \
	       -DNOMINMAX

#               -DGL_GLEXT_PROTOTYPES \
#define WIN32_LEAN_AND_MEAN
#define NOMINMAX
#               -DPTW32_STATIC_LIB \
#	       -DUNICODE=1
#	       -D_UNICODE
#		-D_POSIX_
endif

UNAME        = win32


#
#   we need the full path to link.exe because of the "link" unix command
#   in cygwin's bin directory.
#
#   -MD	    dynamic runtime opt
#   -MDd    dynamic runtime debug
#   -MT	    static runtime opt
#   -MTd    static runtime debug
#
#   -GL     allow link time code gen (opt)
#   -Oi     intrinsic functions (opt)
#
#   -RTC1   enable runtime error checking
#   -Wp64   detect 64 porting issues
#   -Zi     put debug in .pdb file (complete debug information)
#   -Z7     put debug in obj file (complete debug information alt to -Zi)
#
#   -D_DEBUG	will cause dependancies on debug specific functions in
#		the runtime lib
#
#   -D__STDC__ this is a weird one. For 32 bit it can actually break some
#   posix code. In other places it seems like the only way to compile posix
#   code. 
#
#-DNDEBUG
DEBUGFLAGS   = -GR -MDd -Z7 -RTC1 
OPTFLAGS    ?= -GR -O2 -Zi -MD -DNDEBUG
CC           = cl -EHsc -fp:precise -nologo 
CXX          = cl -EHsc -Zc:forScope -fp:precise -nologo
AR           = lib
CXX_LD	     = "/cygdrive/$(MSVC_DRIVE)/Program Files (x86)/Microsoft Visual Studio 10.0/VC/bin/link"
CREATEDLL    = $(BUILD_ROOT)/bin/dll_export_all.exe
MASM         = ml

#
#   hack to disable __STDC__ for this project. NOTE: if you copy this
#   Makefile to upgrade the compiler you should probably investigate if
#   this is really necessary. Currently python *can't* use STDC but a lot
#   of the other code *requires* it. This is a 32 bit issue only AFAIK.
#
#   
#

ifdef CC_WINDOWS_IA32_NO_STDC
CC := $(filter-out -D__STDC__,$(CC))
endif

#
#   This script runs GCC piped through sed to change some of the file paths
#   and names. We need to use GCC with cygwin for the build system to
#   work. The file product however will have no cygwin depedancies and will
#   have been completely compiled by cl.exe, liked with link.exe, etc
#
#   The order is important for -cygdrives i.e. 
#       <src root drive> <build root drive> <msvc drive>
#
CC_MD        = makeDependCL -nosys -cygdrives $(SRC_ROOT_DRIVE) $(BUILD_ROOT_DRIVE) $(MSVC_DRIVE)
CXX_MD       = $(CC_MD)

#
#   Change the extensions and prefix. The LIBPREFIX needs to be defined as
#   nothing. The default is lib (as in libfoo.a). On windows we want
#   foo.lib. .DLL replaces .so, .obj replaces .o, .lib replaces .a.
#
SOSUFFIX     = .dll
OBJSUFFIX    = .obj
ARSUFFIX     = .lib
LIBPREFIX    =
BINSUFFIX    = .exe
PLUGINSUFFIX = .dll

#
#  Default VC include path needs to passed to gcc for dependancies
#
#  C:\Program Files\Microsoft Visual Studio 9.0\VC\ATLMFC\INCLUDE
#  C:\Program Files\Microsoft Visual Studio 9.0\VC\INCLUDE
#  C:\Program Files\Microsoft Visual Studio 9.0\VC\PlatformSDK\include
#  C:\Program Files\Microsoft Visual Studio 9.0\SDK\v2.0\include
#
#

#VC_DIR       = /cygdrive/$(MSVC_DRIVE)/Program_Files/Microsoft_Visual_Studio_8/
#VC_INCLUDES  = $(addprefix $(VC_DIR),VC/ATLMFC/INCLUDE VC/INCLUDE VC/PlatformSDK/include SDK/v2.0/include)

#
#  Deal with the OPTFLAGS in the CXX_OBJ_RULE rule. Since we're using GCC
#  to do the dependancies, we need these seperate.
#

CXXFLAGS    += $(SWITCHES)
CFLAGS      += $(SWITCHES) -D__STDC__
SHAREFLAGS   =
DYNPUBLIC    =
LIBTOOL      = libtool
YACC         = bison
LEX          = flex
DEPFLAGS     = -E
YASMFLAGS   += -f win32 -m x86 -DARCH_X86=1
MASMFLAGS   += -nologo -c

#
#   Yes, we do need -DEBUG below, even for an opt build, because otherwise
#   we won't have the symbols necessary to link dlls that depend on other dlls.
#
LDFLAGS     += -NOLOGO -LARGEADDRESSAWARE -PDB:$(obj_dir)/$(notdir $(basename $@)).pdb

ifeq ($(WINDOWS_AUTO_EXPORT_DLL),TRUE)
# From createDLL.cpp in dll_export_all
#
#  Also DO NOT FORGET to specify the *linker* option /DEBUG in your project settings
#  because CreateDLL needs this: without /DEBUG, the linker may omit any
#  object files which do not export functions, i.e. specify functions which are
#  not attributed with __declspec(dllexport) nor appear in any original .DEF file:
#  when compiling with compiler /GL and (optionally) linker /LTCG options, the initial
#  linker run (which creates the MAP file for CreateDLL) will NOT list those 
#  'non-exporting' objectfiles, resulting in 'missing symbol' errors in the linker
#  run initiated by CreateDLL as our tool won't have had a chance to find all
#  required object files in the original MAP file. Hence: make sure the *linker*
#  /DEBUG flag is turned on in your MSVC projects, even for Release versions.
#  CreateDLL will re-run the linker without that /DEBUG flag anyhow, so you don't have
#  to worry that the final produced DLL is cluttered with unwanted debug info.
#
LDFLAGS += -DEBUG
endif

ifeq ($(CONSOLE),TRUE)
LDFLAGS += -SUBSYSTEM:CONSOLE
endif

#
#  QT
#  --
#
#  The QT variable indicates its include and lib should be
#  automatically added to the compile and link lines.
#
#  We need to select the right Qt libs based on whether we're using
#  debug DLLs or release DLLs. This nastiness figures that out by
#  searching the OPTFLAGS variable to figure out what kind of code is
#  being generated.
#

QT = /cygdrive/$(MSVC_DRIVE)/Qt/4.8.5_x86
QTDIR = $(QT)

ifeq ($(BUILD_TYPE),DEBUG)
QTLIBS = QtWebKitd4 QtSvgd4 QtOpenGLd4 QtNetworkd4 QtGuid4 QtCored4
QTCORE = QtCored4
QTUITOOLS = QtUiToolsd
QTMAIN = qtmaind
else
QTLIBS = QtWebKit4 QtSvg4 QtOpenGL4 QtNetwork4 QtGui4 QtCore4
QTCORE = QtCore4
QTUITOOLS = QtUiTools
QTMAIN = qtmain
endif

#
#  QUICKTIME
#  ---------
#
#  Only include the Quicktime path is absolutely necessary
#
#  The build system hates spaces in paths. But because Make is lazy,
#  you can encode them using subst as long as nothing expands the
#  variable in a rule before its actually used. CXXFLAGS and CFLAGS
#  fall into that catagory. So we'll dump the Quicktime include paths
#  in here.
#
#  For whatever reason, its necessary to add -NODEFAULTLIB:libcmt if
#  we're using Quicktime when linking against multithreaded DLL runtime.
#  I'm sure this will come back to bite me.
#

ifeq ($(findstring MovieQT,$(LIBS) $(LIBS_WINDOWS) $(LIBS_WINDOWS_IA32)),MovieQT)
CXXFLAGS    += $(subst +, ,"-I/cygdrive/$(MSVC_DRIVE)/Program+Files+(x86)/Quicktime+SDK/CIncludes")
CFLAGS      += $(subst +, ,"-I/cygdrive/$(MSVC_DRIVE)/Program+Files+(x86)/Quicktime+SDK/CIncludes")
LDFLAGS     += -NODEFAULTLIB:libcmt $(subst +, ,"-LIBPATH:/cygdrive/$(MSVC_DRIVE)/Program+Files+(x86)/Quicktime+SDK/Libraries")
endif

#
#   The VC compiler doesn't use the -lfoo method of locating libraries.
#   Each library must be specifically a .lib or a .dll. So this section
#   finds the corresponding lib or dll for each of the LIBS in $BUILD_ROOT/lib
#   This will bust terribly if a .lib and a .dll with the same name are in
#   there.
#

plibs = $(patsubst -l%,%,$(libs))
flibs = $(addsuffix .lib,$(plibs))
wlibs = $(addsuffix .lib,$(WINLIBS))

#
#   Since this is a very non-gcc platform, we have to override the rules
#   for object, library, and linking. Much of the nastiness is caused by
#   conversion of cygwin paths to windows C: paths.
#
LOADPATH_SWITCH  = -LIBPATH:
CXX_MD_RULE      = $(call cygpathconvert,$(CXX_MD) $< $@ -nologo $(CXXFLAGS))
CC_MD_RULE       = $(call cygpathconvert,$(CC_MD) $< $@ -nologo $(CFLAGS))
CC_OBJ_RULE      = $(call cygpathconvert,$(CC) $(OPTFLAGS) $(archflags) $(CFLAGS) -c -Fo$@ $<)
CXX_OBJ_RULE     = $(call cygpathconvert,$(CXX) $(OPTFLAGS) $(archflags) $(CXXFLAGS) -c -Fo$@ $<)
MASM_OBJ_RULE    = $(call cygpathconvert,$(MASM) $(MASMFLAGS) -Fo$@ $<)
AR_RULE          = cd $(obj_dir); $(AR) -nologo -out:$(call cygpathconvert,$@) \
		   $(call cygpathconvert,$(filter %$(OBJSUFFIX),$(patsubst $(obj_dir)/%,%,$^)))
CXX_LINK_RULE    = cd $(obj_dir); $(call cygpathconvert,$(CXX_LD) $(archflags) $(LDFLAGS) $(patsubst $(obj_dir)/%,%,$(objs)) -OUT:$@ $(flibs) $(wlibs))
SO_LINK_RULE     = cd $(obj_dir); $(call cygpathconvert,$(CXX_LD) -MANIFEST -MAP:$(basename $@).map $(archflags) $(LDFLAGS) $(patsubst $(obj_dir)/%,%,$(objs)) -OUT:$@ $(flibs) $(wlibs) -IMPLIB:$(basename $@).lib)
PLUGIN_LINK_RULE = $(SO_LINK_RULE)

RC_RULE		 = $(RC) -fo $(call cygpathconvert,$@) $<
MOC_RULE         = $(call cygpathconvert,$(MOC) $(MOCFLAGS) $^ -o $@)
RCC_RULE	 = $(call cygpathconvert,$(RCC) $(RCCFLAGS) -name $(basename $^) -o $@ $^)  
UI_RULE		 = $(call cygpathconvert,$(UIC) $^ -o $@)

ifeq ($(WINDOWS_AUTO_EXPORT_DLL),TRUE)
SO_POST_PROCESS  = $(call cygpathconvert,export MSVCLINK=$(CXX_LD)) ; $(CREATEDLL) $(call cygpathconvert, -n$(basename $@).map "-l$(lib_dir);$(obj_dir)" -MX86 -i$(basename $@).lib)
endif

#
#   This will be very installation specific. These are the 3rd party libs
#   which are normally "system installed" on UNIX. We have to include
#   individual include and library paths to pick these up.
#

WINLIBS     += Ws2_32 kernel32 user32 gdi32 winspool comdlg32 advapi32 \
               shell32 ole32 oleaut32 uuid odbc32 odbccp32

LIBS3        = portaudio

IPATH	    += $(STAGE)/include \
               $(SRC_ROOT)/pub/win_pthreads \
	       $(SRC_ROOT)/pub/win_posix \
	       $(SRC_ROOT)/pub/pcre \
	       $(SRC_ROOT)/pub/winGL \
	       $(QTDIR)/include/QtCore   # gets around shitty Qt header bug
LPATH       += $(STAGE)/lib

SYSTEM_LIBS += atomic GraphicsMagick libquicktime
SHARED       = -DLL
DYNAMIC      = -DLL
DEPOUTPUT    = >
INSTALL      = install -p
LD_DYNAMIC   =
LD_STATIC    =
LD_LOADALL   =
LD_NOLOADALL =
NEVERDYNAMIC = pthread

#
#   This would be standard cygwin stuff
#
DEBUGGER     =
MAKEINFO     = makeinfo
MAKEHTML     = texi2html -split section
MAKEPDF      = pdftex
ASCIIDOC     = $(SRC_ROOT)/python/asciidoc/asciidoc.py
PDFTEXT      = echo ''
