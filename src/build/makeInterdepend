#!/usr/bin/env python
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#
#   Create a Makefile.d in obj_dir

import buildTools
import os

buildTools.verbose = 0

#p = buildTools.Project()
#p.loadProjectInfo(".")
#p.loadProjectDAG()
p = buildTools.loadCachedProjectDAG()

targets = p.projectsInBuildOrder()
objDir  = p.root.objdir
outfile = objDir + "/Makefile.d"

buildTools.info("makeInterdepend: creating " + outfile)

deplibs = "DEPLIBS ="

writtenDepList = []
for n in targets:
    if n != p.root:
        if n.target not in writtenDepList:
            deplibs = deplibs + " " + n.target
            writtenDepList.append(n.target)

deplibs = deplibs + "\n"

# some weird stuff happens in parallels vm with timing of file opening or
# there's some other process in our build system that can create the
# interdepend file at the same time (seems unlikely)

if os.access(objDir, os.W_OK) == 0:
    try:
        os.makedirs(objDir)
    except:
        print("WARNING: makeInterdepend: makedirs failed for %s (already created?)" % objDir)

file = None

try:
    file = open(outfile, "w")
except:
    print("ERROR: makeInterdepend failed to open output file for writing")
    exit(-1)

if file == None:
    print("ERROR: makeInterdepend failed to open output file for writing")
    exit(-1)

file.write(deplibs)

for deplib in writtenDepList:
    file.write("\n" + deplib + " : ;\n")


#
# Write out the bit of Makefile code that includes the
# depfiles and metadepfiles.
#
fwriteDepList = []
fwriteDepList.append('\n\nifneq ($(words $(depfiles)),0)\n')
fwriteDepList.append('-include $(depfiles)\n')
fwriteDepList.append('endif\n\n')

fwriteDepList.append('ifneq ($(words $(metadepfiles)),0)\n')
fwriteDepList.append('-include $(metadepfiles)\n')
fwriteDepList.append('endif\n\n')

file.writelines(fwriteDepList)

file.close()

# Local Variables:
# mode: python
# end:
