#!/usr/bin/env python
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#
#   Print out project dependancies
#

import buildTools
import os
import sys

def node (t):
    shape = "box"
    if t.type == 'LIBRARY':
        shape = "box" 
    elif t.type == 'SHARED_LIBRARY' or t.systemLib == 1:
        shape = "parallelogram"
    elif t.type == 'EXECUTABLE':
        shape = "ellipse"
    elif t.type == 'EXECUTABLE_WITH_PLUGINS':
        shape = "ellipse"
    else:
        shape = "box"

    return '  "%s" [shape=%s];' % (t.name, shape)

def arrow (anode, bnode):
    a = anode.name
    b = bnode.name
    return '"%s" -> "%s";' % (a, b)

#----------------------------------------------------------------------

if buildTools.isProjectDirectory("."):
    buildTools.verbose = 0
    #p = buildTools.Project()
    #p.loadProjectInfo(".")
    #p.loadProjectDAG()
    p = buildTools.loadCachedProjectDAG()
    buildTools.verbose = 1
    targets = p.projectsInBuildOrder(1)
elif buildTools.isPackageDirectory("."):
    buildTools.verbose = 0
    p = buildTools.Package(".")
    buildTools.verbose = 1
    targets = p.projectsInBuildOrder(0)
else:
    buildTools.error("Not a project or package")
    sys.exit(-1)

subgraphs = {}
subgraphs["System"] = []

for t in targets:
    if t.systemLib == 1:
        subgraphs["System"].append(t)
        t.subgraph = "System"
    else:
        b = os.path.split(os.path.split(t.path)[0])[1]
        if b not in subgraphs.keys():
            subgraphs[b] = []
        subgraphs[b].append(t)
        t.subgraph = b

print 'digraph G {'

for g in subgraphs.keys():
    sg = subgraphs[g]
    print 'subgraph "cluster_%s" {' % g
    print 'label="%s";' % g
    
    for t in sg:
        print node(t)

    for t in sg:
        for b in t.builtFromProjects:
            if b in sg:
                print arrow(b, t)

    print "}"

for t in targets:
    for b in t.builtFromProjects:
        if b.subgraph != t.subgraph:
            print arrow(b, t)

print "}"

#if buildTools.isProjectDirectory("."):
#    if p.modules != []:
#        for t in p.modules:
#            print t.name

# Local Variables:
# mode: python
# end:
