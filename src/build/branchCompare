#! /usr/bin/env python
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#

import subprocess, re, sys, os

def getCommits (name) :
    args = ['git', 'log', name]

    commitPipe = subprocess.Popen (args, stdout=subprocess.PIPE)

    lines = commitPipe.stdout.readlines();
    # print "got %s lines " % len(lines)
    commits = []
    commitToCherry = {}
    cherryToCommit = {}
    for l in lines :

        #  Find commits
        #
        mat = re.match ("^commit (.*)$", l)
        if (mat) :
            commits.append(mat.group(1))
            # print "commit: ", l
            continue;

        #  Merge commits are never shared between branches, so skip
        #
        mat = re.match ("^Merge: ", l)
        if (mat) :
            commits = commits[:-1]
            continue;

        #   Find cherry-picks and map to corresponding commit
        #
        mat = re.match ("^    \(cherry picked from.* commit (.*)\)$", l)
        if (mat) :
            commitToCherry[commits[-1]] = mat.group(1)
            cherryToCommit[mat.group(1)] = commits[-1]
            # print "cherry: ", l
            continue;

    return (commits, commitToCherry, cherryToCommit)


if (len(sys.argv) != 3) :
    print "usage: %s <branchName1> <branchName2>\n    print commits that are in branch1 but not in branch2 (even cherry-picked)." % sys.argv[0]
    sys.exit(1)

one = sys.argv[1]
two = sys.argv[2]
(oneCommits, oneCommitToCherry, oneCherryToCommit) = getCommits (one);
(twoCommits, twoCommitToCherry, twoCherryToCommit) = getCommits (two);

oneCommits.reverse()

for c in oneCommits:
    inBoth = False
    if (c in twoCommits) :
        # this commit is shared between the branches
        inBoth = True

    elif (oneCommitToCherry.has_key(c) and (oneCommitToCherry[c] in twoCommits)) :
        # this commit is a cherry pick and 
        # this commit was cherry-picked from the other branch
        inBoth = True

    elif (twoCherryToCommit.has_key(c)) :
        # this commit was cherry-picked into the other branch from
        # this branch
        inBoth = True
            
    if (not inBoth) :
        #os.system ("git log --stat -1 %s | cat" % c)
        #sys.stdout.write("\n")
        args = ['git', 'log', '--stat', '-1', c]
        logPipe = subprocess.Popen (args, stdout=subprocess.PIPE)
        lines = logPipe.stdout.readlines()
        for l in lines :
            sys.stdout.write(l)
        sys.stdout.write("\n")
        
