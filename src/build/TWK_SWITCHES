
Platform switches. Add these switches to the CFLAGS, etc, to turn
on/off various features of the source code.

TWK_BIG_ENDIAN

    Defined if the machine is big endian. replaces TWK_NO_SGI_BYTE_ORDER.

TWK_LITTLE_ENDIAN

    Defined if the machine is little endian. replaces TWK_NO_SGI_BYTE_ORDER.

TWK_NO_ISO_STD_IOS

    If defined use the <iostream.h> include and friends for the adapter
    library instead of standard <iostream>

TWK_NO_FLOAT_INTRINSICS

    If defined, the float math intrinsic functions cosf, sinf, etc,
    will not be used. 

TWK_NO_PLATFORM_STRING_IO

    If defined, the iostream adapter library will supply oprerator<<()
    and operator>>() for the basic_string<> class.

TWK_NO_STD_NUMERIC_LIMITS

    Define this switch if your implementation does not have the STL
    class std::numeric_limits defined in the header file <limits>

TWK_NO_STD_MIN_MAX

    The TwkMathMath file provides wrappers STD_MIN and STD_MAX which normally
    are defined to std::min and std::max. However, if a compiler doesn't
    have these defined (VisualC++) you can define this flag which will cause
    STD_MIN and STD_MAX to be equivalent to a defined template function.

TWK_NO_STD_IOS_BINARY_FLAG
    
    The STD_IOS class (std::ios) sometimes has a flag "binary" on systems
    which distinguish between binary and ascii streams. Win32 does not
    make this distinction, though Irix does. Turn this flag on if
    your STD_IOS implementation does NOT have a "binary" flag.

TWK_NO_SGI_BYTE_ORDER

    This flag is poorly named, but it basically means that the
    sense of bytes in a 32 bit word is like or not-like an SGI machine.
    Since the SGI style is the more common (in our world), the flag
    must be turned on when this is NOT true. (Windows)

    If this flag is set it means the compiling machine is little endian.
