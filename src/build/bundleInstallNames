#!/usr/bin/env python
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#
#   Modifies build tree binaries to find dylibs in the expected place
#

import os
import os.path
import sys
import string
import re

#
#   Usage: bundleInstallNames /path/to/bin/dir relative/path/to/install/lib/dir
#
#   NOTE: the relative path is relative to the bin dir passed as the first
#   argument.
#

binaries  = sys.argv[1:]
libsuffix = "lib"
build_root = os.environ["BUILD_ROOT"]

echoOnly = False

def runCommand(cmd):
    if echoOnly:
        print "CMD:", cmd
    else:
        os.system(cmd)

def otool(file):
    dylibs = []
    fworks = []
    p = os.popen("otool -L %s" % file, "r")
    line = p.readline().rstrip(":")

    while line:
        obj = string.split(line)[0]
        if re.match("/usr/lib", obj) == None:
            if re.match("/System", obj) == None:
                if re.match("@executable", obj) == None:
                    if re.match(".+\.dylib", obj) != None:
                        # Don't add a .dylib to its own list of libs
                        if re.match(".+\.dylib", file) != None:
                            if not file.endswith(obj):
                                dylibs.append(obj)
                        else:
                            dylibs.append(obj)
                    elif re.match(".+\.framework", obj) != None:
                        fworks.append(obj)
        line = p.readline().rstrip(":")

    p.close()
    return (dylibs, fworks)

def changeLibInstallNames(file, libs, newpath):
    if len(libs):
        cmd = "install_name_tool"
        cmd += " -id " + file
        for l in libs:
            cmd += " -change %s %s/%s" % (l, newpath, os.path.basename(l))
        cmd += " " + file
        print "INFO: makeAppBundle: processing %s" % file
        print "INFO:   ", cmd
        runCommand(cmd)

def changeFworkInstallNames(file, fworks, newpath):
    if len(fworks):
        cmd = "install_name_tool"
        count = 0
        for f in fworks:
            if os.path.basename(f) != os.path.basename(file):
                cmd += " -change %s %s/%s" % (f, newpath, f)
                count += 1
        cmd += " " + file
        if count != 0:
            print "INFO: makeAppBundle: processing %s" % file
            print "INFO:   ", cmd
            runCommand(cmd)


#
#   find all of the libs
#

libs = []
fworks = []

def addToLibsAndFworks(stuff):
    (ls, fs) = stuff
    for l in ls:
        if l not in libs:
            print "INFO: makeAppBundle: adding library", l
            libs.append(l)
    for f in fs:
        if f not in fworks:
            print "INFO: makeAppBundle: adding framework", f
            fworks.append(f)

for binary in binaries:
    b = otool(binary)
    addToLibsAndFworks(b)

for binary in binaries:
    changeLibInstallNames(binary, libs, os.path.join(build_root, "lib"))

# Local Variables:
# mode: python
# end:
