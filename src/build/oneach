#!/usr/bin/env python
#
#  Copyright (c) 2001, Tweak Films
#  Copyright (c) 2008, Tweak Software
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
#     * Neither the name of the Tweak Software nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
# 
#  THIS SOFTWARE IS PROVIDED BY Tweak Software ''AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL Tweak Software BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
#  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#
#   Run a shell command on each library in build order

import buildTools
import os
import sys
import re

#
# add -w to MAKEFLAGS if its not already there. This will force any make
# invocations to output "Entering" and "Leaving" messages so that vim,
# emacs, etc, can get the full path to the file on an error
#

makeflags = os.getenv("MAKEFLAGS", "")

makeflags = re.sub ("--jobserver-fds=[0-9]+,([^ ]+) -j", "-j \g<1>", makeflags)

if not "-w" in makeflags:
    makeflags = "-w " + makeflags

os.putenv("MAKEFLAGS", makeflags)

#
#   Get the project info
#

if buildTools.isProjectDirectory("."):
    buildTools.verbose = 0
    #p = buildTools.Project()
    #p.loadProjectInfo(".")
    #p.loadProjectDAG()
    p = buildTools.loadCachedProjectDAG()
    buildTools.verbose = 1
    targets = p.projectsInBuildOrder()
elif buildTools.isPackageDirectory("."):
    buildTools.verbose = 0
    p = buildTools.Package(".")
    buildTools.verbose = 1
    targets = p.projectsInBuildOrder()
else:
    buildTools.error("Not a project or package")
    sys.exit(-1)

args = ""

del sys.argv[0]
for x in sys.argv:
    args = args + " " + x

dir = os.getcwd()

for n in targets:
    buildTools.info("In " + n.path)
    os.chdir(n.path)
    status = os.system(args)
    if (status & 0xff00) != 0:
        print "-------- FAILED STATUS =", (status >> 8)
        sys.exit(status >> 2)
    os.chdir(dir)


# Local Variables:
# mode: python
# end:
