//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#ifndef __MuQt__QPlainTextEditType__h__
#define __MuQt__QPlainTextEditType__h__
#include <iostream>
#include <Mu/Class.h>
#include <Mu/Process.h>
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include <QtSvg/QtSvg>
#include <MuQt/Bridge.h>

namespace Mu {
class MuQt_QPlainTextEdit;

//
//  NOTE: file generated by qt2mu.py
//

class QPlainTextEditType : public Class
{
  public:

    typedef MuQt_QPlainTextEdit MuQtType;
    typedef QPlainTextEdit QtType;

    //
    //  Constructors
    //

    QPlainTextEditType(Context* context, 
           const char* name,
           Class* superClass = 0,
           Class* superClass2 = 0);

    virtual ~QPlainTextEditType();

    static bool isInheritable() { return true; }
    static inline ClassInstance* cachedInstance(const MuQtType*);

    //
    //  Class API
    //

    virtual void load();

    MemberFunction* _func[29];
};

// Inheritable object

class MuQt_QPlainTextEdit : public QPlainTextEdit
{
  public:
    virtual ~MuQt_QPlainTextEdit();
    MuQt_QPlainTextEdit(Pointer muobj, const CallEnvironment*, QWidget * parent) ;
    MuQt_QPlainTextEdit(Pointer muobj, const CallEnvironment*, const QString & text, QWidget * parent) ;
    virtual QVariant loadResource(int type, const QUrl & name) ;
  protected:
    virtual bool canInsertFromMimeData(const QMimeData * source) const;
    virtual QMimeData * createMimeDataFromSelection() const;
    virtual void insertFromMimeData(const QMimeData * source) ;
    virtual void changeEvent(QEvent * e) ;
    virtual void contextMenuEvent(QContextMenuEvent * event) ;
    virtual void dragEnterEvent(QDragEnterEvent * e) ;
    virtual void dragLeaveEvent(QDragLeaveEvent * e) ;
    virtual void dragMoveEvent(QDragMoveEvent * e) ;
    virtual void dropEvent(QDropEvent * e) ;
    virtual void focusInEvent(QFocusEvent * e) ;
    virtual bool focusNextPrevChild(bool next) ;
    virtual void focusOutEvent(QFocusEvent * e) ;
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery property) const;
    virtual void keyPressEvent(QKeyEvent * e) ;
    virtual void keyReleaseEvent(QKeyEvent * e) ;
    virtual void mouseDoubleClickEvent(QMouseEvent * e) ;
    virtual void mouseMoveEvent(QMouseEvent * e) ;
    virtual void mousePressEvent(QMouseEvent * e) ;
    virtual void mouseReleaseEvent(QMouseEvent * e) ;
    virtual void paintEvent(QPaintEvent * e) ;
    virtual void resizeEvent(QResizeEvent * e) ;
    virtual void scrollContentsBy(int dx, int dy) ;
    virtual void showEvent(QShowEvent * _p14) ;
    virtual void wheelEvent(QWheelEvent * e) ;
  public:
    virtual QSize minimumSizeHint() const;
    virtual QSize sizeHint() const;
  protected:
    virtual bool viewportEvent(QEvent * event) ;
    virtual bool event(QEvent * event_) ;
  public:
    QRectF blockBoundingGeometry_pub(const QTextBlock & block) const { return blockBoundingGeometry(block); }
    QRectF blockBoundingGeometry_pub_parent(const QTextBlock & block) const { return QPlainTextEdit::blockBoundingGeometry(block); }
    QRectF blockBoundingRect_pub(const QTextBlock & block) const { return blockBoundingRect(block); }
    QRectF blockBoundingRect_pub_parent(const QTextBlock & block) const { return QPlainTextEdit::blockBoundingRect(block); }
    bool canInsertFromMimeData_pub(const QMimeData * source) const { return canInsertFromMimeData(source); }
    bool canInsertFromMimeData_pub_parent(const QMimeData * source) const { return QPlainTextEdit::canInsertFromMimeData(source); }
    QPointF contentOffset_pub() const { return contentOffset(); }
    QPointF contentOffset_pub_parent() const { return QPlainTextEdit::contentOffset(); }
    QMimeData * createMimeDataFromSelection_pub() const { return createMimeDataFromSelection(); }
    QMimeData * createMimeDataFromSelection_pub_parent() const { return QPlainTextEdit::createMimeDataFromSelection(); }
    QTextBlock firstVisibleBlock_pub() const { return firstVisibleBlock(); }
    QTextBlock firstVisibleBlock_pub_parent() const { return QPlainTextEdit::firstVisibleBlock(); }
    void insertFromMimeData_pub(const QMimeData * source)  { insertFromMimeData(source); }
    void insertFromMimeData_pub_parent(const QMimeData * source)  { QPlainTextEdit::insertFromMimeData(source); }
    void changeEvent_pub(QEvent * e)  { changeEvent(e); }
    void changeEvent_pub_parent(QEvent * e)  { QPlainTextEdit::changeEvent(e); }
    void contextMenuEvent_pub(QContextMenuEvent * event)  { contextMenuEvent(event); }
    void contextMenuEvent_pub_parent(QContextMenuEvent * event)  { QPlainTextEdit::contextMenuEvent(event); }
    void dragEnterEvent_pub(QDragEnterEvent * e)  { dragEnterEvent(e); }
    void dragEnterEvent_pub_parent(QDragEnterEvent * e)  { QPlainTextEdit::dragEnterEvent(e); }
    void dragLeaveEvent_pub(QDragLeaveEvent * e)  { dragLeaveEvent(e); }
    void dragLeaveEvent_pub_parent(QDragLeaveEvent * e)  { QPlainTextEdit::dragLeaveEvent(e); }
    void dragMoveEvent_pub(QDragMoveEvent * e)  { dragMoveEvent(e); }
    void dragMoveEvent_pub_parent(QDragMoveEvent * e)  { QPlainTextEdit::dragMoveEvent(e); }
    void dropEvent_pub(QDropEvent * e)  { dropEvent(e); }
    void dropEvent_pub_parent(QDropEvent * e)  { QPlainTextEdit::dropEvent(e); }
    void focusInEvent_pub(QFocusEvent * e)  { focusInEvent(e); }
    void focusInEvent_pub_parent(QFocusEvent * e)  { QPlainTextEdit::focusInEvent(e); }
    bool focusNextPrevChild_pub(bool next)  { return focusNextPrevChild(next); }
    bool focusNextPrevChild_pub_parent(bool next)  { return QPlainTextEdit::focusNextPrevChild(next); }
    void focusOutEvent_pub(QFocusEvent * e)  { focusOutEvent(e); }
    void focusOutEvent_pub_parent(QFocusEvent * e)  { QPlainTextEdit::focusOutEvent(e); }
    QVariant inputMethodQuery_pub(Qt::InputMethodQuery property) const { return inputMethodQuery(property); }
    QVariant inputMethodQuery_pub_parent(Qt::InputMethodQuery property) const { return QPlainTextEdit::inputMethodQuery(property); }
    void keyPressEvent_pub(QKeyEvent * e)  { keyPressEvent(e); }
    void keyPressEvent_pub_parent(QKeyEvent * e)  { QPlainTextEdit::keyPressEvent(e); }
    void keyReleaseEvent_pub(QKeyEvent * e)  { keyReleaseEvent(e); }
    void keyReleaseEvent_pub_parent(QKeyEvent * e)  { QPlainTextEdit::keyReleaseEvent(e); }
    void mouseDoubleClickEvent_pub(QMouseEvent * e)  { mouseDoubleClickEvent(e); }
    void mouseDoubleClickEvent_pub_parent(QMouseEvent * e)  { QPlainTextEdit::mouseDoubleClickEvent(e); }
    void mouseMoveEvent_pub(QMouseEvent * e)  { mouseMoveEvent(e); }
    void mouseMoveEvent_pub_parent(QMouseEvent * e)  { QPlainTextEdit::mouseMoveEvent(e); }
    void mousePressEvent_pub(QMouseEvent * e)  { mousePressEvent(e); }
    void mousePressEvent_pub_parent(QMouseEvent * e)  { QPlainTextEdit::mousePressEvent(e); }
    void mouseReleaseEvent_pub(QMouseEvent * e)  { mouseReleaseEvent(e); }
    void mouseReleaseEvent_pub_parent(QMouseEvent * e)  { QPlainTextEdit::mouseReleaseEvent(e); }
    void paintEvent_pub(QPaintEvent * e)  { paintEvent(e); }
    void paintEvent_pub_parent(QPaintEvent * e)  { QPlainTextEdit::paintEvent(e); }
    void resizeEvent_pub(QResizeEvent * e)  { resizeEvent(e); }
    void resizeEvent_pub_parent(QResizeEvent * e)  { QPlainTextEdit::resizeEvent(e); }
    void scrollContentsBy_pub(int dx, int dy)  { scrollContentsBy(dx, dy); }
    void scrollContentsBy_pub_parent(int dx, int dy)  { QPlainTextEdit::scrollContentsBy(dx, dy); }
    void showEvent_pub(QShowEvent * _p14)  { showEvent(_p14); }
    void showEvent_pub_parent(QShowEvent * _p14)  { QPlainTextEdit::showEvent(_p14); }
    void wheelEvent_pub(QWheelEvent * e)  { wheelEvent(e); }
    void wheelEvent_pub_parent(QWheelEvent * e)  { QPlainTextEdit::wheelEvent(e); }
    bool viewportEvent_pub(QEvent * event)  { return viewportEvent(event); }
    bool viewportEvent_pub_parent(QEvent * event)  { return QPlainTextEdit::viewportEvent(event); }
    bool event_pub(QEvent * event_)  { return event(event_); }
    bool event_pub_parent(QEvent * event_)  { return QPlainTextEdit::event(event_); }
  public:
    const QPlainTextEditType* _baseType;
    ClassInstance* _obj;
    const CallEnvironment* _env;
};

inline ClassInstance* QPlainTextEditType::cachedInstance(const QPlainTextEditType::MuQtType* obj) { return obj->_obj; }

} // Mu

#endif // __MuQt__QPlainTextEditType__h__
