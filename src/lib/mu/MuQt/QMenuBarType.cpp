//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QMenuBarType.h"
#include <QtGui/QtGui>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include "QWidgetType.h"
#include "QActionType.h"
#include "QIconType.h"
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include "QObjectType.h"
#include "QCloseEventType.h"
#include "QDragMoveEventType.h"
#include "QMenuType.h"
#include "QPointType.h"
#include "QWheelEventType.h"
#include "QMouseEventType.h"
#include "QFocusEventType.h"
#include "QIconType.h"
#include "QShowEventType.h"
#include "QSizeType.h"
#include "QDropEventType.h"
#include "QPaintEventType.h"
#include "QTabletEventType.h"
#include "QWidgetType.h"
#include "QActionType.h"
#include "QDragLeaveEventType.h"
#include "QHideEventType.h"
#include "QMoveEventType.h"
#include "QTimerEventType.h"
#include "QDragEnterEventType.h"
#include "QEventType.h"
#include "QRectType.h"
#include "QContextMenuEventType.h"
#include "QKeyEventType.h"
#include "QVariantType.h"
#include "QResizeEventType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

//----------------------------------------------------------------------
//  INHERITABLE TYPE IMPLEMENTATION

// destructor
MuQt_QMenuBar::~MuQt_QMenuBar()
{
    if (_obj)
    {
        *_obj->data<Pointer>() = Pointer(0);
        _obj->releaseExternal();
    }
    _obj = 0;
    _env = 0;
    _baseType = 0;
}

MuQt_QMenuBar::MuQt_QMenuBar(Pointer muobj, const CallEnvironment* ce, QWidget * parent) 
 : QMenuBar(parent)
{
    _env = ce;
    _obj = reinterpret_cast<ClassInstance*>(muobj);
    _obj->retainExternal();
    MuLangContext* c = (MuLangContext*)_env->context();
    _baseType = c->findSymbolOfTypeByQualifiedName<QMenuBarType>(c->internName("qt.QMenuBar"));
}

int MuQt_QMenuBar::heightForWidth(int _p5) const
{
    if (!_env) return QMenuBar::heightForWidth(_p5);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[0];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(_p5);
        Value rval = _env->call(F, args);
        return (int)(rval._int);
    }
    else
    {
        return QMenuBar::heightForWidth(_p5);
    }
}

QSize MuQt_QMenuBar::minimumSizeHint() const
{
    if (!_env) return QMenuBar::minimumSizeHint();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[1];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return getqtype<QSizeType>(rval._Pointer);
    }
    else
    {
        return QMenuBar::minimumSizeHint();
    }
}

QSize MuQt_QMenuBar::sizeHint() const
{
    if (!_env) return QMenuBar::sizeHint();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[2];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return getqtype<QSizeType>(rval._Pointer);
    }
    else
    {
        return QMenuBar::sizeHint();
    }
}

void MuQt_QMenuBar::changeEvent(QEvent * e) 
{
    if (!_env) { QMenuBar::changeEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[3];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,e,"qt.QEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::changeEvent(e);
    }
}

bool MuQt_QMenuBar::event(QEvent * e) 
{
    if (!_env) return QMenuBar::event(e);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[4];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,e,"qt.QEvent"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QMenuBar::event(e);
    }
}

bool MuQt_QMenuBar::eventFilter(QObject * object, QEvent * event) 
{
    if (!_env) return QMenuBar::eventFilter(object, event);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[5];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeinstance<QObjectType>(c,object,"qt.QObject"));
        args[2] = Value(makeqpointer<QEventType>(c,event,"qt.QEvent"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QMenuBar::eventFilter(object, event);
    }
}

void MuQt_QMenuBar::focusInEvent(QFocusEvent * _p15) 
{
    if (!_env) { QMenuBar::focusInEvent(_p15); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[6];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QFocusEventType>(c,_p15,"qt.QFocusEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::focusInEvent(_p15);
    }
}

void MuQt_QMenuBar::focusOutEvent(QFocusEvent * _p15) 
{
    if (!_env) { QMenuBar::focusOutEvent(_p15); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[7];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QFocusEventType>(c,_p15,"qt.QFocusEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::focusOutEvent(_p15);
    }
}

void MuQt_QMenuBar::keyPressEvent(QKeyEvent * e) 
{
    if (!_env) { QMenuBar::keyPressEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[8];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QKeyEventType>(c,e,"qt.QKeyEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::keyPressEvent(e);
    }
}

void MuQt_QMenuBar::leaveEvent(QEvent * _p10) 
{
    if (!_env) { QMenuBar::leaveEvent(_p10); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[9];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,_p10,"qt.QEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::leaveEvent(_p10);
    }
}

void MuQt_QMenuBar::mouseMoveEvent(QMouseEvent * e) 
{
    if (!_env) { QMenuBar::mouseMoveEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[10];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,e,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::mouseMoveEvent(e);
    }
}

void MuQt_QMenuBar::mousePressEvent(QMouseEvent * e) 
{
    if (!_env) { QMenuBar::mousePressEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[11];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,e,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::mousePressEvent(e);
    }
}

void MuQt_QMenuBar::mouseReleaseEvent(QMouseEvent * e) 
{
    if (!_env) { QMenuBar::mouseReleaseEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[12];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,e,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::mouseReleaseEvent(e);
    }
}

void MuQt_QMenuBar::paintEvent(QPaintEvent * e) 
{
    if (!_env) { QMenuBar::paintEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[13];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QPaintEventType>(c,e,"qt.QPaintEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::paintEvent(e);
    }
}

void MuQt_QMenuBar::resizeEvent(QResizeEvent * _p16) 
{
    if (!_env) { QMenuBar::resizeEvent(_p16); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[14];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QResizeEventType>(c,_p16,"qt.QResizeEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::resizeEvent(_p16);
    }
}

void MuQt_QMenuBar::timerEvent(QTimerEvent * e) 
{
    if (!_env) { QMenuBar::timerEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[15];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QTimerEventType>(c,e,"qt.QTimerEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::timerEvent(e);
    }
}

QVariant MuQt_QMenuBar::inputMethodQuery(Qt::InputMethodQuery query) const
{
    if (!_env) return QMenuBar::inputMethodQuery(query);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[16];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(int(query));
        Value rval = _env->call(F, args);
        return getqtype<QVariantType>(rval._Pointer);
    }
    else
    {
        return QMenuBar::inputMethodQuery(query);
    }
}

void MuQt_QMenuBar::closeEvent(QCloseEvent * event) 
{
    if (!_env) { QMenuBar::closeEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[17];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QCloseEventType>(c,event,"qt.QCloseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::closeEvent(event);
    }
}

void MuQt_QMenuBar::contextMenuEvent(QContextMenuEvent * event) 
{
    if (!_env) { QMenuBar::contextMenuEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[18];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QContextMenuEventType>(c,event,"qt.QContextMenuEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::contextMenuEvent(event);
    }
}

void MuQt_QMenuBar::dragEnterEvent(QDragEnterEvent * event) 
{
    if (!_env) { QMenuBar::dragEnterEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[19];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDragEnterEventType>(c,event,"qt.QDragEnterEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::dragEnterEvent(event);
    }
}

void MuQt_QMenuBar::dragLeaveEvent(QDragLeaveEvent * event) 
{
    if (!_env) { QMenuBar::dragLeaveEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[20];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDragLeaveEventType>(c,event,"qt.QDragLeaveEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::dragLeaveEvent(event);
    }
}

void MuQt_QMenuBar::dragMoveEvent(QDragMoveEvent * event) 
{
    if (!_env) { QMenuBar::dragMoveEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[21];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDragMoveEventType>(c,event,"qt.QDragMoveEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::dragMoveEvent(event);
    }
}

void MuQt_QMenuBar::dropEvent(QDropEvent * event) 
{
    if (!_env) { QMenuBar::dropEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[22];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDropEventType>(c,event,"qt.QDropEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::dropEvent(event);
    }
}

void MuQt_QMenuBar::enterEvent(QEvent * event) 
{
    if (!_env) { QMenuBar::enterEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[23];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,event,"qt.QEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::enterEvent(event);
    }
}

bool MuQt_QMenuBar::focusNextPrevChild(bool next) 
{
    if (!_env) return QMenuBar::focusNextPrevChild(next);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[24];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(next);
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QMenuBar::focusNextPrevChild(next);
    }
}

void MuQt_QMenuBar::hideEvent(QHideEvent * event) 
{
    if (!_env) { QMenuBar::hideEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[25];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QHideEventType>(c,event,"qt.QHideEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::hideEvent(event);
    }
}

void MuQt_QMenuBar::keyReleaseEvent(QKeyEvent * event) 
{
    if (!_env) { QMenuBar::keyReleaseEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[26];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QKeyEventType>(c,event,"qt.QKeyEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::keyReleaseEvent(event);
    }
}

void MuQt_QMenuBar::mouseDoubleClickEvent(QMouseEvent * event) 
{
    if (!_env) { QMenuBar::mouseDoubleClickEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[27];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,event,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::mouseDoubleClickEvent(event);
    }
}

void MuQt_QMenuBar::moveEvent(QMoveEvent * event) 
{
    if (!_env) { QMenuBar::moveEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[28];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMoveEventType>(c,event,"qt.QMoveEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::moveEvent(event);
    }
}

void MuQt_QMenuBar::showEvent(QShowEvent * event) 
{
    if (!_env) { QMenuBar::showEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[29];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QShowEventType>(c,event,"qt.QShowEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::showEvent(event);
    }
}

void MuQt_QMenuBar::tabletEvent(QTabletEvent * event) 
{
    if (!_env) { QMenuBar::tabletEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[30];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QTabletEventType>(c,event,"qt.QTabletEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::tabletEvent(event);
    }
}

void MuQt_QMenuBar::wheelEvent(QWheelEvent * event) 
{
    if (!_env) { QMenuBar::wheelEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[31];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QWheelEventType>(c,event,"qt.QWheelEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QMenuBar::wheelEvent(event);
    }
}



//----------------------------------------------------------------------
//  Mu Type CONSTRUCTORS

QMenuBarType::QMenuBarType(Context* c, const char* name, Class* super, Class* super2)
: Class(c, name, vectorOf2(super, super2))
{
}

QMenuBarType::~QMenuBarType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

static Pointer
QMenuBar_QMenuBar_QObject(Thread& NODE_THREAD, Pointer obj)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

    if (!widget)
    {
        return 0;
    }
    else if (QMenuBar* w = object<QMenuBar>(widget))
    {
        QMenuBarType* type = 
            c->findSymbolOfTypeByQualifiedName<QMenuBarType>(c->internName("qt.QMenuBar"), false);
        ClassInstance* o = ClassInstance::allocate(type);
        setobject(o, w);
        return o;
    }
    else
    {
        throw BadCastException();
    }
}

static NODE_IMPLEMENTATION(castFromObject, Pointer)
{
    NODE_RETURN( QMenuBar_QMenuBar_QObject(NODE_THREAD, NODE_ARG(0, Pointer)) );
}

Pointer qt_QMenuBar_QMenuBar_QMenuBar_QMenuBar_QWidget(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWidget * arg1 = object<QWidget>(param_parent);
    setobject(param_this, new MuQt_QMenuBar(param_this, NODE_THREAD.process()->callEnv(), arg1));
    return param_this;
}

Pointer qt_QMenuBar_actionAt_QAction_QMenuBar_QPoint(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pt)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    const QPoint  arg1 = getqtype<QPointType>(param_pt);
    return makeinstance<QActionType>(c, arg0->actionAt(arg1), "qt.QAction");
}

Pointer qt_QMenuBar_actionGeometry_QRect_QMenuBar_QAction(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_act)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QAction * arg1 = object<QAction>(param_act);
    return makeqtype<QRectType>(c,arg0->actionGeometry(arg1),"qt.QRect");
}

Pointer qt_QMenuBar_activeAction_QAction_QMenuBar(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    return makeinstance<QActionType>(c, arg0->activeAction(), "qt.QAction");
}

Pointer qt_QMenuBar_addAction_QAction_QMenuBar_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    const QString  arg1 = qstring(param_text);
    return makeinstance<QActionType>(c, arg0->addAction(arg1), "qt.QAction");
}

void qt_QMenuBar_addAction_void_QMenuBar_QAction(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_action)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QAction * arg1 = object<QAction>(param_action);
    arg0->addAction(arg1);
}

Pointer qt_QMenuBar_addMenu_QAction_QMenuBar_QMenu(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_menu)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QMenu * arg1 = object<QMenu>(param_menu);
    return makeinstance<QActionType>(c, arg0->addMenu(arg1), "qt.QAction");
}

Pointer qt_QMenuBar_addMenu_QMenu_QMenuBar_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_title)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    const QString  arg1 = qstring(param_title);
    return makeinstance<QMenuType>(c, arg0->addMenu(arg1), "qt.QMenu");
}

Pointer qt_QMenuBar_addMenu_QMenu_QMenuBar_QIcon_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_icon, Pointer param_title)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    const QIcon  arg1 = getqtype<QIconType>(param_icon);
    const QString  arg2 = qstring(param_title);
    return makeinstance<QMenuType>(c, arg0->addMenu(arg1, arg2), "qt.QMenu");
}

Pointer qt_QMenuBar_addSeparator_QAction_QMenuBar(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    return makeinstance<QActionType>(c, arg0->addSeparator(), "qt.QAction");
}

void qt_QMenuBar_clear_void_QMenuBar(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    arg0->clear();
}

Pointer qt_QMenuBar_cornerWidget_QWidget_QMenuBar_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_corner)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    Qt::Corner arg1 = (Qt::Corner)(param_corner);
    return makeinstance<QWidgetType>(c, arg0->cornerWidget(arg1), "qt.QWidget");
}

Pointer qt_QMenuBar_insertMenu_QAction_QMenuBar_QAction_QMenu(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_before, Pointer param_menu)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QAction * arg1 = object<QAction>(param_before);
    QMenu * arg2 = object<QMenu>(param_menu);
    return makeinstance<QActionType>(c, arg0->insertMenu(arg1, arg2), "qt.QAction");
}

Pointer qt_QMenuBar_insertSeparator_QAction_QMenuBar_QAction(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_before)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QAction * arg1 = object<QAction>(param_before);
    return makeinstance<QActionType>(c, arg0->insertSeparator(arg1), "qt.QAction");
}

void qt_QMenuBar_setActiveAction_void_QMenuBar_QAction(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_act)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QAction * arg1 = object<QAction>(param_act);
    arg0->setActiveAction(arg1);
}

void qt_QMenuBar_setCornerWidget_void_QMenuBar_QWidget_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget, int param_corner)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QWidget * arg1 = object<QWidget>(param_widget);
    Qt::Corner arg2 = (Qt::Corner)(param_corner);
    arg0->setCornerWidget(arg1, arg2);
}

int qt_QMenuBar_heightForWidth_int_QMenuBar_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param__p5)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    int arg1 = (int)(param__p5);
    return isMuQtObject(arg0) ? arg0->QMenuBar::heightForWidth(arg1) : arg0->heightForWidth(arg1);
}

Pointer qt_QMenuBar_minimumSizeHint_QSize_QMenuBar(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    return isMuQtObject(arg0) ? makeqtype<QSizeType>(c,arg0->QMenuBar::minimumSizeHint(),"qt.QSize") : makeqtype<QSizeType>(c,arg0->minimumSizeHint(),"qt.QSize");
}

Pointer qt_QMenuBar_sizeHint_QSize_QMenuBar(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    return isMuQtObject(arg0) ? makeqtype<QSizeType>(c,arg0->QMenuBar::sizeHint(),"qt.QSize") : makeqtype<QSizeType>(c,arg0->sizeHint(),"qt.QSize");
}

void qt_QMenuBar_changeEvent_void_QMenuBar_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->changeEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->changeEvent_pub(arg1);
}

bool qt_QMenuBar_event_bool_QMenuBar_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_e);
    return isMuQtObject(arg0) ? ((MuQt_QMenuBar*)arg0)->event_pub_parent(arg1) : ((MuQt_QMenuBar*)arg0)->event_pub(arg1);
}

bool qt_QMenuBar_eventFilter_bool_QMenuBar_QObject_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_object, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QObject * arg1 = object<QObject>(param_object);
    QEvent * arg2 = getqpointer<QEventType>(param_event);
    return isMuQtObject(arg0) ? ((MuQt_QMenuBar*)arg0)->eventFilter_pub_parent(arg1, arg2) : ((MuQt_QMenuBar*)arg0)->eventFilter_pub(arg1, arg2);
}

void qt_QMenuBar_focusInEvent_void_QMenuBar_QFocusEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p15)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QFocusEvent * arg1 = getqpointer<QFocusEventType>(param__p15);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->focusInEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->focusInEvent_pub(arg1);
}

void qt_QMenuBar_focusOutEvent_void_QMenuBar_QFocusEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p15)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QFocusEvent * arg1 = getqpointer<QFocusEventType>(param__p15);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->focusOutEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->focusOutEvent_pub(arg1);
}

void qt_QMenuBar_keyPressEvent_void_QMenuBar_QKeyEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QKeyEvent * arg1 = getqpointer<QKeyEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->keyPressEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->keyPressEvent_pub(arg1);
}

void qt_QMenuBar_leaveEvent_void_QMenuBar_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p10)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param__p10);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->leaveEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->leaveEvent_pub(arg1);
}

void qt_QMenuBar_mouseMoveEvent_void_QMenuBar_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->mouseMoveEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->mouseMoveEvent_pub(arg1);
}

void qt_QMenuBar_mousePressEvent_void_QMenuBar_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->mousePressEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->mousePressEvent_pub(arg1);
}

void qt_QMenuBar_mouseReleaseEvent_void_QMenuBar_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->mouseReleaseEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->mouseReleaseEvent_pub(arg1);
}

void qt_QMenuBar_paintEvent_void_QMenuBar_QPaintEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QPaintEvent * arg1 = getqpointer<QPaintEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->paintEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->paintEvent_pub(arg1);
}

void qt_QMenuBar_resizeEvent_void_QMenuBar_QResizeEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p16)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QResizeEvent * arg1 = getqpointer<QResizeEventType>(param__p16);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->resizeEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->resizeEvent_pub(arg1);
}

void qt_QMenuBar_timerEvent_void_QMenuBar_QTimerEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QTimerEvent * arg1 = getqpointer<QTimerEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->timerEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->timerEvent_pub(arg1);
}

Pointer qt_QMenuBar_inputMethodQuery_QVariant_QMenuBar_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
    return isMuQtObject(arg0) ? makeqtype<QVariantType>(c,arg0->QMenuBar::inputMethodQuery(arg1),"qt.QVariant") : makeqtype<QVariantType>(c,arg0->inputMethodQuery(arg1),"qt.QVariant");
}

void qt_QMenuBar_closeEvent_void_QMenuBar_QCloseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QCloseEvent * arg1 = getqpointer<QCloseEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->closeEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->closeEvent_pub(arg1);
}

void qt_QMenuBar_contextMenuEvent_void_QMenuBar_QContextMenuEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QContextMenuEvent * arg1 = getqpointer<QContextMenuEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->contextMenuEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->contextMenuEvent_pub(arg1);
}

void qt_QMenuBar_dragEnterEvent_void_QMenuBar_QDragEnterEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QDragEnterEvent * arg1 = getqpointer<QDragEnterEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->dragEnterEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->dragEnterEvent_pub(arg1);
}

void qt_QMenuBar_dragLeaveEvent_void_QMenuBar_QDragLeaveEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QDragLeaveEvent * arg1 = getqpointer<QDragLeaveEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->dragLeaveEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->dragLeaveEvent_pub(arg1);
}

void qt_QMenuBar_dragMoveEvent_void_QMenuBar_QDragMoveEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QDragMoveEvent * arg1 = getqpointer<QDragMoveEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->dragMoveEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->dragMoveEvent_pub(arg1);
}

void qt_QMenuBar_dropEvent_void_QMenuBar_QDropEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QDropEvent * arg1 = getqpointer<QDropEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->dropEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->dropEvent_pub(arg1);
}

void qt_QMenuBar_enterEvent_void_QMenuBar_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->enterEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->enterEvent_pub(arg1);
}

bool qt_QMenuBar_focusNextPrevChild_bool_QMenuBar_bool(Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    bool arg1 = (bool)(param_next);
    return isMuQtObject(arg0) ? ((MuQt_QMenuBar*)arg0)->focusNextPrevChild_pub_parent(arg1) : ((MuQt_QMenuBar*)arg0)->focusNextPrevChild_pub(arg1);
}

void qt_QMenuBar_hideEvent_void_QMenuBar_QHideEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QHideEvent * arg1 = getqpointer<QHideEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->hideEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->hideEvent_pub(arg1);
}

void qt_QMenuBar_keyReleaseEvent_void_QMenuBar_QKeyEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QKeyEvent * arg1 = getqpointer<QKeyEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->keyReleaseEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->keyReleaseEvent_pub(arg1);
}

void qt_QMenuBar_mouseDoubleClickEvent_void_QMenuBar_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->mouseDoubleClickEvent_pub(arg1);
}

void qt_QMenuBar_moveEvent_void_QMenuBar_QMoveEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QMoveEvent * arg1 = getqpointer<QMoveEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->moveEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->moveEvent_pub(arg1);
}

void qt_QMenuBar_showEvent_void_QMenuBar_QShowEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QShowEvent * arg1 = getqpointer<QShowEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->showEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->showEvent_pub(arg1);
}

void qt_QMenuBar_tabletEvent_void_QMenuBar_QTabletEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QTabletEvent * arg1 = getqpointer<QTabletEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->tabletEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->tabletEvent_pub(arg1);
}

void qt_QMenuBar_wheelEvent_void_QMenuBar_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMenuBar* arg0 = object<QMenuBar>(param_this);
    QWheelEvent * arg1 = getqpointer<QWheelEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QMenuBar*)arg0)->wheelEvent_pub_parent(arg1);
    else ((MuQt_QMenuBar*)arg0)->wheelEvent_pub(arg1);
}


static NODE_IMPLEMENTATION(_n_QMenuBar0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_QMenuBar_QMenuBar_QMenuBar_QWidget(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_actionAt0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_actionAt_QAction_QMenuBar_QPoint(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_actionGeometry0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_actionGeometry_QRect_QMenuBar_QAction(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_activeAction0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_activeAction_QAction_QMenuBar(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_addAction0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_addAction_QAction_QMenuBar_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_addAction2, void)
{
    qt_QMenuBar_addAction_void_QMenuBar_QAction(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_addMenu0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_addMenu_QAction_QMenuBar_QMenu(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_addMenu1, Pointer)
{
    NODE_RETURN(qt_QMenuBar_addMenu_QMenu_QMenuBar_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_addMenu2, Pointer)
{
    NODE_RETURN(qt_QMenuBar_addMenu_QMenu_QMenuBar_QIcon_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_addSeparator0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_addSeparator_QAction_QMenuBar(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_clear0, void)
{
    qt_QMenuBar_clear_void_QMenuBar(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_cornerWidget0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_cornerWidget_QWidget_QMenuBar_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_insertMenu0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_insertMenu_QAction_QMenuBar_QAction_QMenu(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_insertSeparator0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_insertSeparator_QAction_QMenuBar_QAction(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setActiveAction0, void)
{
    qt_QMenuBar_setActiveAction_void_QMenuBar_QAction(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setCornerWidget0, void)
{
    qt_QMenuBar_setCornerWidget_void_QMenuBar_QWidget_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
{
    NODE_RETURN(qt_QMenuBar_heightForWidth_int_QMenuBar_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_minimumSizeHint_QSize_QMenuBar(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_sizeHint_QSize_QMenuBar(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_changeEvent0, void)
{
    qt_QMenuBar_changeEvent_void_QMenuBar_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_event0, bool)
{
    NODE_RETURN(qt_QMenuBar_event_bool_QMenuBar_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
{
    NODE_RETURN(qt_QMenuBar_eventFilter_bool_QMenuBar_QObject_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
{
    qt_QMenuBar_focusInEvent_void_QMenuBar_QFocusEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
{
    qt_QMenuBar_focusOutEvent_void_QMenuBar_QFocusEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
{
    qt_QMenuBar_keyPressEvent_void_QMenuBar_QKeyEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
{
    qt_QMenuBar_leaveEvent_void_QMenuBar_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
{
    qt_QMenuBar_mouseMoveEvent_void_QMenuBar_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
{
    qt_QMenuBar_mousePressEvent_void_QMenuBar_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
{
    qt_QMenuBar_mouseReleaseEvent_void_QMenuBar_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_paintEvent0, void)
{
    qt_QMenuBar_paintEvent_void_QMenuBar_QPaintEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
{
    qt_QMenuBar_resizeEvent_void_QMenuBar_QResizeEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_timerEvent0, void)
{
    qt_QMenuBar_timerEvent_void_QMenuBar_QTimerEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
{
    NODE_RETURN(qt_QMenuBar_inputMethodQuery_QVariant_QMenuBar_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_closeEvent0, void)
{
    qt_QMenuBar_closeEvent_void_QMenuBar_QCloseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
{
    qt_QMenuBar_contextMenuEvent_void_QMenuBar_QContextMenuEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
{
    qt_QMenuBar_dragEnterEvent_void_QMenuBar_QDragEnterEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
{
    qt_QMenuBar_dragLeaveEvent_void_QMenuBar_QDragLeaveEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
{
    qt_QMenuBar_dragMoveEvent_void_QMenuBar_QDragMoveEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dropEvent0, void)
{
    qt_QMenuBar_dropEvent_void_QMenuBar_QDropEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_enterEvent0, void)
{
    qt_QMenuBar_enterEvent_void_QMenuBar_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
{
    NODE_RETURN(qt_QMenuBar_focusNextPrevChild_bool_QMenuBar_bool(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
}

static NODE_IMPLEMENTATION(_n_hideEvent0, void)
{
    qt_QMenuBar_hideEvent_void_QMenuBar_QHideEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
{
    qt_QMenuBar_keyReleaseEvent_void_QMenuBar_QKeyEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
{
    qt_QMenuBar_mouseDoubleClickEvent_void_QMenuBar_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_moveEvent0, void)
{
    qt_QMenuBar_moveEvent_void_QMenuBar_QMoveEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_showEvent0, void)
{
    qt_QMenuBar_showEvent_void_QMenuBar_QShowEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
{
    qt_QMenuBar_tabletEvent_void_QMenuBar_QTabletEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
{
    qt_QMenuBar_wheelEvent_void_QMenuBar_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}



void
QMenuBarType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),


               new Function(c, tn, castFromObject, Cast,
                            Compiled, QMenuBar_QMenuBar_QObject,
                            Return, ftn,
                            Parameters,
                            new Param(c, "object", "qt.QObject"),
                            End),

               EndArguments );

addSymbols(
    // enums
    // member functions
    new Function(c, "QMenuBar", _n_QMenuBar0, None, Compiled, qt_QMenuBar_QMenuBar_QMenuBar_QMenuBar_QWidget, Return, "qt.QMenuBar", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "parent", "qt.QWidget"), End),
    new Function(c, "actionAt", _n_actionAt0, None, Compiled, qt_QMenuBar_actionAt_QAction_QMenuBar_QPoint, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "pt", "qt.QPoint"), End),
    new Function(c, "actionGeometry", _n_actionGeometry0, None, Compiled, qt_QMenuBar_actionGeometry_QRect_QMenuBar_QAction, Return, "qt.QRect", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "act", "qt.QAction"), End),
    new Function(c, "activeAction", _n_activeAction0, None, Compiled, qt_QMenuBar_activeAction_QAction_QMenuBar, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QMenuBar"), End),
    new Function(c, "addAction", _n_addAction0, None, Compiled, qt_QMenuBar_addAction_QAction_QMenuBar_string, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "text", "string"), End),
    // MISSING: addAction (QAction; QMenuBar this, string text, QObject receiver, "const char *" member)
    new Function(c, "addAction", _n_addAction2, None, Compiled, qt_QMenuBar_addAction_void_QMenuBar_QAction, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "action", "qt.QAction"), End),
    new Function(c, "addMenu", _n_addMenu0, None, Compiled, qt_QMenuBar_addMenu_QAction_QMenuBar_QMenu, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "menu", "qt.QMenu"), End),
    new Function(c, "addMenu", _n_addMenu1, None, Compiled, qt_QMenuBar_addMenu_QMenu_QMenuBar_string, Return, "qt.QMenu", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "title", "string"), End),
    new Function(c, "addMenu", _n_addMenu2, None, Compiled, qt_QMenuBar_addMenu_QMenu_QMenuBar_QIcon_string, Return, "qt.QMenu", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "icon", "qt.QIcon"), new Param(c, "title", "string"), End),
    new Function(c, "addSeparator", _n_addSeparator0, None, Compiled, qt_QMenuBar_addSeparator_QAction_QMenuBar, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QMenuBar"), End),
    new Function(c, "clear", _n_clear0, None, Compiled, qt_QMenuBar_clear_void_QMenuBar, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), End),
    new Function(c, "cornerWidget", _n_cornerWidget0, None, Compiled, qt_QMenuBar_cornerWidget_QWidget_QMenuBar_int, Return, "qt.QWidget", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "corner", "int"), End),
    new Function(c, "insertMenu", _n_insertMenu0, None, Compiled, qt_QMenuBar_insertMenu_QAction_QMenuBar_QAction_QMenu, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "before", "qt.QAction"), new Param(c, "menu", "qt.QMenu"), End),
    new Function(c, "insertSeparator", _n_insertSeparator0, None, Compiled, qt_QMenuBar_insertSeparator_QAction_QMenuBar_QAction, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "before", "qt.QAction"), End),
    // PROP: isDefaultUp (bool; QMenuBar this)
    // PROP: isNativeMenuBar (bool; QMenuBar this)
    new Function(c, "setActiveAction", _n_setActiveAction0, None, Compiled, qt_QMenuBar_setActiveAction_void_QMenuBar_QAction, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "act", "qt.QAction"), End),
    new Function(c, "setCornerWidget", _n_setCornerWidget0, None, Compiled, qt_QMenuBar_setCornerWidget_void_QMenuBar_QWidget_int, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "widget", "qt.QWidget"), new Param(c, "corner", "int"), End),
    // PROP: setDefaultUp (void; QMenuBar this, bool _p6)
    // PROP: setNativeMenuBar (void; QMenuBar this, bool nativeMenuBar)
    _func[0] = new MemberFunction(c, "heightForWidth", _n_heightForWidth0, None, Compiled, qt_QMenuBar_heightForWidth_int_QMenuBar_int, Return, "int", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "_p5", "int"), End),
    _func[1] = new MemberFunction(c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled, qt_QMenuBar_minimumSizeHint_QSize_QMenuBar, Return, "qt.QSize", Parameters, new Param(c, "this", "qt.QMenuBar"), End),
    _func[2] = new MemberFunction(c, "sizeHint", _n_sizeHint0, None, Compiled, qt_QMenuBar_sizeHint_QSize_QMenuBar, Return, "qt.QSize", Parameters, new Param(c, "this", "qt.QMenuBar"), End),
    // MISSING: initStyleOption (void; QMenuBar this, "QStyleOptionMenuItem *" option, QAction action) // protected
    // MISSING: actionEvent (void; QMenuBar this, "QActionEvent *" e) // protected
    _func[3] = new MemberFunction(c, "changeEvent", _n_changeEvent0, None, Compiled, qt_QMenuBar_changeEvent_void_QMenuBar_QEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QEvent"), End),
    _func[4] = new MemberFunction(c, "event", _n_event0, None, Compiled, qt_QMenuBar_event_bool_QMenuBar_QEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QEvent"), End),
    _func[5] = new MemberFunction(c, "eventFilter", _n_eventFilter0, None, Compiled, qt_QMenuBar_eventFilter_bool_QMenuBar_QObject_QEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "object", "qt.QObject"), new Param(c, "event", "qt.QEvent"), End),
    _func[6] = new MemberFunction(c, "focusInEvent", _n_focusInEvent0, None, Compiled, qt_QMenuBar_focusInEvent_void_QMenuBar_QFocusEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "_p15", "qt.QFocusEvent"), End),
    _func[7] = new MemberFunction(c, "focusOutEvent", _n_focusOutEvent0, None, Compiled, qt_QMenuBar_focusOutEvent_void_QMenuBar_QFocusEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "_p15", "qt.QFocusEvent"), End),
    _func[8] = new MemberFunction(c, "keyPressEvent", _n_keyPressEvent0, None, Compiled, qt_QMenuBar_keyPressEvent_void_QMenuBar_QKeyEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QKeyEvent"), End),
    _func[9] = new MemberFunction(c, "leaveEvent", _n_leaveEvent0, None, Compiled, qt_QMenuBar_leaveEvent_void_QMenuBar_QEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "_p10", "qt.QEvent"), End),
    _func[10] = new MemberFunction(c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled, qt_QMenuBar_mouseMoveEvent_void_QMenuBar_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QMouseEvent"), End),
    _func[11] = new MemberFunction(c, "mousePressEvent", _n_mousePressEvent0, None, Compiled, qt_QMenuBar_mousePressEvent_void_QMenuBar_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QMouseEvent"), End),
    _func[12] = new MemberFunction(c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled, qt_QMenuBar_mouseReleaseEvent_void_QMenuBar_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QMouseEvent"), End),
    _func[13] = new MemberFunction(c, "paintEvent", _n_paintEvent0, None, Compiled, qt_QMenuBar_paintEvent_void_QMenuBar_QPaintEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QPaintEvent"), End),
    _func[14] = new MemberFunction(c, "resizeEvent", _n_resizeEvent0, None, Compiled, qt_QMenuBar_resizeEvent_void_QMenuBar_QResizeEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "_p16", "qt.QResizeEvent"), End),
    _func[15] = new MemberFunction(c, "timerEvent", _n_timerEvent0, None, Compiled, qt_QMenuBar_timerEvent_void_QMenuBar_QTimerEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "e", "qt.QTimerEvent"), End),
    _func[16] = new MemberFunction(c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled, qt_QMenuBar_inputMethodQuery_QVariant_QMenuBar_int, Return, "qt.QVariant", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "query", "int"), End),
    // MISSING: getDC ("HDC"; QMenuBar this)
    // MISSING: paintEngine ("QPaintEngine *"; QMenuBar this)
    // MISSING: releaseDC (void; QMenuBar this, "HDC" hdc)
    _func[17] = new MemberFunction(c, "closeEvent", _n_closeEvent0, None, Compiled, qt_QMenuBar_closeEvent_void_QMenuBar_QCloseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QCloseEvent"), End),
    _func[18] = new MemberFunction(c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled, qt_QMenuBar_contextMenuEvent_void_QMenuBar_QContextMenuEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QContextMenuEvent"), End),
    _func[19] = new MemberFunction(c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled, qt_QMenuBar_dragEnterEvent_void_QMenuBar_QDragEnterEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QDragEnterEvent"), End),
    _func[20] = new MemberFunction(c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled, qt_QMenuBar_dragLeaveEvent_void_QMenuBar_QDragLeaveEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QDragLeaveEvent"), End),
    _func[21] = new MemberFunction(c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled, qt_QMenuBar_dragMoveEvent_void_QMenuBar_QDragMoveEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QDragMoveEvent"), End),
    _func[22] = new MemberFunction(c, "dropEvent", _n_dropEvent0, None, Compiled, qt_QMenuBar_dropEvent_void_QMenuBar_QDropEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QDropEvent"), End),
    _func[23] = new MemberFunction(c, "enterEvent", _n_enterEvent0, None, Compiled, qt_QMenuBar_enterEvent_void_QMenuBar_QEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QEvent"), End),
    _func[24] = new MemberFunction(c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled, qt_QMenuBar_focusNextPrevChild_bool_QMenuBar_bool, Return, "bool", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "next", "bool"), End),
    _func[25] = new MemberFunction(c, "hideEvent", _n_hideEvent0, None, Compiled, qt_QMenuBar_hideEvent_void_QMenuBar_QHideEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QHideEvent"), End),
    // MISSING: inputMethodEvent (void; QMenuBar this, "QInputMethodEvent *" event) // protected
    _func[26] = new MemberFunction(c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled, qt_QMenuBar_keyReleaseEvent_void_QMenuBar_QKeyEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QKeyEvent"), End),
    // MISSING: macEvent (bool; QMenuBar this, "EventHandlerCallRef" caller, "EventRef" event) // protected
    _func[27] = new MemberFunction(c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None, Compiled, qt_QMenuBar_mouseDoubleClickEvent_void_QMenuBar_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QMouseEvent"), End),
    _func[28] = new MemberFunction(c, "moveEvent", _n_moveEvent0, None, Compiled, qt_QMenuBar_moveEvent_void_QMenuBar_QMoveEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QMoveEvent"), End),
    // MISSING: qwsEvent (bool; QMenuBar this, "QWSEvent *" event) // protected
    _func[29] = new MemberFunction(c, "showEvent", _n_showEvent0, None, Compiled, qt_QMenuBar_showEvent_void_QMenuBar_QShowEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QShowEvent"), End),
    _func[30] = new MemberFunction(c, "tabletEvent", _n_tabletEvent0, None, Compiled, qt_QMenuBar_tabletEvent_void_QMenuBar_QTabletEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QTabletEvent"), End),
    _func[31] = new MemberFunction(c, "wheelEvent", _n_wheelEvent0, None, Compiled, qt_QMenuBar_wheelEvent_void_QMenuBar_QWheelEvent, Return, "void", Parameters, new Param(c, "this", "qt.QMenuBar"), new Param(c, "event", "qt.QWheelEvent"), End),
    // MISSING: winEvent (bool; QMenuBar this, "MSG *" message, "long *" result) // protected
    // MISSING: x11Event (bool; QMenuBar this, "XEvent *" event) // protected
    // MISSING: metric (int; QMenuBar this, "PaintDeviceMetric" m) // protected
    // static functions
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);


    const char** propExclusions = 0;

    populate(this, QMenuBar::staticMetaObject, propExclusions);
}

} // Mu
