//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QWebViewType.h"
#include <QtGui/QtGui>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include "QWidgetType.h"
#include "QActionType.h"
#include "QIconType.h"
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include "QCloseEventType.h"
#include "QDragMoveEventType.h"
#include "QResizeEventType.h"
#include "QWheelEventType.h"
#include "QMouseEventType.h"
#include "QFocusEventType.h"
#include "QShowEventType.h"
#include "QSizeType.h"
#include "QDropEventType.h"
#include "QPaintEventType.h"
#include "QWebPageType.h"
#include "QTabletEventType.h"
#include "QVariantType.h"
#include "QDragLeaveEventType.h"
#include "QHideEventType.h"
#include "QUrlType.h"
#include "QDragEnterEventType.h"
#include "QByteArrayType.h"
#include "QEventType.h"
#include "QWebSettingsType.h"
#include "QContextMenuEventType.h"
#include "QKeyEventType.h"
#include "QMoveEventType.h"
#include "QActionType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

//----------------------------------------------------------------------
//  INHERITABLE TYPE IMPLEMENTATION

// destructor
MuQt_QWebView::~MuQt_QWebView()
{
    if (_obj)
    {
        *_obj->data<Pointer>() = Pointer(0);
        _obj->releaseExternal();
    }
    _obj = 0;
    _env = 0;
    _baseType = 0;
}

MuQt_QWebView::MuQt_QWebView(Pointer muobj, const CallEnvironment* ce, QWidget * parent) 
 : QWebView(parent)
{
    _env = ce;
    _obj = reinterpret_cast<ClassInstance*>(muobj);
    _obj->retainExternal();
    MuLangContext* c = (MuLangContext*)_env->context();
    _baseType = c->findSymbolOfTypeByQualifiedName<QWebViewType>(c->internName("qt.QWebView"));
}

bool MuQt_QWebView::event(QEvent * e) 
{
    if (!_env) return QWebView::event(e);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[0];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,e,"qt.QEvent"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QWebView::event(e);
    }
}

QVariant MuQt_QWebView::inputMethodQuery(Qt::InputMethodQuery property) const
{
    if (!_env) return QWebView::inputMethodQuery(property);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[1];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(int(property));
        Value rval = _env->call(F, args);
        return getqtype<QVariantType>(rval._Pointer);
    }
    else
    {
        return QWebView::inputMethodQuery(property);
    }
}

QSize MuQt_QWebView::sizeHint() const
{
    if (!_env) return QWebView::sizeHint();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[2];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return getqtype<QSizeType>(rval._Pointer);
    }
    else
    {
        return QWebView::sizeHint();
    }
}

QWebView * MuQt_QWebView::createWindow(QWebPage::WebWindowType type) 
{
    if (!_env) return QWebView::createWindow(type);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[3];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(int(type));
        Value rval = _env->call(F, args);
        return object<QWebView>(rval._Pointer);
    }
    else
    {
        return QWebView::createWindow(type);
    }
}

void MuQt_QWebView::changeEvent(QEvent * e) 
{
    if (!_env) { QWebView::changeEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[4];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,e,"qt.QEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::changeEvent(e);
    }
}

void MuQt_QWebView::contextMenuEvent(QContextMenuEvent * ev) 
{
    if (!_env) { QWebView::contextMenuEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[5];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QContextMenuEventType>(c,ev,"qt.QContextMenuEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::contextMenuEvent(ev);
    }
}

void MuQt_QWebView::dragEnterEvent(QDragEnterEvent * ev) 
{
    if (!_env) { QWebView::dragEnterEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[6];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDragEnterEventType>(c,ev,"qt.QDragEnterEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::dragEnterEvent(ev);
    }
}

void MuQt_QWebView::dragLeaveEvent(QDragLeaveEvent * ev) 
{
    if (!_env) { QWebView::dragLeaveEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[7];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDragLeaveEventType>(c,ev,"qt.QDragLeaveEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::dragLeaveEvent(ev);
    }
}

void MuQt_QWebView::dragMoveEvent(QDragMoveEvent * ev) 
{
    if (!_env) { QWebView::dragMoveEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[8];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDragMoveEventType>(c,ev,"qt.QDragMoveEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::dragMoveEvent(ev);
    }
}

void MuQt_QWebView::dropEvent(QDropEvent * ev) 
{
    if (!_env) { QWebView::dropEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[9];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QDropEventType>(c,ev,"qt.QDropEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::dropEvent(ev);
    }
}

void MuQt_QWebView::focusInEvent(QFocusEvent * ev) 
{
    if (!_env) { QWebView::focusInEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[10];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QFocusEventType>(c,ev,"qt.QFocusEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::focusInEvent(ev);
    }
}

bool MuQt_QWebView::focusNextPrevChild(bool next) 
{
    if (!_env) return QWebView::focusNextPrevChild(next);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[11];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(next);
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QWebView::focusNextPrevChild(next);
    }
}

void MuQt_QWebView::focusOutEvent(QFocusEvent * ev) 
{
    if (!_env) { QWebView::focusOutEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[12];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QFocusEventType>(c,ev,"qt.QFocusEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::focusOutEvent(ev);
    }
}

void MuQt_QWebView::keyPressEvent(QKeyEvent * ev) 
{
    if (!_env) { QWebView::keyPressEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[13];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QKeyEventType>(c,ev,"qt.QKeyEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::keyPressEvent(ev);
    }
}

void MuQt_QWebView::keyReleaseEvent(QKeyEvent * ev) 
{
    if (!_env) { QWebView::keyReleaseEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[14];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QKeyEventType>(c,ev,"qt.QKeyEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::keyReleaseEvent(ev);
    }
}

void MuQt_QWebView::mouseDoubleClickEvent(QMouseEvent * ev) 
{
    if (!_env) { QWebView::mouseDoubleClickEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[15];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,ev,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::mouseDoubleClickEvent(ev);
    }
}

void MuQt_QWebView::mouseMoveEvent(QMouseEvent * ev) 
{
    if (!_env) { QWebView::mouseMoveEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[16];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,ev,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::mouseMoveEvent(ev);
    }
}

void MuQt_QWebView::mousePressEvent(QMouseEvent * ev) 
{
    if (!_env) { QWebView::mousePressEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[17];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,ev,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::mousePressEvent(ev);
    }
}

void MuQt_QWebView::mouseReleaseEvent(QMouseEvent * ev) 
{
    if (!_env) { QWebView::mouseReleaseEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[18];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMouseEventType>(c,ev,"qt.QMouseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::mouseReleaseEvent(ev);
    }
}

void MuQt_QWebView::paintEvent(QPaintEvent * ev) 
{
    if (!_env) { QWebView::paintEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[19];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QPaintEventType>(c,ev,"qt.QPaintEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::paintEvent(ev);
    }
}

void MuQt_QWebView::resizeEvent(QResizeEvent * e) 
{
    if (!_env) { QWebView::resizeEvent(e); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[20];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QResizeEventType>(c,e,"qt.QResizeEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::resizeEvent(e);
    }
}

void MuQt_QWebView::wheelEvent(QWheelEvent * ev) 
{
    if (!_env) { QWebView::wheelEvent(ev); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[21];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QWheelEventType>(c,ev,"qt.QWheelEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::wheelEvent(ev);
    }
}

int MuQt_QWebView::heightForWidth(int w) const
{
    if (!_env) return QWebView::heightForWidth(w);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[22];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(w);
        Value rval = _env->call(F, args);
        return (int)(rval._int);
    }
    else
    {
        return QWebView::heightForWidth(w);
    }
}

QSize MuQt_QWebView::minimumSizeHint() const
{
    if (!_env) return QWebView::minimumSizeHint();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[23];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return getqtype<QSizeType>(rval._Pointer);
    }
    else
    {
        return QWebView::minimumSizeHint();
    }
}

void MuQt_QWebView::closeEvent(QCloseEvent * event) 
{
    if (!_env) { QWebView::closeEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[24];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QCloseEventType>(c,event,"qt.QCloseEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::closeEvent(event);
    }
}

void MuQt_QWebView::enterEvent(QEvent * event) 
{
    if (!_env) { QWebView::enterEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[25];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,event,"qt.QEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::enterEvent(event);
    }
}

void MuQt_QWebView::hideEvent(QHideEvent * event) 
{
    if (!_env) { QWebView::hideEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[26];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QHideEventType>(c,event,"qt.QHideEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::hideEvent(event);
    }
}

void MuQt_QWebView::leaveEvent(QEvent * event) 
{
    if (!_env) { QWebView::leaveEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[27];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,event,"qt.QEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::leaveEvent(event);
    }
}

void MuQt_QWebView::moveEvent(QMoveEvent * event) 
{
    if (!_env) { QWebView::moveEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[28];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QMoveEventType>(c,event,"qt.QMoveEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::moveEvent(event);
    }
}

void MuQt_QWebView::showEvent(QShowEvent * event) 
{
    if (!_env) { QWebView::showEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[29];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QShowEventType>(c,event,"qt.QShowEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::showEvent(event);
    }
}

void MuQt_QWebView::tabletEvent(QTabletEvent * event) 
{
    if (!_env) { QWebView::tabletEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[30];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QTabletEventType>(c,event,"qt.QTabletEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebView::tabletEvent(event);
    }
}



//----------------------------------------------------------------------
//  Mu Type CONSTRUCTORS

QWebViewType::QWebViewType(Context* c, const char* name, Class* super, Class* super2)
: Class(c, name, vectorOf2(super, super2))
{
}

QWebViewType::~QWebViewType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

static Pointer
QWebView_QWebView_QObject(Thread& NODE_THREAD, Pointer obj)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

    if (!widget)
    {
        return 0;
    }
    else if (QWebView* w = object<QWebView>(widget))
    {
        QWebViewType* type = 
            c->findSymbolOfTypeByQualifiedName<QWebViewType>(c->internName("qt.QWebView"), false);
        ClassInstance* o = ClassInstance::allocate(type);
        setobject(o, w);
        return o;
    }
    else
    {
        throw BadCastException();
    }
}

static NODE_IMPLEMENTATION(castFromObject, Pointer)
{
    NODE_RETURN( QWebView_QWebView_QObject(NODE_THREAD, NODE_ARG(0, Pointer)) );
}

Pointer qt_QWebView_QWebView_QWebView_QWebView_QWidget(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWidget * arg1 = object<QWidget>(param_parent);
    setobject(param_this, new MuQt_QWebView(param_this, NODE_THREAD.process()->callEnv(), arg1));
    return param_this;
}

bool qt_QWebView_findText_bool_QWebView_string_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_subString, int param_options)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    const QString  arg1 = qstring(param_subString);
    QWebPage::FindFlags arg2 = (QWebPage::FindFlags)(param_options);
    return arg0->findText(arg1, arg2);
}

void qt_QWebView_load_void_QWebView_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_url);
    arg0->load(arg1);
}

Pointer qt_QWebView_page_QWebPage_QWebView(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    return makeinstance<QWebPageType>(c, arg0->page(), "qt.QWebPage");
}

Pointer qt_QWebView_pageAction_QAction_QWebView_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_action)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QWebPage::WebAction arg1 = (QWebPage::WebAction)(param_action);
    return makeinstance<QActionType>(c, arg0->pageAction(arg1), "qt.QAction");
}

void qt_QWebView_setContent_void_QWebView_QByteArray_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_data, Pointer param_mimeType, Pointer param_baseUrl)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_data);
    const QString  arg2 = qstring(param_mimeType);
    const QUrl  arg3 = getqtype<QUrlType>(param_baseUrl);
    arg0->setContent(arg1, arg2, arg3);
}

void qt_QWebView_setHtml_void_QWebView_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_html, Pointer param_baseUrl)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    const QString  arg1 = qstring(param_html);
    const QUrl  arg2 = getqtype<QUrlType>(param_baseUrl);
    arg0->setHtml(arg1, arg2);
}

void qt_QWebView_setPage_void_QWebView_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_page)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QWebPage * arg1 = object<QWebPage>(param_page);
    arg0->setPage(arg1);
}

void qt_QWebView_setRenderHint_void_QWebView_int_bool(Mu::Thread& NODE_THREAD, Pointer param_this, int param_hint, bool param_enabled)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QPainter::RenderHint arg1 = (QPainter::RenderHint)(param_hint);
    bool arg2 = (bool)(param_enabled);
    arg0->setRenderHint(arg1, arg2);
}

void qt_QWebView_setTextSizeMultiplier_void_QWebView_double(Mu::Thread& NODE_THREAD, Pointer param_this, double param_factor)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    qreal arg1 = (double)(param_factor);
    arg0->setTextSizeMultiplier(arg1);
}

Pointer qt_QWebView_settings_QWebSettings_QWebView(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    return makeqpointer<QWebSettingsType>(c,arg0->settings(),"qt.QWebSettings");
}

double qt_QWebView_textSizeMultiplier_double_QWebView(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    return arg0->textSizeMultiplier();
}

void qt_QWebView_triggerPageAction_void_QWebView_int_bool(Mu::Thread& NODE_THREAD, Pointer param_this, int param_action, bool param_checked)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QWebPage::WebAction arg1 = (QWebPage::WebAction)(param_action);
    bool arg2 = (bool)(param_checked);
    arg0->triggerPageAction(arg1, arg2);
}

bool qt_QWebView_event_bool_QWebView_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_e);
    return isMuQtObject(arg0) ? arg0->QWebView::event(arg1) : arg0->event(arg1);
}

Pointer qt_QWebView_inputMethodQuery_QVariant_QWebView_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_property)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_property);
    return isMuQtObject(arg0) ? makeqtype<QVariantType>(c,arg0->QWebView::inputMethodQuery(arg1),"qt.QVariant") : makeqtype<QVariantType>(c,arg0->inputMethodQuery(arg1),"qt.QVariant");
}

Pointer qt_QWebView_sizeHint_QSize_QWebView(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    return isMuQtObject(arg0) ? makeqtype<QSizeType>(c,arg0->QWebView::sizeHint(),"qt.QSize") : makeqtype<QSizeType>(c,arg0->sizeHint(),"qt.QSize");
}

Pointer qt_QWebView_createWindow_QWebView_QWebView_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_type)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QWebPage::WebWindowType arg1 = (QWebPage::WebWindowType)(param_type);
    return isMuQtObject(arg0) ? makeinstance<QWebViewType>(c, ((MuQt_QWebView*)arg0)->createWindow_pub_parent(arg1), "qt.QWebView") : makeinstance<QWebViewType>(c, ((MuQt_QWebView*)arg0)->createWindow_pub(arg1), "qt.QWebView");
}

void qt_QWebView_changeEvent_void_QWebView_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->changeEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->changeEvent_pub(arg1);
}

void qt_QWebView_contextMenuEvent_void_QWebView_QContextMenuEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QContextMenuEvent * arg1 = getqpointer<QContextMenuEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->contextMenuEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->contextMenuEvent_pub(arg1);
}

void qt_QWebView_dragEnterEvent_void_QWebView_QDragEnterEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QDragEnterEvent * arg1 = getqpointer<QDragEnterEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->dragEnterEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->dragEnterEvent_pub(arg1);
}

void qt_QWebView_dragLeaveEvent_void_QWebView_QDragLeaveEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QDragLeaveEvent * arg1 = getqpointer<QDragLeaveEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->dragLeaveEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->dragLeaveEvent_pub(arg1);
}

void qt_QWebView_dragMoveEvent_void_QWebView_QDragMoveEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QDragMoveEvent * arg1 = getqpointer<QDragMoveEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->dragMoveEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->dragMoveEvent_pub(arg1);
}

void qt_QWebView_dropEvent_void_QWebView_QDropEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QDropEvent * arg1 = getqpointer<QDropEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->dropEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->dropEvent_pub(arg1);
}

void qt_QWebView_focusInEvent_void_QWebView_QFocusEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QFocusEvent * arg1 = getqpointer<QFocusEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->focusInEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->focusInEvent_pub(arg1);
}

bool qt_QWebView_focusNextPrevChild_bool_QWebView_bool(Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    bool arg1 = (bool)(param_next);
    return isMuQtObject(arg0) ? ((MuQt_QWebView*)arg0)->focusNextPrevChild_pub_parent(arg1) : ((MuQt_QWebView*)arg0)->focusNextPrevChild_pub(arg1);
}

void qt_QWebView_focusOutEvent_void_QWebView_QFocusEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QFocusEvent * arg1 = getqpointer<QFocusEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->focusOutEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->focusOutEvent_pub(arg1);
}

void qt_QWebView_keyPressEvent_void_QWebView_QKeyEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QKeyEvent * arg1 = getqpointer<QKeyEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->keyPressEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->keyPressEvent_pub(arg1);
}

void qt_QWebView_keyReleaseEvent_void_QWebView_QKeyEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QKeyEvent * arg1 = getqpointer<QKeyEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->keyReleaseEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->keyReleaseEvent_pub(arg1);
}

void qt_QWebView_mouseDoubleClickEvent_void_QWebView_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->mouseDoubleClickEvent_pub(arg1);
}

void qt_QWebView_mouseMoveEvent_void_QWebView_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->mouseMoveEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->mouseMoveEvent_pub(arg1);
}

void qt_QWebView_mousePressEvent_void_QWebView_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->mousePressEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->mousePressEvent_pub(arg1);
}

void qt_QWebView_mouseReleaseEvent_void_QWebView_QMouseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QMouseEvent * arg1 = getqpointer<QMouseEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->mouseReleaseEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->mouseReleaseEvent_pub(arg1);
}

void qt_QWebView_paintEvent_void_QWebView_QPaintEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QPaintEvent * arg1 = getqpointer<QPaintEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->paintEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->paintEvent_pub(arg1);
}

void qt_QWebView_resizeEvent_void_QWebView_QResizeEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QResizeEvent * arg1 = getqpointer<QResizeEventType>(param_e);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->resizeEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->resizeEvent_pub(arg1);
}

void qt_QWebView_wheelEvent_void_QWebView_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QWheelEvent * arg1 = getqpointer<QWheelEventType>(param_ev);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->wheelEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->wheelEvent_pub(arg1);
}

int qt_QWebView_heightForWidth_int_QWebView_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_w)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    int arg1 = (int)(param_w);
    return isMuQtObject(arg0) ? arg0->QWebView::heightForWidth(arg1) : arg0->heightForWidth(arg1);
}

Pointer qt_QWebView_minimumSizeHint_QSize_QWebView(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    return isMuQtObject(arg0) ? makeqtype<QSizeType>(c,arg0->QWebView::minimumSizeHint(),"qt.QSize") : makeqtype<QSizeType>(c,arg0->minimumSizeHint(),"qt.QSize");
}

void qt_QWebView_closeEvent_void_QWebView_QCloseEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QCloseEvent * arg1 = getqpointer<QCloseEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->closeEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->closeEvent_pub(arg1);
}

void qt_QWebView_enterEvent_void_QWebView_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->enterEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->enterEvent_pub(arg1);
}

void qt_QWebView_hideEvent_void_QWebView_QHideEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QHideEvent * arg1 = getqpointer<QHideEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->hideEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->hideEvent_pub(arg1);
}

void qt_QWebView_leaveEvent_void_QWebView_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->leaveEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->leaveEvent_pub(arg1);
}

void qt_QWebView_moveEvent_void_QWebView_QMoveEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QMoveEvent * arg1 = getqpointer<QMoveEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->moveEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->moveEvent_pub(arg1);
}

void qt_QWebView_showEvent_void_QWebView_QShowEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QShowEvent * arg1 = getqpointer<QShowEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->showEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->showEvent_pub(arg1);
}

void qt_QWebView_tabletEvent_void_QWebView_QTabletEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebView* arg0 = object<QWebView>(param_this);
    QTabletEvent * arg1 = getqpointer<QTabletEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebView*)arg0)->tabletEvent_pub_parent(arg1);
    else ((MuQt_QWebView*)arg0)->tabletEvent_pub(arg1);
}


static NODE_IMPLEMENTATION(_n_QWebView0, Pointer)
{
    NODE_RETURN(qt_QWebView_QWebView_QWebView_QWebView_QWidget(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_findText0, bool)
{
    NODE_RETURN(qt_QWebView_findText_bool_QWebView_string_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int)));
}

static NODE_IMPLEMENTATION(_n_load0, void)
{
    qt_QWebView_load_void_QWebView_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_page0, Pointer)
{
    NODE_RETURN(qt_QWebView_page_QWebPage_QWebView(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_pageAction0, Pointer)
{
    NODE_RETURN(qt_QWebView_pageAction_QAction_QWebView_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_setContent0, void)
{
    qt_QWebView_setContent_void_QWebView_QByteArray_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
}

static NODE_IMPLEMENTATION(_n_setHtml0, void)
{
    qt_QWebView_setHtml_void_QWebView_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer));
}

static NODE_IMPLEMENTATION(_n_setPage0, void)
{
    qt_QWebView_setPage_void_QWebView_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setRenderHint0, void)
{
    qt_QWebView_setRenderHint_void_QWebView_int_bool(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, bool));
}

static NODE_IMPLEMENTATION(_n_setTextSizeMultiplier0, void)
{
    qt_QWebView_setTextSizeMultiplier_void_QWebView_double(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
}

static NODE_IMPLEMENTATION(_n_settings0, Pointer)
{
    NODE_RETURN(qt_QWebView_settings_QWebSettings_QWebView(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_textSizeMultiplier0, double)
{
    NODE_RETURN(qt_QWebView_textSizeMultiplier_double_QWebView(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_triggerPageAction0, void)
{
    qt_QWebView_triggerPageAction_void_QWebView_int_bool(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, bool));
}

static NODE_IMPLEMENTATION(_n_event0, bool)
{
    NODE_RETURN(qt_QWebView_event_bool_QWebView_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
{
    NODE_RETURN(qt_QWebView_inputMethodQuery_QVariant_QWebView_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
{
    NODE_RETURN(qt_QWebView_sizeHint_QSize_QWebView(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_createWindow0, Pointer)
{
    NODE_RETURN(qt_QWebView_createWindow_QWebView_QWebView_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_changeEvent0, void)
{
    qt_QWebView_changeEvent_void_QWebView_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
{
    qt_QWebView_contextMenuEvent_void_QWebView_QContextMenuEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
{
    qt_QWebView_dragEnterEvent_void_QWebView_QDragEnterEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
{
    qt_QWebView_dragLeaveEvent_void_QWebView_QDragLeaveEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
{
    qt_QWebView_dragMoveEvent_void_QWebView_QDragMoveEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_dropEvent0, void)
{
    qt_QWebView_dropEvent_void_QWebView_QDropEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
{
    qt_QWebView_focusInEvent_void_QWebView_QFocusEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
{
    NODE_RETURN(qt_QWebView_focusNextPrevChild_bool_QWebView_bool(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
}

static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
{
    qt_QWebView_focusOutEvent_void_QWebView_QFocusEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
{
    qt_QWebView_keyPressEvent_void_QWebView_QKeyEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
{
    qt_QWebView_keyReleaseEvent_void_QWebView_QKeyEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
{
    qt_QWebView_mouseDoubleClickEvent_void_QWebView_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
{
    qt_QWebView_mouseMoveEvent_void_QWebView_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
{
    qt_QWebView_mousePressEvent_void_QWebView_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
{
    qt_QWebView_mouseReleaseEvent_void_QWebView_QMouseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_paintEvent0, void)
{
    qt_QWebView_paintEvent_void_QWebView_QPaintEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
{
    qt_QWebView_resizeEvent_void_QWebView_QResizeEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
{
    qt_QWebView_wheelEvent_void_QWebView_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
{
    NODE_RETURN(qt_QWebView_heightForWidth_int_QWebView_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
{
    NODE_RETURN(qt_QWebView_minimumSizeHint_QSize_QWebView(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_closeEvent0, void)
{
    qt_QWebView_closeEvent_void_QWebView_QCloseEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_enterEvent0, void)
{
    qt_QWebView_enterEvent_void_QWebView_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_hideEvent0, void)
{
    qt_QWebView_hideEvent_void_QWebView_QHideEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
{
    qt_QWebView_leaveEvent_void_QWebView_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_moveEvent0, void)
{
    qt_QWebView_moveEvent_void_QWebView_QMoveEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_showEvent0, void)
{
    qt_QWebView_showEvent_void_QWebView_QShowEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
{
    qt_QWebView_tabletEvent_void_QWebView_QTabletEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}



void
QWebViewType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),


               new Function(c, tn, castFromObject, Cast,
                            Compiled, QWebView_QWebView_QObject,
                            Return, ftn,
                            Parameters,
                            new Param(c, "object", "qt.QObject"),
                            End),

               EndArguments );

addSymbols(
    // enums
    // member functions
    new Function(c, "QWebView", _n_QWebView0, None, Compiled, qt_QWebView_QWebView_QWebView_QWebView_QWidget, Return, "qt.QWebView", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "parent", "qt.QWidget"), End),
    new Function(c, "findText", _n_findText0, None, Compiled, qt_QWebView_findText_bool_QWebView_string_int, Return, "bool", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "subString", "string"), new Param(c, "options", "int"), End),
    // PROP: hasSelection (bool; QWebView this)
    // MISSING: history ("QWebHistory *"; QWebView this)
    // PROP: icon (QIcon; QWebView this)
    // PROP: isModified (bool; QWebView this)
    new Function(c, "load", _n_load0, None, Compiled, qt_QWebView_load_void_QWebView_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "url", "qt.QUrl"), End),
    // MISSING: load (void; QWebView this, "const QNetworkRequest &" request, flags QNetworkAccessManager::Operation operation, QByteArray body)
    new Function(c, "page", _n_page0, None, Compiled, qt_QWebView_page_QWebPage_QWebView, Return, "qt.QWebPage", Parameters, new Param(c, "this", "qt.QWebView"), End),
    new Function(c, "pageAction", _n_pageAction0, None, Compiled, qt_QWebView_pageAction_QAction_QWebView_int, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "action", "int"), End),
    // PROP: renderHints (flags QPainter::RenderHints; QWebView this)
    // PROP: selectedHtml (string; QWebView this)
    // PROP: selectedText (string; QWebView this)
    new Function(c, "setContent", _n_setContent0, None, Compiled, qt_QWebView_setContent_void_QWebView_QByteArray_string_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "data", "qt.QByteArray"), new Param(c, "mimeType", "string"), new Param(c, "baseUrl", "qt.QUrl"), End),
    new Function(c, "setHtml", _n_setHtml0, None, Compiled, qt_QWebView_setHtml_void_QWebView_string_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "html", "string"), new Param(c, "baseUrl", "qt.QUrl"), End),
    new Function(c, "setPage", _n_setPage0, None, Compiled, qt_QWebView_setPage_void_QWebView_QWebPage, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "page", "qt.QWebPage"), End),
    new Function(c, "setRenderHint", _n_setRenderHint0, None, Compiled, qt_QWebView_setRenderHint_void_QWebView_int_bool, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "hint", "int"), new Param(c, "enabled", "bool"), End),
    // PROP: setRenderHints (void; QWebView this, flags QPainter::RenderHints hints)
    new Function(c, "setTextSizeMultiplier", _n_setTextSizeMultiplier0, None, Compiled, qt_QWebView_setTextSizeMultiplier_void_QWebView_double, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "factor", "double"), End),
    // PROP: setUrl (void; QWebView this, QUrl url)
    // PROP: setZoomFactor (void; QWebView this, double factor)
    new Function(c, "settings", _n_settings0, None, Compiled, qt_QWebView_settings_QWebSettings_QWebView, Return, "qt.QWebSettings", Parameters, new Param(c, "this", "qt.QWebView"), End),
    new Function(c, "textSizeMultiplier", _n_textSizeMultiplier0, None, Compiled, qt_QWebView_textSizeMultiplier_double_QWebView, Return, "double", Parameters, new Param(c, "this", "qt.QWebView"), End),
    // PROP: title (string; QWebView this)
    new Function(c, "triggerPageAction", _n_triggerPageAction0, None, Compiled, qt_QWebView_triggerPageAction_void_QWebView_int_bool, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "action", "int"), new Param(c, "checked", "bool"), End),
    // PROP: url (QUrl; QWebView this)
    // PROP: zoomFactor (double; QWebView this)
    _func[0] = new MemberFunction(c, "event", _n_event0, None, Compiled, qt_QWebView_event_bool_QWebView_QEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "e", "qt.QEvent"), End),
    _func[1] = new MemberFunction(c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled, qt_QWebView_inputMethodQuery_QVariant_QWebView_int, Return, "qt.QVariant", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "property", "int"), End),
    _func[2] = new MemberFunction(c, "sizeHint", _n_sizeHint0, None, Compiled, qt_QWebView_sizeHint_QSize_QWebView, Return, "qt.QSize", Parameters, new Param(c, "this", "qt.QWebView"), End),
    _func[3] = new MemberFunction(c, "createWindow", _n_createWindow0, None, Compiled, qt_QWebView_createWindow_QWebView_QWebView_int, Return, "qt.QWebView", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "type", "int"), End),
    _func[4] = new MemberFunction(c, "changeEvent", _n_changeEvent0, None, Compiled, qt_QWebView_changeEvent_void_QWebView_QEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "e", "qt.QEvent"), End),
    _func[5] = new MemberFunction(c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled, qt_QWebView_contextMenuEvent_void_QWebView_QContextMenuEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QContextMenuEvent"), End),
    _func[6] = new MemberFunction(c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled, qt_QWebView_dragEnterEvent_void_QWebView_QDragEnterEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QDragEnterEvent"), End),
    _func[7] = new MemberFunction(c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled, qt_QWebView_dragLeaveEvent_void_QWebView_QDragLeaveEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QDragLeaveEvent"), End),
    _func[8] = new MemberFunction(c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled, qt_QWebView_dragMoveEvent_void_QWebView_QDragMoveEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QDragMoveEvent"), End),
    _func[9] = new MemberFunction(c, "dropEvent", _n_dropEvent0, None, Compiled, qt_QWebView_dropEvent_void_QWebView_QDropEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QDropEvent"), End),
    _func[10] = new MemberFunction(c, "focusInEvent", _n_focusInEvent0, None, Compiled, qt_QWebView_focusInEvent_void_QWebView_QFocusEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QFocusEvent"), End),
    _func[11] = new MemberFunction(c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled, qt_QWebView_focusNextPrevChild_bool_QWebView_bool, Return, "bool", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "next", "bool"), End),
    _func[12] = new MemberFunction(c, "focusOutEvent", _n_focusOutEvent0, None, Compiled, qt_QWebView_focusOutEvent_void_QWebView_QFocusEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QFocusEvent"), End),
    // MISSING: inputMethodEvent (void; QWebView this, "QInputMethodEvent *" e) // protected
    _func[13] = new MemberFunction(c, "keyPressEvent", _n_keyPressEvent0, None, Compiled, qt_QWebView_keyPressEvent_void_QWebView_QKeyEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QKeyEvent"), End),
    _func[14] = new MemberFunction(c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled, qt_QWebView_keyReleaseEvent_void_QWebView_QKeyEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QKeyEvent"), End),
    _func[15] = new MemberFunction(c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None, Compiled, qt_QWebView_mouseDoubleClickEvent_void_QWebView_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QMouseEvent"), End),
    _func[16] = new MemberFunction(c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled, qt_QWebView_mouseMoveEvent_void_QWebView_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QMouseEvent"), End),
    _func[17] = new MemberFunction(c, "mousePressEvent", _n_mousePressEvent0, None, Compiled, qt_QWebView_mousePressEvent_void_QWebView_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QMouseEvent"), End),
    _func[18] = new MemberFunction(c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled, qt_QWebView_mouseReleaseEvent_void_QWebView_QMouseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QMouseEvent"), End),
    _func[19] = new MemberFunction(c, "paintEvent", _n_paintEvent0, None, Compiled, qt_QWebView_paintEvent_void_QWebView_QPaintEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QPaintEvent"), End),
    _func[20] = new MemberFunction(c, "resizeEvent", _n_resizeEvent0, None, Compiled, qt_QWebView_resizeEvent_void_QWebView_QResizeEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "e", "qt.QResizeEvent"), End),
    _func[21] = new MemberFunction(c, "wheelEvent", _n_wheelEvent0, None, Compiled, qt_QWebView_wheelEvent_void_QWebView_QWheelEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "ev", "qt.QWheelEvent"), End),
    _func[22] = new MemberFunction(c, "heightForWidth", _n_heightForWidth0, None, Compiled, qt_QWebView_heightForWidth_int_QWebView_int, Return, "int", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "w", "int"), End),
    _func[23] = new MemberFunction(c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled, qt_QWebView_minimumSizeHint_QSize_QWebView, Return, "qt.QSize", Parameters, new Param(c, "this", "qt.QWebView"), End),
    // MISSING: getDC ("HDC"; QWebView this)
    // MISSING: paintEngine ("QPaintEngine *"; QWebView this)
    // MISSING: releaseDC (void; QWebView this, "HDC" hdc)
    // MISSING: actionEvent (void; QWebView this, "QActionEvent *" event) // protected
    _func[24] = new MemberFunction(c, "closeEvent", _n_closeEvent0, None, Compiled, qt_QWebView_closeEvent_void_QWebView_QCloseEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "event", "qt.QCloseEvent"), End),
    _func[25] = new MemberFunction(c, "enterEvent", _n_enterEvent0, None, Compiled, qt_QWebView_enterEvent_void_QWebView_QEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "event", "qt.QEvent"), End),
    _func[26] = new MemberFunction(c, "hideEvent", _n_hideEvent0, None, Compiled, qt_QWebView_hideEvent_void_QWebView_QHideEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "event", "qt.QHideEvent"), End),
    _func[27] = new MemberFunction(c, "leaveEvent", _n_leaveEvent0, None, Compiled, qt_QWebView_leaveEvent_void_QWebView_QEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "event", "qt.QEvent"), End),
    // MISSING: macEvent (bool; QWebView this, "EventHandlerCallRef" caller, "EventRef" event) // protected
    _func[28] = new MemberFunction(c, "moveEvent", _n_moveEvent0, None, Compiled, qt_QWebView_moveEvent_void_QWebView_QMoveEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "event", "qt.QMoveEvent"), End),
    // MISSING: qwsEvent (bool; QWebView this, "QWSEvent *" event) // protected
    _func[29] = new MemberFunction(c, "showEvent", _n_showEvent0, None, Compiled, qt_QWebView_showEvent_void_QWebView_QShowEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "event", "qt.QShowEvent"), End),
    _func[30] = new MemberFunction(c, "tabletEvent", _n_tabletEvent0, None, Compiled, qt_QWebView_tabletEvent_void_QWebView_QTabletEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebView"), new Param(c, "event", "qt.QTabletEvent"), End),
    // MISSING: winEvent (bool; QWebView this, "MSG *" message, "long *" result) // protected
    // MISSING: x11Event (bool; QWebView this, "XEvent *" event) // protected
    // MISSING: metric (int; QWebView this, "PaintDeviceMetric" m) // protected
    // static functions
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);


    const char** propExclusions = 0;

    populate(this, QWebView::staticMetaObject, propExclusions);
}

} // Mu
