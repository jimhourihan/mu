//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QWheelEventType.h"
#include <QtGui/QtGui>
#include <QtSvg/QtSvg>
#include <QtWebKit/QtWebKit>
#include <QtNetwork/QtNetwork>
#include "QWidgetType.h"
#include "QActionType.h"
#include "QIconType.h"
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include "QPointType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

QWheelEventType::QWheelEventType(Context* c, const char* name, Class* super)
    : Class(c, name, super)
{
}

QWheelEventType::~QWheelEventType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

Pointer qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPoint_int_int_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos, int param_delta, int param_buttons, int param_modifiers, int param_orient)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QPoint  arg1 = getqtype<QPointType>(param_pos);
    int arg2 = (int)(param_delta);
    Qt::MouseButtons arg3 = (Qt::MouseButtons)(param_buttons);
    Qt::KeyboardModifiers arg4 = (Qt::KeyboardModifiers)(param_modifiers);
    Qt::Orientation arg5 = (Qt::Orientation)(param_orient);
    setqpointer<QWheelEventType>(param_this,new QWheelEvent(arg1, arg2, arg3, arg4, arg5));
    return param_this;
}

Pointer qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPoint_QPoint_int_int_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos, Pointer param_globalPos, int param_delta, int param_buttons, int param_modifiers, int param_orient)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QPoint  arg1 = getqtype<QPointType>(param_pos);
    const QPoint  arg2 = getqtype<QPointType>(param_globalPos);
    int arg3 = (int)(param_delta);
    Qt::MouseButtons arg4 = (Qt::MouseButtons)(param_buttons);
    Qt::KeyboardModifiers arg5 = (Qt::KeyboardModifiers)(param_modifiers);
    Qt::Orientation arg6 = (Qt::Orientation)(param_orient);
    setqpointer<QWheelEventType>(param_this,new QWheelEvent(arg1, arg2, arg3, arg4, arg5, arg6));
    return param_this;
}

int qt_QWheelEvent_buttons_int_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return int(arg0->buttons());
}

int qt_QWheelEvent_delta_int_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return arg0->delta();
}

Pointer qt_QWheelEvent_globalPos_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return makeqtype<QPointType>(c,arg0->globalPos(),"qt.QPoint");
}

int qt_QWheelEvent_globalX_int_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return arg0->globalX();
}

int qt_QWheelEvent_globalY_int_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return arg0->globalY();
}

int qt_QWheelEvent_orientation_int_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return int(arg0->orientation());
}

Pointer qt_QWheelEvent_pos_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return makeqtype<QPointType>(c,arg0->pos(),"qt.QPoint");
}

int qt_QWheelEvent_x_int_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return arg0->x();
}

int qt_QWheelEvent_y_int_QWheelEvent(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWheelEvent * arg0 = getqpointer<QWheelEventType>(param_this);
    return arg0->y();
}


static NODE_IMPLEMENTATION(_n_QWheelEvent0, Pointer)
{
    NODE_RETURN(qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPoint_int_int_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int), NODE_ARG(5, int)));
}

static NODE_IMPLEMENTATION(_n_QWheelEvent1, Pointer)
{
    NODE_RETURN(qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPoint_QPoint_int_int_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer), NODE_ARG(3, int), NODE_ARG(4, int), NODE_ARG(5, int), NODE_ARG(6, int)));
}

static NODE_IMPLEMENTATION(_n_buttons0, int)
{
    NODE_RETURN(qt_QWheelEvent_buttons_int_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_delta0, int)
{
    NODE_RETURN(qt_QWheelEvent_delta_int_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_globalPos0, Pointer)
{
    NODE_RETURN(qt_QWheelEvent_globalPos_QPoint_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_globalX0, int)
{
    NODE_RETURN(qt_QWheelEvent_globalX_int_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_globalY0, int)
{
    NODE_RETURN(qt_QWheelEvent_globalY_int_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_orientation0, int)
{
    NODE_RETURN(qt_QWheelEvent_orientation_int_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_pos0, Pointer)
{
    NODE_RETURN(qt_QWheelEvent_pos_QPoint_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_x0, int)
{
    NODE_RETURN(qt_QWheelEvent_x_int_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_y0, int)
{
    NODE_RETURN(qt_QWheelEvent_y_int_QWheelEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}



void
QWheelEventType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),

               new MemberVariable(c, "native", "qt.NativeObject"),

               EndArguments );


addSymbols(
    EndArguments);

addSymbols(
    // enums
    // member functions
    new Function(c, "QWheelEvent", _n_QWheelEvent0, None, Compiled, qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPoint_int_int_int_int, Return, "qt.QWheelEvent", Parameters, new Param(c, "this", "qt.QWheelEvent"), new Param(c, "pos", "qt.QPoint"), new Param(c, "delta", "int"), new Param(c, "buttons", "int"), new Param(c, "modifiers", "int"), new Param(c, "orient", "int"), End),
    new Function(c, "QWheelEvent", _n_QWheelEvent1, None, Compiled, qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPoint_QPoint_int_int_int_int, Return, "qt.QWheelEvent", Parameters, new Param(c, "this", "qt.QWheelEvent"), new Param(c, "pos", "qt.QPoint"), new Param(c, "globalPos", "qt.QPoint"), new Param(c, "delta", "int"), new Param(c, "buttons", "int"), new Param(c, "modifiers", "int"), new Param(c, "orient", "int"), End),
    new Function(c, "buttons", _n_buttons0, None, Compiled, qt_QWheelEvent_buttons_int_QWheelEvent, Return, "int", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "delta", _n_delta0, None, Compiled, qt_QWheelEvent_delta_int_QWheelEvent, Return, "int", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "globalPos", _n_globalPos0, None, Compiled, qt_QWheelEvent_globalPos_QPoint_QWheelEvent, Return, "qt.QPoint", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "globalX", _n_globalX0, None, Compiled, qt_QWheelEvent_globalX_int_QWheelEvent, Return, "int", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "globalY", _n_globalY0, None, Compiled, qt_QWheelEvent_globalY_int_QWheelEvent, Return, "int", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "orientation", _n_orientation0, None, Compiled, qt_QWheelEvent_orientation_int_QWheelEvent, Return, "int", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "pos", _n_pos0, None, Compiled, qt_QWheelEvent_pos_QPoint_QWheelEvent, Return, "qt.QPoint", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "x", _n_x0, None, Compiled, qt_QWheelEvent_x_int_QWheelEvent, Return, "int", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    new Function(c, "y", _n_y0, None, Compiled, qt_QWheelEvent_y_int_QWheelEvent, Return, "int", Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
    // static functions
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);

}

} // Mu
