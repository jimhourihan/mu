//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QAbstractTableModelType.h"
#include <QtGui/QtGui>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include "QWidgetType.h"
#include "QActionType.h"
#include "QIconType.h"
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include "QSizeType.h"
#include "QMimeDataType.h"
#include "QModelIndexType.h"
#include "QVariantType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

//----------------------------------------------------------------------
//  INHERITABLE TYPE IMPLEMENTATION

// destructor
MuQt_QAbstractTableModel::~MuQt_QAbstractTableModel()
{
    if (_obj)
    {
        *_obj->data<Pointer>() = Pointer(0);
        _obj->releaseExternal();
    }
    _obj = 0;
    _env = 0;
    _baseType = 0;
}

MuQt_QAbstractTableModel::MuQt_QAbstractTableModel(Pointer muobj, const CallEnvironment* ce, QObject * parent) 
 : QAbstractTableModel(parent)
{
    _env = ce;
    _obj = reinterpret_cast<ClassInstance*>(muobj);
    _obj->retainExternal();
    MuLangContext* c = (MuLangContext*)_env->context();
    _baseType = c->findSymbolOfTypeByQualifiedName<QAbstractTableModelType>(c->internName("qt.QAbstractTableModel"));
}

bool MuQt_QAbstractTableModel::dropMimeData(const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent) 
{
    if (!_env) return QAbstractTableModel::dropMimeData(data, action, row, column, parent);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[0];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(6);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeinstance<QMimeDataType>(c,data,"qt.QMimeData"));
        args[2] = Value(int(action));
        args[3] = Value(row);
        args[4] = Value(column);
        args[5] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::dropMimeData(data, action, row, column, parent);
    }
}

QModelIndex MuQt_QAbstractTableModel::index(int row, int column, const QModelIndex & parent) const
{
    if (!_env) return QAbstractTableModel::index(row, column, parent);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[1];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(row);
        args[2] = Value(column);
        args[3] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return getqtype<QModelIndexType>(rval._Pointer);
    }
    else
    {
        return QAbstractTableModel::index(row, column, parent);
    }
}

QModelIndex MuQt_QAbstractTableModel::buddy(const QModelIndex & index) const
{
    if (!_env) return QAbstractTableModel::buddy(index);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[2];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,index,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return getqtype<QModelIndexType>(rval._Pointer);
    }
    else
    {
        return QAbstractTableModel::buddy(index);
    }
}

bool MuQt_QAbstractTableModel::canFetchMore(const QModelIndex & parent) const
{
    if (!_env) return QAbstractTableModel::canFetchMore(parent);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[3];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::canFetchMore(parent);
    }
}

int MuQt_QAbstractTableModel::columnCount(const QModelIndex & parent) const  // pure virtual
{
    if (!_env) return defaultValue<int>();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[4];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (int)(rval._int);
    }
    else
    {
        return defaultValue<int>();
    }
}

QVariant MuQt_QAbstractTableModel::data(const QModelIndex & index, int role) const  // pure virtual
{
    if (!_env) return defaultValue<QVariant>();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[5];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,index,"qt.QModelIndex"));
        args[2] = Value(role);
        Value rval = _env->call(F, args);
        return getqtype<QVariantType>(rval._Pointer);
    }
    else
    {
        return defaultValue<QVariant>();
    }
}

void MuQt_QAbstractTableModel::fetchMore(const QModelIndex & parent) 
{
    if (!_env) { QAbstractTableModel::fetchMore(parent); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[6];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QAbstractTableModel::fetchMore(parent);
    }
}

Qt::ItemFlags MuQt_QAbstractTableModel::flags(const QModelIndex & index) const
{
    if (!_env) return QAbstractTableModel::flags(index);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[7];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,index,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (Qt::ItemFlags)(rval._int);
    }
    else
    {
        return QAbstractTableModel::flags(index);
    }
}

QVariant MuQt_QAbstractTableModel::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (!_env) return QAbstractTableModel::headerData(section, orientation, role);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[8];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(section);
        args[2] = Value(int(orientation));
        args[3] = Value(role);
        Value rval = _env->call(F, args);
        return getqtype<QVariantType>(rval._Pointer);
    }
    else
    {
        return QAbstractTableModel::headerData(section, orientation, role);
    }
}

bool MuQt_QAbstractTableModel::insertColumns(int column, int count, const QModelIndex & parent) 
{
    if (!_env) return QAbstractTableModel::insertColumns(column, count, parent);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[9];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(column);
        args[2] = Value(count);
        args[3] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::insertColumns(column, count, parent);
    }
}

bool MuQt_QAbstractTableModel::insertRows(int row, int count, const QModelIndex & parent) 
{
    if (!_env) return QAbstractTableModel::insertRows(row, count, parent);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[10];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(row);
        args[2] = Value(count);
        args[3] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::insertRows(row, count, parent);
    }
}

QModelIndexList MuQt_QAbstractTableModel::match(const QModelIndex & start, int role, const QVariant & value, int hits, Qt::MatchFlags flags) const
{
    if (!_env) return QAbstractTableModel::match(start, role, value, hits, flags);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[11];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(6);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,start,"qt.QModelIndex"));
        args[2] = Value(role);
        args[3] = Value(makeqtype<QVariantType>(c,value,"qt.QVariant"));
        args[4] = Value(hits);
        args[5] = Value(int(flags));
        Value rval = _env->call(F, args);
        return qmodelindexlist(rval._Pointer);
    }
    else
    {
        return QAbstractTableModel::match(start, role, value, hits, flags);
    }
}

QMimeData * MuQt_QAbstractTableModel::mimeData(const QModelIndexList & indexes) const
{
    if (!_env) return QAbstractTableModel::mimeData(indexes);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[12];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqmodelindexlist(c,indexes));
        Value rval = _env->call(F, args);
        return object<QMimeData>(rval._Pointer);
    }
    else
    {
        return QAbstractTableModel::mimeData(indexes);
    }
}

QStringList MuQt_QAbstractTableModel::mimeTypes() const
{
    if (!_env) return QAbstractTableModel::mimeTypes();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[13];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return qstringlist(rval._Pointer);
    }
    else
    {
        return QAbstractTableModel::mimeTypes();
    }
}

bool MuQt_QAbstractTableModel::removeColumns(int column, int count, const QModelIndex & parent) 
{
    if (!_env) return QAbstractTableModel::removeColumns(column, count, parent);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[14];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(column);
        args[2] = Value(count);
        args[3] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::removeColumns(column, count, parent);
    }
}

bool MuQt_QAbstractTableModel::removeRows(int row, int count, const QModelIndex & parent) 
{
    if (!_env) return QAbstractTableModel::removeRows(row, count, parent);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[15];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(row);
        args[2] = Value(count);
        args[3] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::removeRows(row, count, parent);
    }
}

int MuQt_QAbstractTableModel::rowCount(const QModelIndex & parent) const  // pure virtual
{
    if (!_env) return defaultValue<int>();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[16];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,parent,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return (int)(rval._int);
    }
    else
    {
        return defaultValue<int>();
    }
}

bool MuQt_QAbstractTableModel::setData(const QModelIndex & index, const QVariant & value, int role) 
{
    if (!_env) return QAbstractTableModel::setData(index, value, role);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[17];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,index,"qt.QModelIndex"));
        args[2] = Value(makeqtype<QVariantType>(c,value,"qt.QVariant"));
        args[3] = Value(role);
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::setData(index, value, role);
    }
}

bool MuQt_QAbstractTableModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant & value, int role) 
{
    if (!_env) return QAbstractTableModel::setHeaderData(section, orientation, value, role);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[18];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(5);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(section);
        args[2] = Value(int(orientation));
        args[3] = Value(makeqtype<QVariantType>(c,value,"qt.QVariant"));
        args[4] = Value(role);
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QAbstractTableModel::setHeaderData(section, orientation, value, role);
    }
}

void MuQt_QAbstractTableModel::sort(int column, Qt::SortOrder order) 
{
    if (!_env) { QAbstractTableModel::sort(column, order); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[19];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(column);
        args[2] = Value(int(order));
        Value rval = _env->call(F, args);
    }
    else
    {
        QAbstractTableModel::sort(column, order);
    }
}

QSize MuQt_QAbstractTableModel::span(const QModelIndex & index) const
{
    if (!_env) return QAbstractTableModel::span(index);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[20];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QModelIndexType>(c,index,"qt.QModelIndex"));
        Value rval = _env->call(F, args);
        return getqtype<QSizeType>(rval._Pointer);
    }
    else
    {
        return QAbstractTableModel::span(index);
    }
}

Qt::DropActions MuQt_QAbstractTableModel::supportedDropActions() const
{
    if (!_env) return QAbstractTableModel::supportedDropActions();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[21];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return (Qt::DropActions)(rval._int);
    }
    else
    {
        return QAbstractTableModel::supportedDropActions();
    }
}



//----------------------------------------------------------------------
//  Mu Type CONSTRUCTORS

QAbstractTableModelType::QAbstractTableModelType(Context* c, const char* name, Class* super, Class* super2)
: Class(c, name, vectorOf2(super, super2))
{
}

QAbstractTableModelType::~QAbstractTableModelType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

static Pointer
QAbstractTableModel_QAbstractTableModel_QObject(Thread& NODE_THREAD, Pointer obj)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

    if (!widget)
    {
        return 0;
    }
    else if (QAbstractTableModel* w = object<QAbstractTableModel>(widget))
    {
        QAbstractTableModelType* type = 
            c->findSymbolOfTypeByQualifiedName<QAbstractTableModelType>(c->internName("qt.QAbstractTableModel"), false);
        ClassInstance* o = ClassInstance::allocate(type);
        setobject(o, w);
        return o;
    }
    else
    {
        throw BadCastException();
    }
}

static NODE_IMPLEMENTATION(castFromObject, Pointer)
{
    NODE_RETURN( QAbstractTableModel_QAbstractTableModel_QObject(NODE_THREAD, NODE_ARG(0, Pointer)) );
}

Pointer qt_QAbstractTableModel_QAbstractTableModel_QAbstractTableModel_QAbstractTableModel_QObject(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QObject * arg1 = object<QObject>(param_parent);
    setobject(param_this, new MuQt_QAbstractTableModel(param_this, NODE_THREAD.process()->callEnv(), arg1));
    return param_this;
}

bool qt_QAbstractTableModel_dropMimeData_bool_QAbstractTableModel_QMimeData_int_int_int_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_data, int param_action, int param_row, int param_column, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QMimeData * arg1 = object<QMimeData>(param_data);
    Qt::DropAction arg2 = (Qt::DropAction)(param_action);
    int arg3 = (int)(param_row);
    int arg4 = (int)(param_column);
    const QModelIndex  arg5 = getqtype<QModelIndexType>(param_parent);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::dropMimeData(arg1, arg2, arg3, arg4, arg5) : arg0->dropMimeData(arg1, arg2, arg3, arg4, arg5);
}

Pointer qt_QAbstractTableModel_index_QModelIndex_QAbstractTableModel_int_int_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, int param_row, int param_column, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_row);
    int arg2 = (int)(param_column);
    const QModelIndex  arg3 = getqtype<QModelIndexType>(param_parent);
    return isMuQtObject(arg0) ? makeqtype<QModelIndexType>(c,arg0->QAbstractTableModel::index(arg1, arg2, arg3),"qt.QModelIndex") : makeqtype<QModelIndexType>(c,arg0->index(arg1, arg2, arg3),"qt.QModelIndex");
}

Pointer qt_QAbstractTableModel_buddy_QModelIndex_QAbstractTableModel_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_index);
    return isMuQtObject(arg0) ? makeqtype<QModelIndexType>(c,arg0->QAbstractTableModel::buddy(arg1),"qt.QModelIndex") : makeqtype<QModelIndexType>(c,arg0->buddy(arg1),"qt.QModelIndex");
}

bool qt_QAbstractTableModel_canFetchMore_bool_QAbstractTableModel_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_parent);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::canFetchMore(arg1) : arg0->canFetchMore(arg1);
}

int qt_QAbstractTableModel_columnCount_int_QAbstractTableModel_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_parent);
    return arg0->columnCount(arg1);
}

Pointer qt_QAbstractTableModel_data_QVariant_QAbstractTableModel_QModelIndex_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index, int param_role)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_index);
    int arg2 = (int)(param_role);
    return makeqtype<QVariantType>(c,arg0->data(arg1, arg2),"qt.QVariant");
}

void qt_QAbstractTableModel_fetchMore_void_QAbstractTableModel_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_parent);
    if (isMuQtObject(arg0)) arg0->QAbstractTableModel::fetchMore(arg1);
    else arg0->fetchMore(arg1);
}

int qt_QAbstractTableModel_flags_int_QAbstractTableModel_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_index);
    return isMuQtObject(arg0) ? int(arg0->QAbstractTableModel::flags(arg1)) : int(arg0->flags(arg1));
}

Pointer qt_QAbstractTableModel_headerData_QVariant_QAbstractTableModel_int_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_section, int param_orientation, int param_role)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_section);
    Qt::Orientation arg2 = (Qt::Orientation)(param_orientation);
    int arg3 = (int)(param_role);
    return isMuQtObject(arg0) ? makeqtype<QVariantType>(c,arg0->QAbstractTableModel::headerData(arg1, arg2, arg3),"qt.QVariant") : makeqtype<QVariantType>(c,arg0->headerData(arg1, arg2, arg3),"qt.QVariant");
}

bool qt_QAbstractTableModel_insertColumns_bool_QAbstractTableModel_int_int_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, int param_column, int param_count, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_column);
    int arg2 = (int)(param_count);
    const QModelIndex  arg3 = getqtype<QModelIndexType>(param_parent);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::insertColumns(arg1, arg2, arg3) : arg0->insertColumns(arg1, arg2, arg3);
}

bool qt_QAbstractTableModel_insertRows_bool_QAbstractTableModel_int_int_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, int param_row, int param_count, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_row);
    int arg2 = (int)(param_count);
    const QModelIndex  arg3 = getqtype<QModelIndexType>(param_parent);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::insertRows(arg1, arg2, arg3) : arg0->insertRows(arg1, arg2, arg3);
}

Pointer qt_QAbstractTableModel_match_qt__QModelIndexBSB_ESB__QAbstractTableModel_QModelIndex_int_QVariant_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_start, int param_role, Pointer param_value, int param_hits, int param_flags)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_start);
    int arg2 = (int)(param_role);
    const QVariant  arg3 = getqtype<QVariantType>(param_value);
    int arg4 = (int)(param_hits);
    Qt::MatchFlags arg5 = (Qt::MatchFlags)(param_flags);
    return isMuQtObject(arg0) ? makeqmodelindexlist(c,arg0->QAbstractTableModel::match(arg1, arg2, arg3, arg4, arg5)) : makeqmodelindexlist(c,arg0->match(arg1, arg2, arg3, arg4, arg5));
}

Pointer qt_QAbstractTableModel_mimeData_QMimeData_QAbstractTableModel_qt__QModelIndexBSB_ESB_(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_indexes)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndexList  arg1 = qmodelindexlist(param_indexes);
    return isMuQtObject(arg0) ? makeinstance<QMimeDataType>(c, arg0->QAbstractTableModel::mimeData(arg1), "qt.QMimeData") : makeinstance<QMimeDataType>(c, arg0->mimeData(arg1), "qt.QMimeData");
}

Pointer qt_QAbstractTableModel_mimeTypes_stringBSB_ESB__QAbstractTableModel(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    return isMuQtObject(arg0) ? makestringlist(c,arg0->QAbstractTableModel::mimeTypes()) : makestringlist(c,arg0->mimeTypes());
}

bool qt_QAbstractTableModel_removeColumns_bool_QAbstractTableModel_int_int_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, int param_column, int param_count, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_column);
    int arg2 = (int)(param_count);
    const QModelIndex  arg3 = getqtype<QModelIndexType>(param_parent);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::removeColumns(arg1, arg2, arg3) : arg0->removeColumns(arg1, arg2, arg3);
}

bool qt_QAbstractTableModel_removeRows_bool_QAbstractTableModel_int_int_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, int param_row, int param_count, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_row);
    int arg2 = (int)(param_count);
    const QModelIndex  arg3 = getqtype<QModelIndexType>(param_parent);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::removeRows(arg1, arg2, arg3) : arg0->removeRows(arg1, arg2, arg3);
}

int qt_QAbstractTableModel_rowCount_int_QAbstractTableModel_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_parent);
    return arg0->rowCount(arg1);
}

bool qt_QAbstractTableModel_setData_bool_QAbstractTableModel_QModelIndex_QVariant_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index, Pointer param_value, int param_role)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_index);
    const QVariant  arg2 = getqtype<QVariantType>(param_value);
    int arg3 = (int)(param_role);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::setData(arg1, arg2, arg3) : arg0->setData(arg1, arg2, arg3);
}

bool qt_QAbstractTableModel_setHeaderData_bool_QAbstractTableModel_int_int_QVariant_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_section, int param_orientation, Pointer param_value, int param_role)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_section);
    Qt::Orientation arg2 = (Qt::Orientation)(param_orientation);
    const QVariant  arg3 = getqtype<QVariantType>(param_value);
    int arg4 = (int)(param_role);
    return isMuQtObject(arg0) ? arg0->QAbstractTableModel::setHeaderData(arg1, arg2, arg3, arg4) : arg0->setHeaderData(arg1, arg2, arg3, arg4);
}

void qt_QAbstractTableModel_sort_void_QAbstractTableModel_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_column, int param_order)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    int arg1 = (int)(param_column);
    Qt::SortOrder arg2 = (Qt::SortOrder)(param_order);
    if (isMuQtObject(arg0)) arg0->QAbstractTableModel::sort(arg1, arg2);
    else arg0->sort(arg1, arg2);
}

Pointer qt_QAbstractTableModel_span_QSize_QAbstractTableModel_QModelIndex(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    const QModelIndex  arg1 = getqtype<QModelIndexType>(param_index);
    return isMuQtObject(arg0) ? makeqtype<QSizeType>(c,arg0->QAbstractTableModel::span(arg1),"qt.QSize") : makeqtype<QSizeType>(c,arg0->span(arg1),"qt.QSize");
}

int qt_QAbstractTableModel_supportedDropActions_int_QAbstractTableModel(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QAbstractTableModel* arg0 = object<QAbstractTableModel>(param_this);
    return isMuQtObject(arg0) ? int(arg0->QAbstractTableModel::supportedDropActions()) : int(arg0->supportedDropActions());
}


static NODE_IMPLEMENTATION(_n_QAbstractTableModel0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_QAbstractTableModel_QAbstractTableModel_QAbstractTableModel_QObject(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_dropMimeData0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_dropMimeData_bool_QAbstractTableModel_QMimeData_int_int_int_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int), NODE_ARG(5, Pointer)));
}

static NODE_IMPLEMENTATION(_n_index0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_index_QModelIndex_QAbstractTableModel_int_int_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int), NODE_ARG(3, Pointer)));
}

static NODE_IMPLEMENTATION(_n_buddy0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_buddy_QModelIndex_QAbstractTableModel_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_canFetchMore0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_canFetchMore_bool_QAbstractTableModel_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_columnCount0, int)
{
    NODE_RETURN(qt_QAbstractTableModel_columnCount_int_QAbstractTableModel_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_data0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_data_QVariant_QAbstractTableModel_QModelIndex_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int)));
}

static NODE_IMPLEMENTATION(_n_fetchMore0, void)
{
    qt_QAbstractTableModel_fetchMore_void_QAbstractTableModel_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_flags0, int)
{
    NODE_RETURN(qt_QAbstractTableModel_flags_int_QAbstractTableModel_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_headerData0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_headerData_QVariant_QAbstractTableModel_int_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int), NODE_ARG(3, int)));
}

static NODE_IMPLEMENTATION(_n_insertColumns0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_insertColumns_bool_QAbstractTableModel_int_int_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int), NODE_ARG(3, Pointer)));
}

static NODE_IMPLEMENTATION(_n_insertRows0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_insertRows_bool_QAbstractTableModel_int_int_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int), NODE_ARG(3, Pointer)));
}

static NODE_IMPLEMENTATION(_n_match0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_match_qt__QModelIndexBSB_ESB__QAbstractTableModel_QModelIndex_int_QVariant_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int), NODE_ARG(3, Pointer), NODE_ARG(4, int), NODE_ARG(5, int)));
}

static NODE_IMPLEMENTATION(_n_mimeData0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_mimeData_QMimeData_QAbstractTableModel_qt__QModelIndexBSB_ESB_(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_mimeTypes0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_mimeTypes_stringBSB_ESB__QAbstractTableModel(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_removeColumns0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_removeColumns_bool_QAbstractTableModel_int_int_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int), NODE_ARG(3, Pointer)));
}

static NODE_IMPLEMENTATION(_n_removeRows0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_removeRows_bool_QAbstractTableModel_int_int_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int), NODE_ARG(3, Pointer)));
}

static NODE_IMPLEMENTATION(_n_rowCount0, int)
{
    NODE_RETURN(qt_QAbstractTableModel_rowCount_int_QAbstractTableModel_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setData0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_setData_bool_QAbstractTableModel_QModelIndex_QVariant_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer), NODE_ARG(3, int)));
}

static NODE_IMPLEMENTATION(_n_setHeaderData0, bool)
{
    NODE_RETURN(qt_QAbstractTableModel_setHeaderData_bool_QAbstractTableModel_int_int_QVariant_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int), NODE_ARG(3, Pointer), NODE_ARG(4, int)));
}

static NODE_IMPLEMENTATION(_n_sort0, void)
{
    qt_QAbstractTableModel_sort_void_QAbstractTableModel_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_span0, Pointer)
{
    NODE_RETURN(qt_QAbstractTableModel_span_QSize_QAbstractTableModel_QModelIndex(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_supportedDropActions0, int)
{
    NODE_RETURN(qt_QAbstractTableModel_supportedDropActions_int_QAbstractTableModel(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}



void
QAbstractTableModelType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),


               new Function(c, tn, castFromObject, Cast,
                            Compiled, QAbstractTableModel_QAbstractTableModel_QObject,
                            Return, ftn,
                            Parameters,
                            new Param(c, "object", "qt.QObject"),
                            End),

               EndArguments );

addSymbols(
    // enums
    // member functions
    new Function(c, "QAbstractTableModel", _n_QAbstractTableModel0, None, Compiled, qt_QAbstractTableModel_QAbstractTableModel_QAbstractTableModel_QAbstractTableModel_QObject, Return, "qt.QAbstractTableModel", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "parent", "qt.QObject"), End),
    _func[0] = new MemberFunction(c, "dropMimeData", _n_dropMimeData0, None, Compiled, qt_QAbstractTableModel_dropMimeData_bool_QAbstractTableModel_QMimeData_int_int_int_QModelIndex, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "data", "qt.QMimeData"), new Param(c, "action", "int"), new Param(c, "row", "int"), new Param(c, "column", "int"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[1] = new MemberFunction(c, "index", _n_index0, None, Compiled, qt_QAbstractTableModel_index_QModelIndex_QAbstractTableModel_int_int_QModelIndex, Return, "qt.QModelIndex", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "row", "int"), new Param(c, "column", "int"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[2] = new MemberFunction(c, "buddy", _n_buddy0, None, Compiled, qt_QAbstractTableModel_buddy_QModelIndex_QAbstractTableModel_QModelIndex, Return, "qt.QModelIndex", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "index", "qt.QModelIndex"), End),
    _func[3] = new MemberFunction(c, "canFetchMore", _n_canFetchMore0, None, Compiled, qt_QAbstractTableModel_canFetchMore_bool_QAbstractTableModel_QModelIndex, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[4] = new MemberFunction(c, "columnCount", _n_columnCount0, None, Compiled, qt_QAbstractTableModel_columnCount_int_QAbstractTableModel_QModelIndex, Return, "int", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[5] = new MemberFunction(c, "data", _n_data0, None, Compiled, qt_QAbstractTableModel_data_QVariant_QAbstractTableModel_QModelIndex_int, Return, "qt.QVariant", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "index", "qt.QModelIndex"), new Param(c, "role", "int"), End),
    _func[6] = new MemberFunction(c, "fetchMore", _n_fetchMore0, None, Compiled, qt_QAbstractTableModel_fetchMore_void_QAbstractTableModel_QModelIndex, Return, "void", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[7] = new MemberFunction(c, "flags", _n_flags0, None, Compiled, qt_QAbstractTableModel_flags_int_QAbstractTableModel_QModelIndex, Return, "int", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "index", "qt.QModelIndex"), End),
    _func[8] = new MemberFunction(c, "headerData", _n_headerData0, None, Compiled, qt_QAbstractTableModel_headerData_QVariant_QAbstractTableModel_int_int_int, Return, "qt.QVariant", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "section", "int"), new Param(c, "orientation", "int"), new Param(c, "role", "int"), End),
    _func[9] = new MemberFunction(c, "insertColumns", _n_insertColumns0, None, Compiled, qt_QAbstractTableModel_insertColumns_bool_QAbstractTableModel_int_int_QModelIndex, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "column", "int"), new Param(c, "count", "int"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[10] = new MemberFunction(c, "insertRows", _n_insertRows0, None, Compiled, qt_QAbstractTableModel_insertRows_bool_QAbstractTableModel_int_int_QModelIndex, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "row", "int"), new Param(c, "count", "int"), new Param(c, "parent", "qt.QModelIndex"), End),
    // MISSING: itemData ("QMap<int, QVariant>"; QAbstractTableModel this, QModelIndex index)
    _func[11] = new MemberFunction(c, "match", _n_match0, None, Compiled, qt_QAbstractTableModel_match_qt__QModelIndexBSB_ESB__QAbstractTableModel_QModelIndex_int_QVariant_int_int, Return, "qt.QModelIndex[]", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "start", "qt.QModelIndex"), new Param(c, "role", "int"), new Param(c, "value", "qt.QVariant"), new Param(c, "hits", "int"), new Param(c, "flags", "int"), End),
    _func[12] = new MemberFunction(c, "mimeData", _n_mimeData0, None, Compiled, qt_QAbstractTableModel_mimeData_QMimeData_QAbstractTableModel_qt__QModelIndexBSB_ESB_, Return, "qt.QMimeData", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "indexes", "qt.QModelIndex[]"), End),
    _func[13] = new MemberFunction(c, "mimeTypes", _n_mimeTypes0, None, Compiled, qt_QAbstractTableModel_mimeTypes_stringBSB_ESB__QAbstractTableModel, Return, "string[]", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), End),
    _func[14] = new MemberFunction(c, "removeColumns", _n_removeColumns0, None, Compiled, qt_QAbstractTableModel_removeColumns_bool_QAbstractTableModel_int_int_QModelIndex, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "column", "int"), new Param(c, "count", "int"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[15] = new MemberFunction(c, "removeRows", _n_removeRows0, None, Compiled, qt_QAbstractTableModel_removeRows_bool_QAbstractTableModel_int_int_QModelIndex, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "row", "int"), new Param(c, "count", "int"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[16] = new MemberFunction(c, "rowCount", _n_rowCount0, None, Compiled, qt_QAbstractTableModel_rowCount_int_QAbstractTableModel_QModelIndex, Return, "int", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "parent", "qt.QModelIndex"), End),
    _func[17] = new MemberFunction(c, "setData", _n_setData0, None, Compiled, qt_QAbstractTableModel_setData_bool_QAbstractTableModel_QModelIndex_QVariant_int, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "index", "qt.QModelIndex"), new Param(c, "value", "qt.QVariant"), new Param(c, "role", "int"), End),
    _func[18] = new MemberFunction(c, "setHeaderData", _n_setHeaderData0, None, Compiled, qt_QAbstractTableModel_setHeaderData_bool_QAbstractTableModel_int_int_QVariant_int, Return, "bool", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "section", "int"), new Param(c, "orientation", "int"), new Param(c, "value", "qt.QVariant"), new Param(c, "role", "int"), End),
    // MISSING: setItemData (bool; QAbstractTableModel this, QModelIndex index, "const QMap<int, QVariant> &" roles)
    _func[19] = new MemberFunction(c, "sort", _n_sort0, None, Compiled, qt_QAbstractTableModel_sort_void_QAbstractTableModel_int_int, Return, "void", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "column", "int"), new Param(c, "order", "int"), End),
    _func[20] = new MemberFunction(c, "span", _n_span0, None, Compiled, qt_QAbstractTableModel_span_QSize_QAbstractTableModel_QModelIndex, Return, "qt.QSize", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), new Param(c, "index", "qt.QModelIndex"), End),
    _func[21] = new MemberFunction(c, "supportedDropActions", _n_supportedDropActions0, None, Compiled, qt_QAbstractTableModel_supportedDropActions_int_QAbstractTableModel, Return, "int", Parameters, new Param(c, "this", "qt.QAbstractTableModel"), End),
    // static functions
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);


    const char** propExclusions = 0;

    populate(this, QAbstractTableModel::staticMetaObject, propExclusions);
}

} // Mu
