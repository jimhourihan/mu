//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QUrlType.h"
#include "QActionType.h"
#include "QWidgetType.h"
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtSvg/QtSvg>
#include <QtWebKit/QtWebKit>
#include <QtNetwork/QtNetwork>
#include "QByteArrayType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

QUrlType::Instance::Instance(const Class* c) : ClassInstance(c)
{
}

QUrlType::QUrlType(Context* c, const char* name, Class* super)
    : Class(c, name, super)
{
}

QUrlType::~QUrlType()
{
}

static NODE_IMPLEMENTATION(__allocate, Pointer)
{
    QUrlType::Instance* i = new QUrlType::Instance((Class*)NODE_THIS.type());
    QUrlType::registerFinalizer(i);
    NODE_RETURN(i);
}

void 
QUrlType::registerFinalizer (void* o)
{
    GC_register_finalizer(o, QUrlType::finalizer, 0, 0, 0);
}

void 
QUrlType::finalizer (void* obj, void* data)
{
    QUrlType::Instance* i = reinterpret_cast<QUrlType::Instance*>(obj);
    delete i;
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

Pointer qt_QUrl_QUrl_QUrl_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    setqtype<QUrlType>(param_this,QUrl());
    return param_this;
}

Pointer qt_QUrl_QUrl_QUrl_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg1 = qstring(param_url);
    setqtype<QUrlType>(param_this,QUrl(arg1));
    return param_this;
}

Pointer qt_QUrl_QUrl_QUrl_QUrl_string_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url, int param_parsingMode)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg1 = qstring(param_url);
    QUrl::ParsingMode arg2 = (QUrl::ParsingMode)(param_parsingMode);
    setqtype<QUrlType>(param_this,QUrl(arg1, arg2));
    return param_this;
}

void qt_QUrl_addEncodedQueryItem_void_QUrl_QByteArray_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key, Pointer param_value)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_key);
    const QByteArray  arg2 = getqtype<QByteArrayType>(param_value);
    arg0.addEncodedQueryItem(arg1, arg2);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_addQueryItem_void_QUrl_string_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key, Pointer param_value)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_key);
    const QString  arg2 = qstring(param_value);
    arg0.addQueryItem(arg1, arg2);
    setqtype<QUrlType>(param_this,arg0);
}

Pointer qt_QUrl_allQueryItemValues_stringBSB_ESB__QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_key);
    return makestringlist(c,arg0.allQueryItemValues(arg1));
}

Pointer qt_QUrl_authority_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.authority());
}

void qt_QUrl_clear_void_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    arg0.clear();
    setqtype<QUrlType>(param_this,arg0);
}

Pointer qt_QUrl_encodedFragment_QByteArray_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makeqtype<QByteArrayType>(c,arg0.encodedFragment(),"qt.QByteArray");
}

Pointer qt_QUrl_encodedHost_QByteArray_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makeqtype<QByteArrayType>(c,arg0.encodedHost(),"qt.QByteArray");
}

Pointer qt_QUrl_encodedPassword_QByteArray_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makeqtype<QByteArrayType>(c,arg0.encodedPassword(),"qt.QByteArray");
}

Pointer qt_QUrl_encodedPath_QByteArray_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makeqtype<QByteArrayType>(c,arg0.encodedPath(),"qt.QByteArray");
}

Pointer qt_QUrl_encodedQuery_QByteArray_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makeqtype<QByteArrayType>(c,arg0.encodedQuery(),"qt.QByteArray");
}

Pointer qt_QUrl_encodedQueryItemValue_QByteArray_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_key);
    return makeqtype<QByteArrayType>(c,arg0.encodedQueryItemValue(arg1),"qt.QByteArray");
}

Pointer qt_QUrl_encodedUserName_QByteArray_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makeqtype<QByteArrayType>(c,arg0.encodedUserName(),"qt.QByteArray");
}

Pointer qt_QUrl_errorString_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.errorString());
}

Pointer qt_QUrl_fragment_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.fragment());
}

bool qt_QUrl_hasEncodedQueryItem_bool_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_key);
    return arg0.hasEncodedQueryItem(arg1);
}

bool qt_QUrl_hasFragment_bool_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return arg0.hasFragment();
}

bool qt_QUrl_hasQuery_bool_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return arg0.hasQuery();
}

bool qt_QUrl_hasQueryItem_bool_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_key);
    return arg0.hasQueryItem(arg1);
}

Pointer qt_QUrl_host_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.host());
}

bool qt_QUrl_isEmpty_bool_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return arg0.isEmpty();
}

bool qt_QUrl_isLocalFile_bool_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return arg0.isLocalFile();
}

bool qt_QUrl_isParentOf_bool_QUrl_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_childUrl)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_childUrl);
    return arg0.isParentOf(arg1);
}

bool qt_QUrl_isRelative_bool_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return arg0.isRelative();
}

bool qt_QUrl_isValid_bool_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return arg0.isValid();
}

Pointer qt_QUrl_password_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.password());
}

Pointer qt_QUrl_path_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.path());
}

int qt_QUrl_port_int_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return arg0.port();
}

int qt_QUrl_port_int_QUrl_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_defaultPort)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    int arg1 = (int)(param_defaultPort);
    return arg0.port(arg1);
}

Pointer qt_QUrl_queryItemValue_string_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_key);
    return makestring(c,arg0.queryItemValue(arg1));
}

void qt_QUrl_removeAllEncodedQueryItems_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_key);
    arg0.removeAllEncodedQueryItems(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_removeAllQueryItems_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_key);
    arg0.removeAllQueryItems(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_removeEncodedQueryItem_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_key);
    arg0.removeEncodedQueryItem(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_removeQueryItem_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_key);
    arg0.removeQueryItem(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

Pointer qt_QUrl_resolved_QUrl_QUrl_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_relative)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_relative);
    return makeqtype<QUrlType>(c,arg0.resolved(arg1),"qt.QUrl");
}

Pointer qt_QUrl_scheme_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.scheme());
}

void qt_QUrl_setAuthority_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_authority)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_authority);
    arg0.setAuthority(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedFragment_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fragment)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_fragment);
    arg0.setEncodedFragment(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedHost_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_host)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_host);
    arg0.setEncodedHost(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedPassword_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_password)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_password);
    arg0.setEncodedPassword(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedPath_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_path);
    arg0.setEncodedPath(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedQuery_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_query)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_query);
    arg0.setEncodedQuery(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedUrl_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_encodedUrl)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_encodedUrl);
    arg0.setEncodedUrl(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedUrl_void_QUrl_QByteArray_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_encodedUrl, int param_parsingMode)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_encodedUrl);
    QUrl::ParsingMode arg2 = (QUrl::ParsingMode)(param_parsingMode);
    arg0.setEncodedUrl(arg1, arg2);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setEncodedUserName_void_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_userName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_userName);
    arg0.setEncodedUserName(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setFragment_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fragment)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_fragment);
    arg0.setFragment(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setHost_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_host)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_host);
    arg0.setHost(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setPassword_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_password)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_password);
    arg0.setPassword(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setPath_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_path);
    arg0.setPath(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setPort_void_QUrl_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_port)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    int arg1 = (int)(param_port);
    arg0.setPort(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setScheme_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_scheme)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_scheme);
    arg0.setScheme(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setUrl_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_url);
    arg0.setUrl(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setUrl_void_QUrl_string_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url, int param_parsingMode)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_url);
    QUrl::ParsingMode arg2 = (QUrl::ParsingMode)(param_parsingMode);
    arg0.setUrl(arg1, arg2);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setUserInfo_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_userInfo)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_userInfo);
    arg0.setUserInfo(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_setUserName_void_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_userName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QString  arg1 = qstring(param_userName);
    arg0.setUserName(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

void qt_QUrl_swap_void_QUrl_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QUrl& arg0 = getqtype<QUrlType>(param_this);
    QUrl  arg1 = getqtype<QUrlType>(param_other);
    arg0.swap(arg1);
    setqtype<QUrlType>(param_this,arg0);
}

Pointer qt_QUrl_toEncoded_QByteArray_QUrl_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_options)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    QUrl::FormattingOptions arg1 = (QUrl::FormattingOptions)(param_options);
    return makeqtype<QByteArrayType>(c,arg0.toEncoded(arg1),"qt.QByteArray");
}

Pointer qt_QUrl_toLocalFile_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.toLocalFile());
}

Pointer qt_QUrl_toString_string_QUrl_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_options)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    QUrl::FormattingOptions arg1 = (QUrl::FormattingOptions)(param_options);
    return makestring(c,arg0.toString(arg1));
}

Pointer qt_QUrl_topLevelDomain_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.topLevelDomain());
}

Pointer qt_QUrl_userInfo_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.userInfo());
}

Pointer qt_QUrl_userName_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    return makestring(c,arg0.userName());
}

bool qt_QUrl_operatorBang_EQ__bool_QUrl_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_url);
    return arg0.operator!=(arg1);
}

bool qt_QUrl_operatorEQ_EQ__bool_QUrl_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl& arg0 = getqtype<QUrlType>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_url);
    return arg0.operator==(arg1);
}

Pointer qt_QUrl_fromAce_string_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_domain)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QByteArray  arg0 = getqtype<QByteArrayType>(param_domain);
    return makestring(c,QUrl::fromAce(arg0));
}

Pointer qt_QUrl_fromEncoded_QUrl_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_input)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QByteArray  arg0 = getqtype<QByteArrayType>(param_input);
    return makeqtype<QUrlType>(c,QUrl::fromEncoded(arg0),"qt.QUrl");
}

Pointer qt_QUrl_fromEncoded_QUrl_QByteArray_int(Mu::Thread& NODE_THREAD, Pointer param_input, int param_parsingMode)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QByteArray  arg0 = getqtype<QByteArrayType>(param_input);
    QUrl::ParsingMode arg1 = (QUrl::ParsingMode)(param_parsingMode);
    return makeqtype<QUrlType>(c,QUrl::fromEncoded(arg0, arg1),"qt.QUrl");
}

Pointer qt_QUrl_fromLocalFile_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_localFile)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_localFile);
    return makeqtype<QUrlType>(c,QUrl::fromLocalFile(arg0),"qt.QUrl");
}

Pointer qt_QUrl_fromPercentEncoding_string_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_input)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QByteArray  arg0 = getqtype<QByteArrayType>(param_input);
    return makestring(c,QUrl::fromPercentEncoding(arg0));
}

Pointer qt_QUrl_fromUserInput_QUrl_string(Mu::Thread& NODE_THREAD, Pointer param_userInput)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_userInput);
    return makeqtype<QUrlType>(c,QUrl::fromUserInput(arg0),"qt.QUrl");
}

Pointer qt_QUrl_idnWhitelist_stringBSB_ESB_(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestringlist(c,QUrl::idnWhitelist());
}

void qt_QUrl_setIdnWhitelist_void_stringBSB_ESB_(Mu::Thread& NODE_THREAD, Pointer param_list)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QStringList  arg0 = qstringlist(param_list);
    QUrl::setIdnWhitelist(arg0);
}

Pointer qt_QUrl_toAce_QByteArray_string(Mu::Thread& NODE_THREAD, Pointer param_domain)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_domain);
    return makeqtype<QByteArrayType>(c,QUrl::toAce(arg0),"qt.QByteArray");
}

Pointer qt_QUrl_toPercentEncoding_QByteArray_string_QByteArray_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_input, Pointer param_exclude, Pointer param_include)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_input);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_exclude);
    const QByteArray  arg2 = getqtype<QByteArrayType>(param_include);
    return makeqtype<QByteArrayType>(c,QUrl::toPercentEncoding(arg0, arg1, arg2),"qt.QByteArray");
}


static NODE_IMPLEMENTATION(_n_QUrl0, Pointer)
{
    NODE_RETURN(qt_QUrl_QUrl_QUrl_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_QUrl1, Pointer)
{
    NODE_RETURN(qt_QUrl_QUrl_QUrl_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_QUrl3, Pointer)
{
    NODE_RETURN(qt_QUrl_QUrl_QUrl_QUrl_string_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int)));
}

static NODE_IMPLEMENTATION(_n_addEncodedQueryItem0, void)
{
    qt_QUrl_addEncodedQueryItem_void_QUrl_QByteArray_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer));
}

static NODE_IMPLEMENTATION(_n_addQueryItem0, void)
{
    qt_QUrl_addQueryItem_void_QUrl_string_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer));
}

static NODE_IMPLEMENTATION(_n_allQueryItemValues0, Pointer)
{
    NODE_RETURN(qt_QUrl_allQueryItemValues_stringBSB_ESB__QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_authority0, Pointer)
{
    NODE_RETURN(qt_QUrl_authority_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_clear0, void)
{
    qt_QUrl_clear_void_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_encodedFragment0, Pointer)
{
    NODE_RETURN(qt_QUrl_encodedFragment_QByteArray_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_encodedHost0, Pointer)
{
    NODE_RETURN(qt_QUrl_encodedHost_QByteArray_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_encodedPassword0, Pointer)
{
    NODE_RETURN(qt_QUrl_encodedPassword_QByteArray_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_encodedPath0, Pointer)
{
    NODE_RETURN(qt_QUrl_encodedPath_QByteArray_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_encodedQuery0, Pointer)
{
    NODE_RETURN(qt_QUrl_encodedQuery_QByteArray_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_encodedQueryItemValue0, Pointer)
{
    NODE_RETURN(qt_QUrl_encodedQueryItemValue_QByteArray_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_encodedUserName0, Pointer)
{
    NODE_RETURN(qt_QUrl_encodedUserName_QByteArray_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_errorString0, Pointer)
{
    NODE_RETURN(qt_QUrl_errorString_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fragment0, Pointer)
{
    NODE_RETURN(qt_QUrl_fragment_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_hasEncodedQueryItem0, bool)
{
    NODE_RETURN(qt_QUrl_hasEncodedQueryItem_bool_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_hasFragment0, bool)
{
    NODE_RETURN(qt_QUrl_hasFragment_bool_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_hasQuery0, bool)
{
    NODE_RETURN(qt_QUrl_hasQuery_bool_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_hasQueryItem0, bool)
{
    NODE_RETURN(qt_QUrl_hasQueryItem_bool_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_host0, Pointer)
{
    NODE_RETURN(qt_QUrl_host_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isEmpty0, bool)
{
    NODE_RETURN(qt_QUrl_isEmpty_bool_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isLocalFile0, bool)
{
    NODE_RETURN(qt_QUrl_isLocalFile_bool_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isParentOf0, bool)
{
    NODE_RETURN(qt_QUrl_isParentOf_bool_QUrl_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isRelative0, bool)
{
    NODE_RETURN(qt_QUrl_isRelative_bool_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isValid0, bool)
{
    NODE_RETURN(qt_QUrl_isValid_bool_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_password0, Pointer)
{
    NODE_RETURN(qt_QUrl_password_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_path0, Pointer)
{
    NODE_RETURN(qt_QUrl_path_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_port0, int)
{
    NODE_RETURN(qt_QUrl_port_int_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_port1, int)
{
    NODE_RETURN(qt_QUrl_port_int_QUrl_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_queryItemValue0, Pointer)
{
    NODE_RETURN(qt_QUrl_queryItemValue_string_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_removeAllEncodedQueryItems0, void)
{
    qt_QUrl_removeAllEncodedQueryItems_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_removeAllQueryItems0, void)
{
    qt_QUrl_removeAllQueryItems_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_removeEncodedQueryItem0, void)
{
    qt_QUrl_removeEncodedQueryItem_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_removeQueryItem0, void)
{
    qt_QUrl_removeQueryItem_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_resolved0, Pointer)
{
    NODE_RETURN(qt_QUrl_resolved_QUrl_QUrl_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_scheme0, Pointer)
{
    NODE_RETURN(qt_QUrl_scheme_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setAuthority0, void)
{
    qt_QUrl_setAuthority_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setEncodedFragment0, void)
{
    qt_QUrl_setEncodedFragment_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setEncodedHost0, void)
{
    qt_QUrl_setEncodedHost_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setEncodedPassword0, void)
{
    qt_QUrl_setEncodedPassword_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setEncodedPath0, void)
{
    qt_QUrl_setEncodedPath_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setEncodedQuery0, void)
{
    qt_QUrl_setEncodedQuery_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setEncodedUrl0, void)
{
    qt_QUrl_setEncodedUrl_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setEncodedUrl1, void)
{
    qt_QUrl_setEncodedUrl_void_QUrl_QByteArray_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_setEncodedUserName0, void)
{
    qt_QUrl_setEncodedUserName_void_QUrl_QByteArray(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setFragment0, void)
{
    qt_QUrl_setFragment_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setHost0, void)
{
    qt_QUrl_setHost_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setPassword0, void)
{
    qt_QUrl_setPassword_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setPath0, void)
{
    qt_QUrl_setPath_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setPort0, void)
{
    qt_QUrl_setPort_void_QUrl_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_setScheme0, void)
{
    qt_QUrl_setScheme_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setUrl0, void)
{
    qt_QUrl_setUrl_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setUrl1, void)
{
    qt_QUrl_setUrl_void_QUrl_string_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_setUserInfo0, void)
{
    qt_QUrl_setUserInfo_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setUserName0, void)
{
    qt_QUrl_setUserName_void_QUrl_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_swap0, void)
{
    qt_QUrl_swap_void_QUrl_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_toEncoded0, Pointer)
{
    NODE_RETURN(qt_QUrl_toEncoded_QByteArray_QUrl_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_toLocalFile0, Pointer)
{
    NODE_RETURN(qt_QUrl_toLocalFile_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_toString0, Pointer)
{
    NODE_RETURN(qt_QUrl_toString_string_QUrl_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_topLevelDomain0, Pointer)
{
    NODE_RETURN(qt_QUrl_topLevelDomain_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_userInfo0, Pointer)
{
    NODE_RETURN(qt_QUrl_userInfo_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_userName0, Pointer)
{
    NODE_RETURN(qt_QUrl_userName_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
{
    NODE_RETURN(qt_QUrl_operatorBang_EQ__bool_QUrl_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
{
    NODE_RETURN(qt_QUrl_operatorEQ_EQ__bool_QUrl_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fromAce0, Pointer)
{
    NODE_RETURN(qt_QUrl_fromAce_string_QByteArray(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fromEncoded0, Pointer)
{
    NODE_RETURN(qt_QUrl_fromEncoded_QUrl_QByteArray(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fromEncoded1, Pointer)
{
    NODE_RETURN(qt_QUrl_fromEncoded_QUrl_QByteArray_int(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_fromLocalFile0, Pointer)
{
    NODE_RETURN(qt_QUrl_fromLocalFile_QUrl_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fromPercentEncoding0, Pointer)
{
    NODE_RETURN(qt_QUrl_fromPercentEncoding_string_QByteArray(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fromUserInput0, Pointer)
{
    NODE_RETURN(qt_QUrl_fromUserInput_QUrl_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_idnWhitelist0, Pointer)
{
    NODE_RETURN(qt_QUrl_idnWhitelist_stringBSB_ESB_(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_setIdnWhitelist0, void)
{
    qt_QUrl_setIdnWhitelist_void_stringBSB_ESB_(NODE_THREAD, NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_toAce0, Pointer)
{
    NODE_RETURN(qt_QUrl_toAce_QByteArray_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_toPercentEncoding0, Pointer)
{
    NODE_RETURN(qt_QUrl_toPercentEncoding_QByteArray_string_QByteArray_QByteArray(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}



void
QUrlType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", __allocate, None,
                            Return, ftn,
                            End),

               EndArguments );

addSymbols(
    new Alias(c, "FormattingOption", "int"),
    new Alias(c, "FormattingOptions", "int"),
      new SymbolicConstant(c, "None", "int", Value(int(QUrl::None))),
      new SymbolicConstant(c, "RemoveScheme", "int", Value(int(QUrl::RemoveScheme))),
      new SymbolicConstant(c, "RemovePassword", "int", Value(int(QUrl::RemovePassword))),
      new SymbolicConstant(c, "RemoveUserInfo", "int", Value(int(QUrl::RemoveUserInfo))),
      new SymbolicConstant(c, "RemovePort", "int", Value(int(QUrl::RemovePort))),
      new SymbolicConstant(c, "RemoveAuthority", "int", Value(int(QUrl::RemoveAuthority))),
      new SymbolicConstant(c, "RemovePath", "int", Value(int(QUrl::RemovePath))),
      new SymbolicConstant(c, "RemoveQuery", "int", Value(int(QUrl::RemoveQuery))),
      new SymbolicConstant(c, "RemoveFragment", "int", Value(int(QUrl::RemoveFragment))),
      new SymbolicConstant(c, "StripTrailingSlash", "int", Value(int(QUrl::StripTrailingSlash))),
    new Alias(c, "ParsingMode", "int"),
      new SymbolicConstant(c, "TolerantMode", "int", Value(int(QUrl::TolerantMode))),
      new SymbolicConstant(c, "StrictMode", "int", Value(int(QUrl::StrictMode))),
    EndArguments);

addSymbols(
    // enums
    // member functions
    new Function(c, "QUrl", _n_QUrl0, None, Compiled, qt_QUrl_QUrl_QUrl_QUrl, Return, "qt.QUrl", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "QUrl", _n_QUrl1, None, Compiled, qt_QUrl_QUrl_QUrl_QUrl_string, Return, "qt.QUrl", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "url", "string"), End),
    // MISSING: QUrl (QUrl; QUrl this, QUrl other)
    new Function(c, "QUrl", _n_QUrl3, None, Compiled, qt_QUrl_QUrl_QUrl_QUrl_string_int, Return, "qt.QUrl", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "url", "string"), new Param(c, "parsingMode", "int"), End),
    new Function(c, "addEncodedQueryItem", _n_addEncodedQueryItem0, None, Compiled, qt_QUrl_addEncodedQueryItem_void_QUrl_QByteArray_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "qt.QByteArray"), new Param(c, "value", "qt.QByteArray"), End),
    new Function(c, "addQueryItem", _n_addQueryItem0, None, Compiled, qt_QUrl_addQueryItem_void_QUrl_string_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "string"), new Param(c, "value", "string"), End),
    // MISSING: allEncodedQueryItemValues ("QList<QByteArray>"; QUrl this, QByteArray key)
    new Function(c, "allQueryItemValues", _n_allQueryItemValues0, None, Compiled, qt_QUrl_allQueryItemValues_stringBSB_ESB__QUrl_string, Return, "string[]", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "string"), End),
    new Function(c, "authority", _n_authority0, None, Compiled, qt_QUrl_authority_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "clear", _n_clear0, None, Compiled, qt_QUrl_clear_void_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "encodedFragment", _n_encodedFragment0, None, Compiled, qt_QUrl_encodedFragment_QByteArray_QUrl, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "encodedHost", _n_encodedHost0, None, Compiled, qt_QUrl_encodedHost_QByteArray_QUrl, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "encodedPassword", _n_encodedPassword0, None, Compiled, qt_QUrl_encodedPassword_QByteArray_QUrl, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "encodedPath", _n_encodedPath0, None, Compiled, qt_QUrl_encodedPath_QByteArray_QUrl, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "encodedQuery", _n_encodedQuery0, None, Compiled, qt_QUrl_encodedQuery_QByteArray_QUrl, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "encodedQueryItemValue", _n_encodedQueryItemValue0, None, Compiled, qt_QUrl_encodedQueryItemValue_QByteArray_QUrl_QByteArray, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "qt.QByteArray"), End),
    // MISSING: encodedQueryItems ("QList<QPair<QByteArray, QByteArray> >"; QUrl this)
    new Function(c, "encodedUserName", _n_encodedUserName0, None, Compiled, qt_QUrl_encodedUserName_QByteArray_QUrl, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "errorString", _n_errorString0, None, Compiled, qt_QUrl_errorString_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "fragment", _n_fragment0, None, Compiled, qt_QUrl_fragment_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "hasEncodedQueryItem", _n_hasEncodedQueryItem0, None, Compiled, qt_QUrl_hasEncodedQueryItem_bool_QUrl_QByteArray, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "qt.QByteArray"), End),
    new Function(c, "hasFragment", _n_hasFragment0, None, Compiled, qt_QUrl_hasFragment_bool_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "hasQuery", _n_hasQuery0, None, Compiled, qt_QUrl_hasQuery_bool_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "hasQueryItem", _n_hasQueryItem0, None, Compiled, qt_QUrl_hasQueryItem_bool_QUrl_string, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "string"), End),
    new Function(c, "host", _n_host0, None, Compiled, qt_QUrl_host_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "isEmpty", _n_isEmpty0, None, Compiled, qt_QUrl_isEmpty_bool_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "isLocalFile", _n_isLocalFile0, None, Compiled, qt_QUrl_isLocalFile_bool_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "isParentOf", _n_isParentOf0, None, Compiled, qt_QUrl_isParentOf_bool_QUrl_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "childUrl", "qt.QUrl"), End),
    new Function(c, "isRelative", _n_isRelative0, None, Compiled, qt_QUrl_isRelative_bool_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "isValid", _n_isValid0, None, Compiled, qt_QUrl_isValid_bool_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "password", _n_password0, None, Compiled, qt_QUrl_password_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "path", _n_path0, None, Compiled, qt_QUrl_path_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "port", _n_port0, None, Compiled, qt_QUrl_port_int_QUrl, Return, "int", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "port", _n_port1, None, Compiled, qt_QUrl_port_int_QUrl_int, Return, "int", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "defaultPort", "int"), End),
    new Function(c, "queryItemValue", _n_queryItemValue0, None, Compiled, qt_QUrl_queryItemValue_string_QUrl_string, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "string"), End),
    // MISSING: queryItems ("QList<QPair<QString, QString> >"; QUrl this)
    // MISSING: queryPairDelimiter ("char"; QUrl this)
    // MISSING: queryValueDelimiter ("char"; QUrl this)
    new Function(c, "removeAllEncodedQueryItems", _n_removeAllEncodedQueryItems0, None, Compiled, qt_QUrl_removeAllEncodedQueryItems_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "qt.QByteArray"), End),
    new Function(c, "removeAllQueryItems", _n_removeAllQueryItems0, None, Compiled, qt_QUrl_removeAllQueryItems_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "string"), End),
    new Function(c, "removeEncodedQueryItem", _n_removeEncodedQueryItem0, None, Compiled, qt_QUrl_removeEncodedQueryItem_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "qt.QByteArray"), End),
    new Function(c, "removeQueryItem", _n_removeQueryItem0, None, Compiled, qt_QUrl_removeQueryItem_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "key", "string"), End),
    new Function(c, "resolved", _n_resolved0, None, Compiled, qt_QUrl_resolved_QUrl_QUrl_QUrl, Return, "qt.QUrl", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "relative", "qt.QUrl"), End),
    new Function(c, "scheme", _n_scheme0, None, Compiled, qt_QUrl_scheme_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "setAuthority", _n_setAuthority0, None, Compiled, qt_QUrl_setAuthority_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "authority", "string"), End),
    new Function(c, "setEncodedFragment", _n_setEncodedFragment0, None, Compiled, qt_QUrl_setEncodedFragment_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "fragment", "qt.QByteArray"), End),
    new Function(c, "setEncodedHost", _n_setEncodedHost0, None, Compiled, qt_QUrl_setEncodedHost_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "host", "qt.QByteArray"), End),
    new Function(c, "setEncodedPassword", _n_setEncodedPassword0, None, Compiled, qt_QUrl_setEncodedPassword_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "password", "qt.QByteArray"), End),
    new Function(c, "setEncodedPath", _n_setEncodedPath0, None, Compiled, qt_QUrl_setEncodedPath_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "path", "qt.QByteArray"), End),
    new Function(c, "setEncodedQuery", _n_setEncodedQuery0, None, Compiled, qt_QUrl_setEncodedQuery_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "query", "qt.QByteArray"), End),
    // MISSING: setEncodedQueryItems (void; QUrl this, "const QList<QPair<QByteArray, QByteArray> > &" query)
    new Function(c, "setEncodedUrl", _n_setEncodedUrl0, None, Compiled, qt_QUrl_setEncodedUrl_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "encodedUrl", "qt.QByteArray"), End),
    new Function(c, "setEncodedUrl", _n_setEncodedUrl1, None, Compiled, qt_QUrl_setEncodedUrl_void_QUrl_QByteArray_int, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "encodedUrl", "qt.QByteArray"), new Param(c, "parsingMode", "int"), End),
    new Function(c, "setEncodedUserName", _n_setEncodedUserName0, None, Compiled, qt_QUrl_setEncodedUserName_void_QUrl_QByteArray, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "userName", "qt.QByteArray"), End),
    new Function(c, "setFragment", _n_setFragment0, None, Compiled, qt_QUrl_setFragment_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "fragment", "string"), End),
    new Function(c, "setHost", _n_setHost0, None, Compiled, qt_QUrl_setHost_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "host", "string"), End),
    new Function(c, "setPassword", _n_setPassword0, None, Compiled, qt_QUrl_setPassword_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "password", "string"), End),
    new Function(c, "setPath", _n_setPath0, None, Compiled, qt_QUrl_setPath_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "path", "string"), End),
    new Function(c, "setPort", _n_setPort0, None, Compiled, qt_QUrl_setPort_void_QUrl_int, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "port", "int"), End),
    // MISSING: setQueryDelimiters (void; QUrl this, "char" valueDelimiter, "char" pairDelimiter)
    // MISSING: setQueryItems (void; QUrl this, "const QList<QPair<QString, QString> > &" query)
    new Function(c, "setScheme", _n_setScheme0, None, Compiled, qt_QUrl_setScheme_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "scheme", "string"), End),
    new Function(c, "setUrl", _n_setUrl0, None, Compiled, qt_QUrl_setUrl_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "url", "string"), End),
    new Function(c, "setUrl", _n_setUrl1, None, Compiled, qt_QUrl_setUrl_void_QUrl_string_int, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "url", "string"), new Param(c, "parsingMode", "int"), End),
    new Function(c, "setUserInfo", _n_setUserInfo0, None, Compiled, qt_QUrl_setUserInfo_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "userInfo", "string"), End),
    new Function(c, "setUserName", _n_setUserName0, None, Compiled, qt_QUrl_setUserName_void_QUrl_string, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "userName", "string"), End),
    new Function(c, "swap", _n_swap0, None, Compiled, qt_QUrl_swap_void_QUrl_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "other", "qt.QUrl"), End),
    new Function(c, "toEncoded", _n_toEncoded0, None, Compiled, qt_QUrl_toEncoded_QByteArray_QUrl_int, Return, "qt.QByteArray", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "options", "int"), End),
    new Function(c, "toLocalFile", _n_toLocalFile0, None, Compiled, qt_QUrl_toLocalFile_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "toString", _n_toString0, None, Compiled, qt_QUrl_toString_string_QUrl_int, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "options", "int"), End),
    new Function(c, "topLevelDomain", _n_topLevelDomain0, None, Compiled, qt_QUrl_topLevelDomain_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "userInfo", _n_userInfo0, None, Compiled, qt_QUrl_userInfo_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    new Function(c, "userName", _n_userName0, None, Compiled, qt_QUrl_userName_string_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QUrl"), End),
    // static functions
    new Function(c, "fromAce", _n_fromAce0, None, Compiled, qt_QUrl_fromAce_string_QByteArray, Return, "string", Parameters, new Param(c, "domain", "qt.QByteArray"), End),
    new Function(c, "fromEncoded", _n_fromEncoded0, None, Compiled, qt_QUrl_fromEncoded_QUrl_QByteArray, Return, "qt.QUrl", Parameters, new Param(c, "input", "qt.QByteArray"), End),
    new Function(c, "fromEncoded", _n_fromEncoded1, None, Compiled, qt_QUrl_fromEncoded_QUrl_QByteArray_int, Return, "qt.QUrl", Parameters, new Param(c, "input", "qt.QByteArray"), new Param(c, "parsingMode", "int"), End),
    new Function(c, "fromLocalFile", _n_fromLocalFile0, None, Compiled, qt_QUrl_fromLocalFile_QUrl_string, Return, "qt.QUrl", Parameters, new Param(c, "localFile", "string"), End),
    new Function(c, "fromPercentEncoding", _n_fromPercentEncoding0, None, Compiled, qt_QUrl_fromPercentEncoding_string_QByteArray, Return, "string", Parameters, new Param(c, "input", "qt.QByteArray"), End),
    new Function(c, "fromUserInput", _n_fromUserInput0, None, Compiled, qt_QUrl_fromUserInput_QUrl_string, Return, "qt.QUrl", Parameters, new Param(c, "userInput", "string"), End),
    new Function(c, "idnWhitelist", _n_idnWhitelist0, None, Compiled, qt_QUrl_idnWhitelist_stringBSB_ESB_, Return, "string[]", End),
    new Function(c, "setIdnWhitelist", _n_setIdnWhitelist0, None, Compiled, qt_QUrl_setIdnWhitelist_void_stringBSB_ESB_, Return, "void", Parameters, new Param(c, "list", "string[]"), End),
    new Function(c, "toAce", _n_toAce0, None, Compiled, qt_QUrl_toAce_QByteArray_string, Return, "qt.QByteArray", Parameters, new Param(c, "domain", "string"), End),
    new Function(c, "toPercentEncoding", _n_toPercentEncoding0, None, Compiled, qt_QUrl_toPercentEncoding_QByteArray_string_QByteArray_QByteArray, Return, "qt.QByteArray", Parameters, new Param(c, "input", "string"), new Param(c, "exclude", "qt.QByteArray"), new Param(c, "include", "qt.QByteArray"), End),
    EndArguments);
globalScope()->addSymbols(
    new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled, qt_QUrl_operatorBang_EQ__bool_QUrl_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "url", "qt.QUrl"), End),
    // MISSING: = (QUrl; QUrl this, QUrl url)
    // MISSING: = (QUrl; QUrl this, string url)
    new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled, qt_QUrl_operatorEQ_EQ__bool_QUrl_QUrl, Return, "bool", Parameters, new Param(c, "this", "qt.QUrl"), new Param(c, "url", "qt.QUrl"), End),
    EndArguments);
scope()->addSymbols(
    EndArguments);


c->arrayType(this, 1, 0);

                        
}

} // Mu
