//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#ifndef __MuQt__QWebViewType__h__
#define __MuQt__QWebViewType__h__
#include <iostream>
#include <Mu/Class.h>
#include <Mu/Process.h>
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include <QtSvg/QtSvg>
#include <MuQt/Bridge.h>

namespace Mu {
class MuQt_QWebView;

//
//  NOTE: file generated by qt2mu.py
//

class QWebViewType : public Class
{
  public:

    typedef MuQt_QWebView MuQtType;
    typedef QWebView QtType;

    //
    //  Constructors
    //

    QWebViewType(Context* context, 
           const char* name,
           Class* superClass = 0,
           Class* superClass2 = 0);

    virtual ~QWebViewType();

    static bool isInheritable() { return true; }
    static inline ClassInstance* cachedInstance(const MuQtType*);

    //
    //  Class API
    //

    virtual void load();

    MemberFunction* _func[31];
};

// Inheritable object

class MuQt_QWebView : public QWebView
{
  public:
    virtual ~MuQt_QWebView();
    MuQt_QWebView(Pointer muobj, const CallEnvironment*, QWidget * parent) ;
    virtual bool event(QEvent * e) ;
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery property) const;
    virtual QSize sizeHint() const;
  protected:
    virtual QWebView * createWindow(QWebPage::WebWindowType type) ;
    virtual void changeEvent(QEvent * e) ;
    virtual void contextMenuEvent(QContextMenuEvent * ev) ;
    virtual void dragEnterEvent(QDragEnterEvent * ev) ;
    virtual void dragLeaveEvent(QDragLeaveEvent * ev) ;
    virtual void dragMoveEvent(QDragMoveEvent * ev) ;
    virtual void dropEvent(QDropEvent * ev) ;
    virtual void focusInEvent(QFocusEvent * ev) ;
    virtual bool focusNextPrevChild(bool next) ;
    virtual void focusOutEvent(QFocusEvent * ev) ;
    virtual void keyPressEvent(QKeyEvent * ev) ;
    virtual void keyReleaseEvent(QKeyEvent * ev) ;
    virtual void mouseDoubleClickEvent(QMouseEvent * ev) ;
    virtual void mouseMoveEvent(QMouseEvent * ev) ;
    virtual void mousePressEvent(QMouseEvent * ev) ;
    virtual void mouseReleaseEvent(QMouseEvent * ev) ;
    virtual void paintEvent(QPaintEvent * ev) ;
    virtual void resizeEvent(QResizeEvent * e) ;
    virtual void wheelEvent(QWheelEvent * ev) ;
  public:
    virtual int heightForWidth(int w) const;
    virtual QSize minimumSizeHint() const;
  protected:
    virtual void closeEvent(QCloseEvent * event) ;
    virtual void enterEvent(QEvent * event) ;
    virtual void hideEvent(QHideEvent * event) ;
    virtual void leaveEvent(QEvent * event) ;
    virtual void moveEvent(QMoveEvent * event) ;
    virtual void showEvent(QShowEvent * event) ;
    virtual void tabletEvent(QTabletEvent * event) ;
  public:
    QWebView * createWindow_pub(QWebPage::WebWindowType type)  { return createWindow(type); }
    QWebView * createWindow_pub_parent(QWebPage::WebWindowType type)  { return QWebView::createWindow(type); }
    void changeEvent_pub(QEvent * e)  { changeEvent(e); }
    void changeEvent_pub_parent(QEvent * e)  { QWebView::changeEvent(e); }
    void contextMenuEvent_pub(QContextMenuEvent * ev)  { contextMenuEvent(ev); }
    void contextMenuEvent_pub_parent(QContextMenuEvent * ev)  { QWebView::contextMenuEvent(ev); }
    void dragEnterEvent_pub(QDragEnterEvent * ev)  { dragEnterEvent(ev); }
    void dragEnterEvent_pub_parent(QDragEnterEvent * ev)  { QWebView::dragEnterEvent(ev); }
    void dragLeaveEvent_pub(QDragLeaveEvent * ev)  { dragLeaveEvent(ev); }
    void dragLeaveEvent_pub_parent(QDragLeaveEvent * ev)  { QWebView::dragLeaveEvent(ev); }
    void dragMoveEvent_pub(QDragMoveEvent * ev)  { dragMoveEvent(ev); }
    void dragMoveEvent_pub_parent(QDragMoveEvent * ev)  { QWebView::dragMoveEvent(ev); }
    void dropEvent_pub(QDropEvent * ev)  { dropEvent(ev); }
    void dropEvent_pub_parent(QDropEvent * ev)  { QWebView::dropEvent(ev); }
    void focusInEvent_pub(QFocusEvent * ev)  { focusInEvent(ev); }
    void focusInEvent_pub_parent(QFocusEvent * ev)  { QWebView::focusInEvent(ev); }
    bool focusNextPrevChild_pub(bool next)  { return focusNextPrevChild(next); }
    bool focusNextPrevChild_pub_parent(bool next)  { return QWebView::focusNextPrevChild(next); }
    void focusOutEvent_pub(QFocusEvent * ev)  { focusOutEvent(ev); }
    void focusOutEvent_pub_parent(QFocusEvent * ev)  { QWebView::focusOutEvent(ev); }
    void keyPressEvent_pub(QKeyEvent * ev)  { keyPressEvent(ev); }
    void keyPressEvent_pub_parent(QKeyEvent * ev)  { QWebView::keyPressEvent(ev); }
    void keyReleaseEvent_pub(QKeyEvent * ev)  { keyReleaseEvent(ev); }
    void keyReleaseEvent_pub_parent(QKeyEvent * ev)  { QWebView::keyReleaseEvent(ev); }
    void mouseDoubleClickEvent_pub(QMouseEvent * ev)  { mouseDoubleClickEvent(ev); }
    void mouseDoubleClickEvent_pub_parent(QMouseEvent * ev)  { QWebView::mouseDoubleClickEvent(ev); }
    void mouseMoveEvent_pub(QMouseEvent * ev)  { mouseMoveEvent(ev); }
    void mouseMoveEvent_pub_parent(QMouseEvent * ev)  { QWebView::mouseMoveEvent(ev); }
    void mousePressEvent_pub(QMouseEvent * ev)  { mousePressEvent(ev); }
    void mousePressEvent_pub_parent(QMouseEvent * ev)  { QWebView::mousePressEvent(ev); }
    void mouseReleaseEvent_pub(QMouseEvent * ev)  { mouseReleaseEvent(ev); }
    void mouseReleaseEvent_pub_parent(QMouseEvent * ev)  { QWebView::mouseReleaseEvent(ev); }
    void paintEvent_pub(QPaintEvent * ev)  { paintEvent(ev); }
    void paintEvent_pub_parent(QPaintEvent * ev)  { QWebView::paintEvent(ev); }
    void resizeEvent_pub(QResizeEvent * e)  { resizeEvent(e); }
    void resizeEvent_pub_parent(QResizeEvent * e)  { QWebView::resizeEvent(e); }
    void wheelEvent_pub(QWheelEvent * ev)  { wheelEvent(ev); }
    void wheelEvent_pub_parent(QWheelEvent * ev)  { QWebView::wheelEvent(ev); }
    void closeEvent_pub(QCloseEvent * event)  { closeEvent(event); }
    void closeEvent_pub_parent(QCloseEvent * event)  { QWebView::closeEvent(event); }
    void enterEvent_pub(QEvent * event)  { enterEvent(event); }
    void enterEvent_pub_parent(QEvent * event)  { QWebView::enterEvent(event); }
    void hideEvent_pub(QHideEvent * event)  { hideEvent(event); }
    void hideEvent_pub_parent(QHideEvent * event)  { QWebView::hideEvent(event); }
    void leaveEvent_pub(QEvent * event)  { leaveEvent(event); }
    void leaveEvent_pub_parent(QEvent * event)  { QWebView::leaveEvent(event); }
    void moveEvent_pub(QMoveEvent * event)  { moveEvent(event); }
    void moveEvent_pub_parent(QMoveEvent * event)  { QWebView::moveEvent(event); }
    void showEvent_pub(QShowEvent * event)  { showEvent(event); }
    void showEvent_pub_parent(QShowEvent * event)  { QWebView::showEvent(event); }
    void tabletEvent_pub(QTabletEvent * event)  { tabletEvent(event); }
    void tabletEvent_pub_parent(QTabletEvent * event)  { QWebView::tabletEvent(event); }
  public:
    const QWebViewType* _baseType;
    ClassInstance* _obj;
    const CallEnvironment* _env;
};

inline ClassInstance* QWebViewType::cachedInstance(const QWebViewType::MuQtType* obj) { return obj->_obj; }

} // Mu

#endif // __MuQt__QWebViewType__h__
