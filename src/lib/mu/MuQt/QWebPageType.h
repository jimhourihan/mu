//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#ifndef __MuQt__QWebPageType__h__
#define __MuQt__QWebPageType__h__
#include <iostream>
#include <Mu/Class.h>
#include <Mu/Process.h>
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include <QtSvg/QtSvg>
#include <MuQt/Bridge.h>

namespace Mu {
class MuQt_QWebPage;

//
//  NOTE: file generated by qt2mu.py
//

class QWebPageType : public Class
{
  public:

    typedef MuQt_QWebPage MuQtType;
    typedef QWebPage QtType;

    //
    //  Constructors
    //

    QWebPageType(Context* context, 
           const char* name,
           Class* superClass = 0,
           Class* superClass2 = 0);

    virtual ~QWebPageType();

    static bool isInheritable() { return true; }
    static inline ClassInstance* cachedInstance(const MuQtType*);

    //
    //  Class API
    //

    virtual void load();

    MemberFunction* _func[13];
};

// Inheritable object

class MuQt_QWebPage : public QWebPage
{
  public:
    virtual ~MuQt_QWebPage();
    MuQt_QWebPage(Pointer muobj, const CallEnvironment*, QObject * parent) ;
    virtual bool supportsExtension(QWebPage::Extension extension) const;
    virtual void triggerAction(QWebPage::WebAction action, bool checked) ;
    virtual bool event(QEvent * ev) ;
  protected:
    virtual QString chooseFile(QWebFrame * parentFrame, const QString & suggestedFile) ;
    virtual QObject * createPlugin(const QString & classid, const QUrl & url, const QStringList & paramNames, const QStringList & paramValues) ;
    virtual QWebPage * createWindow(QWebPage::WebWindowType type) ;
    virtual void javaScriptAlert(QWebFrame * frame, const QString & msg) ;
    virtual bool javaScriptConfirm(QWebFrame * frame, const QString & msg) ;
    virtual void javaScriptConsoleMessage(const QString & message, int lineNumber, const QString & sourceID) ;
    virtual QString userAgentForUrl(const QUrl & url) const;
  public:
    virtual bool eventFilter(QObject * watched, QEvent * event) ;
  protected:
    virtual void customEvent(QEvent * event) ;
    virtual void timerEvent(QTimerEvent * event) ;
  public:
    QString chooseFile_pub(QWebFrame * parentFrame, const QString & suggestedFile)  { return chooseFile(parentFrame, suggestedFile); }
    QString chooseFile_pub_parent(QWebFrame * parentFrame, const QString & suggestedFile)  { return QWebPage::chooseFile(parentFrame, suggestedFile); }
    QObject * createPlugin_pub(const QString & classid, const QUrl & url, const QStringList & paramNames, const QStringList & paramValues)  { return createPlugin(classid, url, paramNames, paramValues); }
    QObject * createPlugin_pub_parent(const QString & classid, const QUrl & url, const QStringList & paramNames, const QStringList & paramValues)  { return QWebPage::createPlugin(classid, url, paramNames, paramValues); }
    QWebPage * createWindow_pub(QWebPage::WebWindowType type)  { return createWindow(type); }
    QWebPage * createWindow_pub_parent(QWebPage::WebWindowType type)  { return QWebPage::createWindow(type); }
    void javaScriptAlert_pub(QWebFrame * frame, const QString & msg)  { javaScriptAlert(frame, msg); }
    void javaScriptAlert_pub_parent(QWebFrame * frame, const QString & msg)  { QWebPage::javaScriptAlert(frame, msg); }
    bool javaScriptConfirm_pub(QWebFrame * frame, const QString & msg)  { return javaScriptConfirm(frame, msg); }
    bool javaScriptConfirm_pub_parent(QWebFrame * frame, const QString & msg)  { return QWebPage::javaScriptConfirm(frame, msg); }
    void javaScriptConsoleMessage_pub(const QString & message, int lineNumber, const QString & sourceID)  { javaScriptConsoleMessage(message, lineNumber, sourceID); }
    void javaScriptConsoleMessage_pub_parent(const QString & message, int lineNumber, const QString & sourceID)  { QWebPage::javaScriptConsoleMessage(message, lineNumber, sourceID); }
    QString userAgentForUrl_pub(const QUrl & url) const { return userAgentForUrl(url); }
    QString userAgentForUrl_pub_parent(const QUrl & url) const { return QWebPage::userAgentForUrl(url); }
    void customEvent_pub(QEvent * event)  { customEvent(event); }
    void customEvent_pub_parent(QEvent * event)  { QWebPage::customEvent(event); }
    void timerEvent_pub(QTimerEvent * event)  { timerEvent(event); }
    void timerEvent_pub_parent(QTimerEvent * event)  { QWebPage::timerEvent(event); }
  public:
    const QWebPageType* _baseType;
    ClassInstance* _obj;
    const CallEnvironment* _env;
};

inline ClassInstance* QWebPageType::cachedInstance(const QWebPageType::MuQtType* obj) { return obj->_obj; }

} // Mu

#endif // __MuQt__QWebPageType__h__
