//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#ifndef __MuQt__QAbstractItemModelType__h__
#define __MuQt__QAbstractItemModelType__h__
#include <iostream>
#include <Mu/Class.h>
#include <Mu/Process.h>
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include <QtSvg/QtSvg>
#include <MuQt/Bridge.h>

namespace Mu {
class MuQt_QAbstractItemModel;

//
//  NOTE: file generated by qt2mu.py
//

class QAbstractItemModelType : public Class
{
  public:

    typedef MuQt_QAbstractItemModel MuQtType;
    typedef QAbstractItemModel QtType;

    //
    //  Constructors
    //

    QAbstractItemModelType(Context* context, 
           const char* name,
           Class* superClass = 0,
           Class* superClass2 = 0);

    virtual ~QAbstractItemModelType();

    static bool isInheritable() { return true; }
    static inline ClassInstance* cachedInstance(const MuQtType*);

    //
    //  Class API
    //

    virtual void load();

    MemberFunction* _func[28];
};

// Inheritable object

class MuQt_QAbstractItemModel : public QAbstractItemModel
{
  public:
    virtual ~MuQt_QAbstractItemModel();
    MuQt_QAbstractItemModel(Pointer muobj, const CallEnvironment*, QObject * parent) ;
    virtual QModelIndex buddy(const QModelIndex & index) const;
    virtual bool canFetchMore(const QModelIndex & parent) const;
    virtual int columnCount(const QModelIndex & parent) const ;
    virtual QVariant data(const QModelIndex & index, int role) const ;
    virtual bool dropMimeData(const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent) ;
    virtual void fetchMore(const QModelIndex & parent) ;
    virtual Qt::ItemFlags flags(const QModelIndex & index) const;
    virtual bool hasChildren(const QModelIndex & parent) const;
    virtual QVariant headerData(int section, Qt::Orientation orientation, int role) const;
    virtual QModelIndex index(int row, int column, const QModelIndex & parent) const ;
    virtual bool insertColumns(int column, int count, const QModelIndex & parent) ;
    virtual bool insertRows(int row, int count, const QModelIndex & parent) ;
    virtual QModelIndexList match(const QModelIndex & start, int role, const QVariant & value, int hits, Qt::MatchFlags flags) const;
    virtual QMimeData * mimeData(const QModelIndexList & indexes) const;
    virtual QStringList mimeTypes() const;
    virtual QModelIndex parent(const QModelIndex & index) const ;
    virtual bool removeColumns(int column, int count, const QModelIndex & parent) ;
    virtual bool removeRows(int row, int count, const QModelIndex & parent) ;
    virtual int rowCount(const QModelIndex & parent) const ;
    virtual bool setData(const QModelIndex & index, const QVariant & value, int role) ;
    virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant & value, int role) ;
    virtual void sort(int column, Qt::SortOrder order) ;
    virtual QSize span(const QModelIndex & index) const;
    virtual Qt::DropActions supportedDropActions() const;
    virtual bool event(QEvent * e) ;
    virtual bool eventFilter(QObject * watched, QEvent * event) ;
  protected:
    virtual void customEvent(QEvent * event) ;
    virtual void timerEvent(QTimerEvent * event) ;
  public:
    void beginInsertColumns_pub(const QModelIndex & parent, int first, int last)  { beginInsertColumns(parent, first, last); }
    void beginInsertColumns_pub_parent(const QModelIndex & parent, int first, int last)  { QAbstractItemModel::beginInsertColumns(parent, first, last); }
    void beginInsertRows_pub(const QModelIndex & parent, int first, int last)  { beginInsertRows(parent, first, last); }
    void beginInsertRows_pub_parent(const QModelIndex & parent, int first, int last)  { QAbstractItemModel::beginInsertRows(parent, first, last); }
    bool beginMoveColumns_pub(const QModelIndex & sourceParent, int sourceFirst, int sourceLast, const QModelIndex & destinationParent, int destinationChild)  { return beginMoveColumns(sourceParent, sourceFirst, sourceLast, destinationParent, destinationChild); }
    bool beginMoveColumns_pub_parent(const QModelIndex & sourceParent, int sourceFirst, int sourceLast, const QModelIndex & destinationParent, int destinationChild)  { return QAbstractItemModel::beginMoveColumns(sourceParent, sourceFirst, sourceLast, destinationParent, destinationChild); }
    bool beginMoveRows_pub(const QModelIndex & sourceParent, int sourceFirst, int sourceLast, const QModelIndex & destinationParent, int destinationChild)  { return beginMoveRows(sourceParent, sourceFirst, sourceLast, destinationParent, destinationChild); }
    bool beginMoveRows_pub_parent(const QModelIndex & sourceParent, int sourceFirst, int sourceLast, const QModelIndex & destinationParent, int destinationChild)  { return QAbstractItemModel::beginMoveRows(sourceParent, sourceFirst, sourceLast, destinationParent, destinationChild); }
    void beginRemoveColumns_pub(const QModelIndex & parent, int first, int last)  { beginRemoveColumns(parent, first, last); }
    void beginRemoveColumns_pub_parent(const QModelIndex & parent, int first, int last)  { QAbstractItemModel::beginRemoveColumns(parent, first, last); }
    void beginRemoveRows_pub(const QModelIndex & parent, int first, int last)  { beginRemoveRows(parent, first, last); }
    void beginRemoveRows_pub_parent(const QModelIndex & parent, int first, int last)  { QAbstractItemModel::beginRemoveRows(parent, first, last); }
    void beginResetModel_pub()  { beginResetModel(); }
    void beginResetModel_pub_parent()  { QAbstractItemModel::beginResetModel(); }
    void changePersistentIndex_pub(const QModelIndex & from, const QModelIndex & to)  { changePersistentIndex(from, to); }
    void changePersistentIndex_pub_parent(const QModelIndex & from, const QModelIndex & to)  { QAbstractItemModel::changePersistentIndex(from, to); }
    void changePersistentIndexList_pub(const QModelIndexList & from, const QModelIndexList & to)  { changePersistentIndexList(from, to); }
    void changePersistentIndexList_pub_parent(const QModelIndexList & from, const QModelIndexList & to)  { QAbstractItemModel::changePersistentIndexList(from, to); }
    QModelIndex createIndex_pub(int row, int column, quint32 id) const { return createIndex(row, column, id); }
    QModelIndex createIndex_pub_parent(int row, int column, quint32 id) const { return QAbstractItemModel::createIndex(row, column, id); }
    void endInsertColumns_pub()  { endInsertColumns(); }
    void endInsertColumns_pub_parent()  { QAbstractItemModel::endInsertColumns(); }
    void endInsertRows_pub()  { endInsertRows(); }
    void endInsertRows_pub_parent()  { QAbstractItemModel::endInsertRows(); }
    void endMoveColumns_pub()  { endMoveColumns(); }
    void endMoveColumns_pub_parent()  { QAbstractItemModel::endMoveColumns(); }
    void endMoveRows_pub()  { endMoveRows(); }
    void endMoveRows_pub_parent()  { QAbstractItemModel::endMoveRows(); }
    void endRemoveColumns_pub()  { endRemoveColumns(); }
    void endRemoveColumns_pub_parent()  { QAbstractItemModel::endRemoveColumns(); }
    void endRemoveRows_pub()  { endRemoveRows(); }
    void endRemoveRows_pub_parent()  { QAbstractItemModel::endRemoveRows(); }
    void endResetModel_pub()  { endResetModel(); }
    void endResetModel_pub_parent()  { QAbstractItemModel::endResetModel(); }
    QModelIndexList persistentIndexList_pub() const { return persistentIndexList(); }
    QModelIndexList persistentIndexList_pub_parent() const { return QAbstractItemModel::persistentIndexList(); }
    void reset_pub()  { reset(); }
    void reset_pub_parent()  { QAbstractItemModel::reset(); }
    void customEvent_pub(QEvent * event)  { customEvent(event); }
    void customEvent_pub_parent(QEvent * event)  { QAbstractItemModel::customEvent(event); }
    void timerEvent_pub(QTimerEvent * event)  { timerEvent(event); }
    void timerEvent_pub_parent(QTimerEvent * event)  { QAbstractItemModel::timerEvent(event); }
  public:
    QModelIndex createIndex0_pub(int row, int column, Pointer p) const { return createIndex(row, column, p); }
  public:
    const QAbstractItemModelType* _baseType;
    ClassInstance* _obj;
    const CallEnvironment* _env;
};

inline ClassInstance* QAbstractItemModelType::cachedInstance(const QAbstractItemModelType::MuQtType* obj) { return obj->_obj; }

} // Mu

#endif // __MuQt__QAbstractItemModelType__h__
