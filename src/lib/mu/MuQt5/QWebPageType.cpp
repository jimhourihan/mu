//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QWebPageType.h"
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include <QtWebKitWidgets/QtWebKitWidgets>
#include "QWidgetType.h"
#include "QActionType.h"
#include "QIconType.h"
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include "QObjectType.h"
#include "QEventType.h"
#include "QRectType.h"
#include "QWebFrameType.h"
#include "QWidgetType.h"
#include "QWebSettingsType.h"
#include "QVariantType.h"
#include "QContextMenuEventType.h"
#include "QMenuType.h"
#include "QUrlType.h"
#include "QPointType.h"
#include "QActionType.h"
#include "QTimerEventType.h"
#include "QNetworkAccessManagerType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

//----------------------------------------------------------------------
//  INHERITABLE TYPE IMPLEMENTATION

// destructor
MuQt_QWebPage::~MuQt_QWebPage()
{
    if (_obj)
    {
        *_obj->data<Pointer>() = Pointer(0);
        _obj->releaseExternal();
    }
    _obj = 0;
    _env = 0;
    _baseType = 0;
}

MuQt_QWebPage::MuQt_QWebPage(Pointer muobj, const CallEnvironment* ce, QObject * parent) 
 : QWebPage(parent)
{
    _env = ce;
    _obj = reinterpret_cast<ClassInstance*>(muobj);
    _obj->retainExternal();
    MuLangContext* c = (MuLangContext*)_env->context();
    _baseType = c->findSymbolOfTypeByQualifiedName<QWebPageType>(c->internName("qt.QWebPage"));
}

bool MuQt_QWebPage::shouldInterruptJavaScript() 
{
    if (!_env) return QWebPage::shouldInterruptJavaScript();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[0];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QWebPage::shouldInterruptJavaScript();
    }
}

bool MuQt_QWebPage::supportsExtension(QWebPage::Extension extension) const
{
    if (!_env) return QWebPage::supportsExtension(extension);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[1];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(int(extension));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QWebPage::supportsExtension(extension);
    }
}

void MuQt_QWebPage::triggerAction(QWebPage::WebAction action, bool checked) 
{
    if (!_env) { QWebPage::triggerAction(action, checked); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[2];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(int(action));
        args[2] = Value(checked);
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebPage::triggerAction(action, checked);
    }
}

bool MuQt_QWebPage::event(QEvent * ev) 
{
    if (!_env) return QWebPage::event(ev);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[3];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,ev,"qt.QEvent"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QWebPage::event(ev);
    }
}

QString MuQt_QWebPage::chooseFile(QWebFrame * parentFrame, const QString & suggestedFile) 
{
    if (!_env) return QWebPage::chooseFile(parentFrame, suggestedFile);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[4];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeinstance<QWebFrameType>(c,parentFrame,"qt.QWebFrame"));
        args[2] = Value(makestring(c,suggestedFile));
        Value rval = _env->call(F, args);
        return qstring(rval._Pointer);
    }
    else
    {
        return QWebPage::chooseFile(parentFrame, suggestedFile);
    }
}

QObject * MuQt_QWebPage::createPlugin(const QString & classid, const QUrl & url, const QStringList & paramNames, const QStringList & paramValues) 
{
    if (!_env) return QWebPage::createPlugin(classid, url, paramNames, paramValues);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[5];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(5);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makestring(c,classid));
        args[2] = Value(makeqtype<QUrlType>(c,url,"qt.QUrl"));
        args[3] = Value(makestringlist(c,paramNames));
        args[4] = Value(makestringlist(c,paramValues));
        Value rval = _env->call(F, args);
        return object<QObject>(rval._Pointer);
    }
    else
    {
        return QWebPage::createPlugin(classid, url, paramNames, paramValues);
    }
}

QWebPage * MuQt_QWebPage::createWindow(QWebPage::WebWindowType type) 
{
    if (!_env) return QWebPage::createWindow(type);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[6];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(int(type));
        Value rval = _env->call(F, args);
        return object<QWebPage>(rval._Pointer);
    }
    else
    {
        return QWebPage::createWindow(type);
    }
}

void MuQt_QWebPage::javaScriptAlert(QWebFrame * frame, const QString & msg) 
{
    if (!_env) { QWebPage::javaScriptAlert(frame, msg); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[7];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeinstance<QWebFrameType>(c,frame,"qt.QWebFrame"));
        args[2] = Value(makestring(c,msg));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebPage::javaScriptAlert(frame, msg);
    }
}

bool MuQt_QWebPage::javaScriptConfirm(QWebFrame * frame, const QString & msg) 
{
    if (!_env) return QWebPage::javaScriptConfirm(frame, msg);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[8];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeinstance<QWebFrameType>(c,frame,"qt.QWebFrame"));
        args[2] = Value(makestring(c,msg));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QWebPage::javaScriptConfirm(frame, msg);
    }
}

void MuQt_QWebPage::javaScriptConsoleMessage(const QString & message, int lineNumber, const QString & sourceID) 
{
    if (!_env) { QWebPage::javaScriptConsoleMessage(message, lineNumber, sourceID); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[9];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(4);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makestring(c,message));
        args[2] = Value(lineNumber);
        args[3] = Value(makestring(c,sourceID));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebPage::javaScriptConsoleMessage(message, lineNumber, sourceID);
    }
}

QString MuQt_QWebPage::userAgentForUrl(const QUrl & url) const
{
    if (!_env) return QWebPage::userAgentForUrl(url);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[10];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqtype<QUrlType>(c,url,"qt.QUrl"));
        Value rval = _env->call(F, args);
        return qstring(rval._Pointer);
    }
    else
    {
        return QWebPage::userAgentForUrl(url);
    }
}

bool MuQt_QWebPage::eventFilter(QObject * watched, QEvent * event) 
{
    if (!_env) return QWebPage::eventFilter(watched, event);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[11];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(3);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeinstance<QObjectType>(c,watched,"qt.QObject"));
        args[2] = Value(makeqpointer<QEventType>(c,event,"qt.QEvent"));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QWebPage::eventFilter(watched, event);
    }
}

void MuQt_QWebPage::customEvent(QEvent * event) 
{
    if (!_env) { QWebPage::customEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[12];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QEventType>(c,event,"qt.QEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebPage::customEvent(event);
    }
}

void MuQt_QWebPage::timerEvent(QTimerEvent * event) 
{
    if (!_env) { QWebPage::timerEvent(event); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[13];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(makeqpointer<QTimerEventType>(c,event,"qt.QTimerEvent"));
        Value rval = _env->call(F, args);
    }
    else
    {
        QWebPage::timerEvent(event);
    }
}



//----------------------------------------------------------------------
//  Mu Type CONSTRUCTORS

QWebPageType::QWebPageType(Context* c, const char* name, Class* super, Class* super2)
: Class(c, name, vectorOf2(super, super2))
{
}

QWebPageType::~QWebPageType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

static Pointer
QWebPage_QWebPage_QObject(Thread& NODE_THREAD, Pointer obj)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

    if (!widget)
    {
        return 0;
    }
    else if (QWebPage* w = object<QWebPage>(widget))
    {
        QWebPageType* type = 
            c->findSymbolOfTypeByQualifiedName<QWebPageType>(c->internName("qt.QWebPage"), false);
        ClassInstance* o = ClassInstance::allocate(type);
        setobject(o, w);
        return o;
    }
    else
    {
        throw BadCastException();
    }
}

static NODE_IMPLEMENTATION(castFromObject, Pointer)
{
    NODE_RETURN( QWebPage_QWebPage_QObject(NODE_THREAD, NODE_ARG(0, Pointer)) );
}

Pointer qt_QWebPage_QWebPage_QWebPage_QWebPage_QObject(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QObject * arg1 = object<QObject>(param_parent);
    setobject(param_this, new MuQt_QWebPage(param_this, NODE_THREAD.process()->callEnv(), arg1));
    return param_this;
}

Pointer qt_QWebPage_action_QAction_QWebPage_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_action_)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebPage::WebAction arg1 = (QWebPage::WebAction)(param_action_);
    return makeinstance<QActionType>(c, arg0->action(arg1), "qt.QAction");
}

Pointer qt_QWebPage_createStandardContextMenu_QMenu_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return makeinstance<QMenuType>(c, arg0->createStandardContextMenu(), "qt.QMenu");
}

Pointer qt_QWebPage_currentFrame_QWebFrame_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return makeinstance<QWebFrameType>(c, arg0->currentFrame(), "qt.QWebFrame");
}

bool qt_QWebPage_findText_bool_QWebPage_string_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_subString, int param_options)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QString  arg1 = qstring(param_subString);
    QWebPage::FindFlags arg2 = (QWebPage::FindFlags)(param_options);
    return arg0->findText(arg1, arg2);
}

bool qt_QWebPage_focusNextPrevChild_bool_QWebPage_bool(Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    bool arg1 = (bool)(param_next);
    return arg0->focusNextPrevChild(arg1);
}

Pointer qt_QWebPage_frameAt_QWebFrame_QWebPage_QPoint(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QPoint  arg1 = getqtype<QPointType>(param_pos);
    return makeinstance<QWebFrameType>(c, arg0->frameAt(arg1), "qt.QWebFrame");
}

Pointer qt_QWebPage_inputMethodQuery_QVariant_QWebPage_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_property)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_property);
    return makeqtype<QVariantType>(c,arg0->inputMethodQuery(arg1),"qt.QVariant");
}

Pointer qt_QWebPage_mainFrame_QWebFrame_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return makeinstance<QWebFrameType>(c, arg0->mainFrame(), "qt.QWebFrame");
}

Pointer qt_QWebPage_networkAccessManager_QNetworkAccessManager_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return makeinstance<QNetworkAccessManagerType>(c, arg0->networkAccessManager(), "qt.QNetworkAccessManager");
}

void qt_QWebPage_setActualVisibleContentRect_void_QWebPage_QRect(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QRect  arg1 = getqtype<QRectType>(param_rect);
    arg0->setActualVisibleContentRect(arg1);
}

void qt_QWebPage_setFeaturePermission_void_QWebPage_QWebFrame_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_frame, int param_feature, int param_policy)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebFrame * arg1 = object<QWebFrame>(param_frame);
    QWebPage::Feature arg2 = (QWebPage::Feature)(param_feature);
    QWebPage::PermissionPolicy arg3 = (QWebPage::PermissionPolicy)(param_policy);
    arg0->setFeaturePermission(arg1, arg2, arg3);
}

void qt_QWebPage_setNetworkAccessManager_void_QWebPage_QNetworkAccessManager(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_manager)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QNetworkAccessManager * arg1 = object<QNetworkAccessManager>(param_manager);
    arg0->setNetworkAccessManager(arg1);
}

void qt_QWebPage_setView_void_QWebPage_QWidget(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_view)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWidget * arg1 = object<QWidget>(param_view);
    arg0->setView(arg1);
}

Pointer qt_QWebPage_settings_QWebSettings_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return makeqpointer<QWebSettingsType>(c,arg0->settings(),"qt.QWebSettings");
}

bool qt_QWebPage_shouldInterruptJavaScript_bool_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return isMuQtObject(arg0) ? arg0->QWebPage::shouldInterruptJavaScript() : arg0->shouldInterruptJavaScript();
}

Pointer qt_QWebPage_supportedContentTypes_stringBSB_ESB__QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return makestringlist(c,arg0->supportedContentTypes());
}

bool qt_QWebPage_supportsContentType_bool_QWebPage_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_mimeType)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QString  arg1 = qstring(param_mimeType);
    return arg0->supportsContentType(arg1);
}

bool qt_QWebPage_supportsExtension_bool_QWebPage_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_extension)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebPage::Extension arg1 = (QWebPage::Extension)(param_extension);
    return isMuQtObject(arg0) ? arg0->QWebPage::supportsExtension(arg1) : arg0->supportsExtension(arg1);
}

bool qt_QWebPage_swallowContextMenuEvent_bool_QWebPage_QContextMenuEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QContextMenuEvent * arg1 = getqpointer<QContextMenuEventType>(param_event);
    return arg0->swallowContextMenuEvent(arg1);
}

void qt_QWebPage_triggerAction_void_QWebPage_int_bool(Mu::Thread& NODE_THREAD, Pointer param_this, int param_action, bool param_checked)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebPage::WebAction arg1 = (QWebPage::WebAction)(param_action);
    bool arg2 = (bool)(param_checked);
    if (isMuQtObject(arg0)) arg0->QWebPage::triggerAction(arg1, arg2);
    else arg0->triggerAction(arg1, arg2);
}

void qt_QWebPage_updatePositionDependentActions_void_QWebPage_QPoint(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QPoint  arg1 = getqtype<QPointType>(param_pos);
    arg0->updatePositionDependentActions(arg1);
}

Pointer qt_QWebPage_view_QWidget_QWebPage(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    return makeinstance<QWidgetType>(c, arg0->view(), "qt.QWidget");
}

bool qt_QWebPage_event_bool_QWebPage_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_ev);
    return isMuQtObject(arg0) ? arg0->QWebPage::event(arg1) : arg0->event(arg1);
}

Pointer qt_QWebPage_chooseFile_string_QWebPage_QWebFrame_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parentFrame, Pointer param_suggestedFile)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebFrame * arg1 = object<QWebFrame>(param_parentFrame);
    const QString  arg2 = qstring(param_suggestedFile);
    return isMuQtObject(arg0) ? makestring(c,((MuQt_QWebPage*)arg0)->chooseFile_pub_parent(arg1, arg2)) : makestring(c,((MuQt_QWebPage*)arg0)->chooseFile_pub(arg1, arg2));
}

Pointer qt_QWebPage_createPlugin_QObject_QWebPage_string_QUrl_stringBSB_ESB__stringBSB_ESB_(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_classid, Pointer param_url, Pointer param_paramNames, Pointer param_paramValues)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QString  arg1 = qstring(param_classid);
    const QUrl  arg2 = getqtype<QUrlType>(param_url);
    const QStringList  arg3 = qstringlist(param_paramNames);
    const QStringList  arg4 = qstringlist(param_paramValues);
    return isMuQtObject(arg0) ? makeinstance<QObjectType>(c, ((MuQt_QWebPage*)arg0)->createPlugin_pub_parent(arg1, arg2, arg3, arg4), "qt.QObject") : makeinstance<QObjectType>(c, ((MuQt_QWebPage*)arg0)->createPlugin_pub(arg1, arg2, arg3, arg4), "qt.QObject");
}

Pointer qt_QWebPage_createWindow_QWebPage_QWebPage_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_type)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebPage::WebWindowType arg1 = (QWebPage::WebWindowType)(param_type);
    return isMuQtObject(arg0) ? makeinstance<QWebPageType>(c, ((MuQt_QWebPage*)arg0)->createWindow_pub_parent(arg1), "qt.QWebPage") : makeinstance<QWebPageType>(c, ((MuQt_QWebPage*)arg0)->createWindow_pub(arg1), "qt.QWebPage");
}

void qt_QWebPage_javaScriptAlert_void_QWebPage_QWebFrame_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_frame, Pointer param_msg)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebFrame * arg1 = object<QWebFrame>(param_frame);
    const QString  arg2 = qstring(param_msg);
    if (isMuQtObject(arg0)) ((MuQt_QWebPage*)arg0)->javaScriptAlert_pub_parent(arg1, arg2);
    else ((MuQt_QWebPage*)arg0)->javaScriptAlert_pub(arg1, arg2);
}

bool qt_QWebPage_javaScriptConfirm_bool_QWebPage_QWebFrame_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_frame, Pointer param_msg)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QWebFrame * arg1 = object<QWebFrame>(param_frame);
    const QString  arg2 = qstring(param_msg);
    return isMuQtObject(arg0) ? ((MuQt_QWebPage*)arg0)->javaScriptConfirm_pub_parent(arg1, arg2) : ((MuQt_QWebPage*)arg0)->javaScriptConfirm_pub(arg1, arg2);
}

void qt_QWebPage_javaScriptConsoleMessage_void_QWebPage_string_int_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_message, int param_lineNumber, Pointer param_sourceID)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QString  arg1 = qstring(param_message);
    int arg2 = (int)(param_lineNumber);
    const QString  arg3 = qstring(param_sourceID);
    if (isMuQtObject(arg0)) ((MuQt_QWebPage*)arg0)->javaScriptConsoleMessage_pub_parent(arg1, arg2, arg3);
    else ((MuQt_QWebPage*)arg0)->javaScriptConsoleMessage_pub(arg1, arg2, arg3);
}

Pointer qt_QWebPage_userAgentForUrl_string_QWebPage_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_url);
    return isMuQtObject(arg0) ? makestring(c,((MuQt_QWebPage*)arg0)->userAgentForUrl_pub_parent(arg1)) : makestring(c,((MuQt_QWebPage*)arg0)->userAgentForUrl_pub(arg1));
}

bool qt_QWebPage_eventFilter_bool_QWebPage_QObject_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QObject * arg1 = object<QObject>(param_watched);
    QEvent * arg2 = getqpointer<QEventType>(param_event);
    return isMuQtObject(arg0) ? arg0->QWebPage::eventFilter(arg1, arg2) : arg0->eventFilter(arg1, arg2);
}

void qt_QWebPage_customEvent_void_QWebPage_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebPage*)arg0)->customEvent_pub_parent(arg1);
    else ((MuQt_QWebPage*)arg0)->customEvent_pub(arg1);
}

void qt_QWebPage_timerEvent_void_QWebPage_QTimerEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebPage* arg0 = object<QWebPage>(param_this);
    QTimerEvent * arg1 = getqpointer<QTimerEventType>(param_event);
    if (isMuQtObject(arg0)) ((MuQt_QWebPage*)arg0)->timerEvent_pub_parent(arg1);
    else ((MuQt_QWebPage*)arg0)->timerEvent_pub(arg1);
}


static NODE_IMPLEMENTATION(_n_QWebPage0, Pointer)
{
    NODE_RETURN(qt_QWebPage_QWebPage_QWebPage_QWebPage_QObject(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_action0, Pointer)
{
    NODE_RETURN(qt_QWebPage_action_QAction_QWebPage_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_createStandardContextMenu0, Pointer)
{
    NODE_RETURN(qt_QWebPage_createStandardContextMenu_QMenu_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_currentFrame0, Pointer)
{
    NODE_RETURN(qt_QWebPage_currentFrame_QWebFrame_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_findText0, bool)
{
    NODE_RETURN(qt_QWebPage_findText_bool_QWebPage_string_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int)));
}

static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
{
    NODE_RETURN(qt_QWebPage_focusNextPrevChild_bool_QWebPage_bool(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
}

static NODE_IMPLEMENTATION(_n_frameAt0, Pointer)
{
    NODE_RETURN(qt_QWebPage_frameAt_QWebFrame_QWebPage_QPoint(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
{
    NODE_RETURN(qt_QWebPage_inputMethodQuery_QVariant_QWebPage_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_mainFrame0, Pointer)
{
    NODE_RETURN(qt_QWebPage_mainFrame_QWebFrame_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_networkAccessManager0, Pointer)
{
    NODE_RETURN(qt_QWebPage_networkAccessManager_QNetworkAccessManager_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setActualVisibleContentRect0, void)
{
    qt_QWebPage_setActualVisibleContentRect_void_QWebPage_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setFeaturePermission0, void)
{
    qt_QWebPage_setFeaturePermission_void_QWebPage_QWebFrame_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int), NODE_ARG(3, int));
}

static NODE_IMPLEMENTATION(_n_setNetworkAccessManager0, void)
{
    qt_QWebPage_setNetworkAccessManager_void_QWebPage_QNetworkAccessManager(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setView0, void)
{
    qt_QWebPage_setView_void_QWebPage_QWidget(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_settings0, Pointer)
{
    NODE_RETURN(qt_QWebPage_settings_QWebSettings_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_shouldInterruptJavaScript0, bool)
{
    NODE_RETURN(qt_QWebPage_shouldInterruptJavaScript_bool_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_supportedContentTypes0, Pointer)
{
    NODE_RETURN(qt_QWebPage_supportedContentTypes_stringBSB_ESB__QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_supportsContentType0, bool)
{
    NODE_RETURN(qt_QWebPage_supportsContentType_bool_QWebPage_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_supportsExtension0, bool)
{
    NODE_RETURN(qt_QWebPage_supportsExtension_bool_QWebPage_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_swallowContextMenuEvent0, bool)
{
    NODE_RETURN(qt_QWebPage_swallowContextMenuEvent_bool_QWebPage_QContextMenuEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_triggerAction0, void)
{
    qt_QWebPage_triggerAction_void_QWebPage_int_bool(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, bool));
}

static NODE_IMPLEMENTATION(_n_updatePositionDependentActions0, void)
{
    qt_QWebPage_updatePositionDependentActions_void_QWebPage_QPoint(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_view0, Pointer)
{
    NODE_RETURN(qt_QWebPage_view_QWidget_QWebPage(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_event0, bool)
{
    NODE_RETURN(qt_QWebPage_event_bool_QWebPage_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_chooseFile0, Pointer)
{
    NODE_RETURN(qt_QWebPage_chooseFile_string_QWebPage_QWebFrame_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_createPlugin0, Pointer)
{
    NODE_RETURN(qt_QWebPage_createPlugin_QObject_QWebPage_string_QUrl_stringBSB_ESB__stringBSB_ESB_(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer), NODE_ARG(3, Pointer), NODE_ARG(4, Pointer)));
}

static NODE_IMPLEMENTATION(_n_createWindow0, Pointer)
{
    NODE_RETURN(qt_QWebPage_createWindow_QWebPage_QWebPage_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_javaScriptAlert0, void)
{
    qt_QWebPage_javaScriptAlert_void_QWebPage_QWebFrame_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer));
}

static NODE_IMPLEMENTATION(_n_javaScriptConfirm0, bool)
{
    NODE_RETURN(qt_QWebPage_javaScriptConfirm_bool_QWebPage_QWebFrame_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_javaScriptConsoleMessage0, void)
{
    qt_QWebPage_javaScriptConsoleMessage_void_QWebPage_string_int_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int), NODE_ARG(3, Pointer));
}

static NODE_IMPLEMENTATION(_n_userAgentForUrl0, Pointer)
{
    NODE_RETURN(qt_QWebPage_userAgentForUrl_string_QWebPage_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
{
    NODE_RETURN(qt_QWebPage_eventFilter_bool_QWebPage_QObject_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_customEvent0, void)
{
    qt_QWebPage_customEvent_void_QWebPage_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_timerEvent0, void)
{
    qt_QWebPage_timerEvent_void_QWebPage_QTimerEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}



void
QWebPageType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),


               new Function(c, tn, castFromObject, Cast,
                            Compiled, QWebPage_QWebPage_QObject,
                            Return, ftn,
                            Parameters,
                            new Param(c, "object", "qt.QObject"),
                            End),

               EndArguments );

addSymbols(
    // enums
    // member functions
    new Function(c, "QWebPage", _n_QWebPage0, None, Compiled, qt_QWebPage_QWebPage_QWebPage_QWebPage_QObject, Return, "qt.QWebPage", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "parent", "qt.QObject"), End),
    new Function(c, "action", _n_action0, None, Compiled, qt_QWebPage_action_QAction_QWebPage_int, Return, "qt.QAction", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "action_", "int"), End),
    // MISSING: bytesReceived ("quint64"; QWebPage this)
    new Function(c, "createStandardContextMenu", _n_createStandardContextMenu0, None, Compiled, qt_QWebPage_createStandardContextMenu_QMenu_QWebPage, Return, "qt.QMenu", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    new Function(c, "currentFrame", _n_currentFrame0, None, Compiled, qt_QWebPage_currentFrame_QWebFrame_QWebPage, Return, "qt.QWebFrame", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    // MISSING: extension (bool; QWebPage this, flags QWebPage::Extension extension_, "const ExtensionOption *" option, "ExtensionReturn *" output)
    new Function(c, "findText", _n_findText0, None, Compiled, qt_QWebPage_findText_bool_QWebPage_string_int, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "subString", "string"), new Param(c, "options", "int", Value((int)0)), End),
    new Function(c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled, qt_QWebPage_focusNextPrevChild_bool_QWebPage_bool, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "next", "bool"), End),
    // PROP: forwardUnsupportedContent (bool; QWebPage this)
    new Function(c, "frameAt", _n_frameAt0, None, Compiled, qt_QWebPage_frameAt_QWebFrame_QWebPage_QPoint, Return, "qt.QWebFrame", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "pos", "qt.QPoint"), End),
    // PROP: hasSelection (bool; QWebPage this)
    // MISSING: history ("QWebHistory *"; QWebPage this)
    new Function(c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled, qt_QWebPage_inputMethodQuery_QVariant_QWebPage_int, Return, "qt.QVariant", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "property", "int"), End),
    // PROP: isContentEditable (bool; QWebPage this)
    // PROP: isModified (bool; QWebPage this)
    // PROP: linkDelegationPolicy (flags QWebPage::LinkDelegationPolicy; QWebPage this)
    new Function(c, "mainFrame", _n_mainFrame0, None, Compiled, qt_QWebPage_mainFrame_QWebFrame_QWebPage, Return, "qt.QWebFrame", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    new Function(c, "networkAccessManager", _n_networkAccessManager0, None, Compiled, qt_QWebPage_networkAccessManager_QNetworkAccessManager_QWebPage, Return, "qt.QNetworkAccessManager", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    // PROP: palette (QPalette; QWebPage this)
    // MISSING: pluginFactory ("QWebPluginFactory *"; QWebPage this)
    // PROP: preferredContentsSize (QSize; QWebPage this)
    // PROP: selectedHtml (string; QWebPage this)
    // PROP: selectedText (string; QWebPage this)
    new Function(c, "setActualVisibleContentRect", _n_setActualVisibleContentRect0, None, Compiled, qt_QWebPage_setActualVisibleContentRect_void_QWebPage_QRect, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "rect", "qt.QRect"), End),
    // PROP: setContentEditable (void; QWebPage this, bool editable)
    new Function(c, "setFeaturePermission", _n_setFeaturePermission0, None, Compiled, qt_QWebPage_setFeaturePermission_void_QWebPage_QWebFrame_int_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "frame", "qt.QWebFrame"), new Param(c, "feature", "int"), new Param(c, "policy", "int"), End),
    // PROP: setForwardUnsupportedContent (void; QWebPage this, bool forward)
    // PROP: setLinkDelegationPolicy (void; QWebPage this, flags QWebPage::LinkDelegationPolicy policy)
    new Function(c, "setNetworkAccessManager", _n_setNetworkAccessManager0, None, Compiled, qt_QWebPage_setNetworkAccessManager_void_QWebPage_QNetworkAccessManager, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "manager", "qt.QNetworkAccessManager"), End),
    // PROP: setPalette (void; QWebPage this, QPalette palette)
    // MISSING: setPluginFactory (void; QWebPage this, "QWebPluginFactory *" factory)
    // PROP: setPreferredContentsSize (void; QWebPage this, QSize size)
    new Function(c, "setView", _n_setView0, None, Compiled, qt_QWebPage_setView_void_QWebPage_QWidget, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "view", "qt.QWidget"), End),
    // PROP: setViewportSize (void; QWebPage this, QSize size)
    new Function(c, "settings", _n_settings0, None, Compiled, qt_QWebPage_settings_QWebSettings_QWebPage, Return, "qt.QWebSettings", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    _func[0] = new MemberFunction(c, "shouldInterruptJavaScript", _n_shouldInterruptJavaScript0, None, Compiled, qt_QWebPage_shouldInterruptJavaScript_bool_QWebPage, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    new Function(c, "supportedContentTypes", _n_supportedContentTypes0, None, Compiled, qt_QWebPage_supportedContentTypes_stringBSB_ESB__QWebPage, Return, "string[]", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    new Function(c, "supportsContentType", _n_supportsContentType0, None, Compiled, qt_QWebPage_supportsContentType_bool_QWebPage_string, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "mimeType", "string"), End),
    _func[1] = new MemberFunction(c, "supportsExtension", _n_supportsExtension0, None, Compiled, qt_QWebPage_supportsExtension_bool_QWebPage_int, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "extension", "int"), End),
    new Function(c, "swallowContextMenuEvent", _n_swallowContextMenuEvent0, None, Compiled, qt_QWebPage_swallowContextMenuEvent_bool_QWebPage_QContextMenuEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "event", "qt.QContextMenuEvent"), End),
    // MISSING: totalBytes ("quint64"; QWebPage this)
    _func[2] = new MemberFunction(c, "triggerAction", _n_triggerAction0, None, Compiled, qt_QWebPage_triggerAction_void_QWebPage_int_bool, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "action", "int"), new Param(c, "checked", "bool"), End),
    // MISSING: undoStack ("QUndoStack *"; QWebPage this)
    new Function(c, "updatePositionDependentActions", _n_updatePositionDependentActions0, None, Compiled, qt_QWebPage_updatePositionDependentActions_void_QWebPage_QPoint, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "pos", "qt.QPoint"), End),
    new Function(c, "view", _n_view0, None, Compiled, qt_QWebPage_view_QWidget_QWebPage, Return, "qt.QWidget", Parameters, new Param(c, "this", "qt.QWebPage"), End),
    // MISSING: viewportAttributesForSize ("ViewportAttributes"; QWebPage this, QSize availableSize)
    // PROP: viewportSize (QSize; QWebPage this)
    _func[3] = new MemberFunction(c, "event", _n_event0, None, Compiled, qt_QWebPage_event_bool_QWebPage_QEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "ev", "qt.QEvent"), End),
    // MISSING: acceptNavigationRequest (bool; QWebPage this, QWebFrame frame, "const QNetworkRequest &" request, flags QWebPage::NavigationType type) // protected
    _func[4] = new MemberFunction(c, "chooseFile", _n_chooseFile0, None, Compiled, qt_QWebPage_chooseFile_string_QWebPage_QWebFrame_string, Return, "string", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "parentFrame", "qt.QWebFrame"), new Param(c, "suggestedFile", "string"), End),
    _func[5] = new MemberFunction(c, "createPlugin", _n_createPlugin0, None, Compiled, qt_QWebPage_createPlugin_QObject_QWebPage_string_QUrl_stringBSB_ESB__stringBSB_ESB_, Return, "qt.QObject", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "classid", "string"), new Param(c, "url", "qt.QUrl"), new Param(c, "paramNames", "string[]"), new Param(c, "paramValues", "string[]"), End),
    _func[6] = new MemberFunction(c, "createWindow", _n_createWindow0, None, Compiled, qt_QWebPage_createWindow_QWebPage_QWebPage_int, Return, "qt.QWebPage", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "type", "int"), End),
    _func[7] = new MemberFunction(c, "javaScriptAlert", _n_javaScriptAlert0, None, Compiled, qt_QWebPage_javaScriptAlert_void_QWebPage_QWebFrame_string, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "frame", "qt.QWebFrame"), new Param(c, "msg", "string"), End),
    _func[8] = new MemberFunction(c, "javaScriptConfirm", _n_javaScriptConfirm0, None, Compiled, qt_QWebPage_javaScriptConfirm_bool_QWebPage_QWebFrame_string, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "frame", "qt.QWebFrame"), new Param(c, "msg", "string"), End),
    _func[9] = new MemberFunction(c, "javaScriptConsoleMessage", _n_javaScriptConsoleMessage0, None, Compiled, qt_QWebPage_javaScriptConsoleMessage_void_QWebPage_string_int_string, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "message", "string"), new Param(c, "lineNumber", "int"), new Param(c, "sourceID", "string"), End),
    _func[10] = new MemberFunction(c, "userAgentForUrl", _n_userAgentForUrl0, None, Compiled, qt_QWebPage_userAgentForUrl_string_QWebPage_QUrl, Return, "string", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "url", "qt.QUrl"), End),
    _func[11] = new MemberFunction(c, "eventFilter", _n_eventFilter0, None, Compiled, qt_QWebPage_eventFilter_bool_QWebPage_QObject_QEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "watched", "qt.QObject"), new Param(c, "event", "qt.QEvent"), End),
    // MISSING: metaObject ("const QMetaObject *"; QWebPage this)
    // MISSING: childEvent (void; QWebPage this, "QChildEvent *" event) // protected
    // MISSING: connectNotify (void; QWebPage this, "const QMetaMethod &" signal) // protected
    _func[12] = new MemberFunction(c, "customEvent", _n_customEvent0, None, Compiled, qt_QWebPage_customEvent_void_QWebPage_QEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "event", "qt.QEvent"), End),
    // MISSING: disconnectNotify (void; QWebPage this, "const QMetaMethod &" signal) // protected
    _func[13] = new MemberFunction(c, "timerEvent", _n_timerEvent0, None, Compiled, qt_QWebPage_timerEvent_void_QWebPage_QTimerEvent, Return, "void", Parameters, new Param(c, "this", "qt.QWebPage"), new Param(c, "event", "qt.QTimerEvent"), End),
    // static functions
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);


    const char** propExclusions = 0;

    populate(this, QWebPage::staticMetaObject, propExclusions);
}

} // Mu
