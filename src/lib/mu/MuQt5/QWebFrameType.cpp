//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QWebFrameType.h"
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include <QtWebKitWidgets/QtWebKitWidgets>
#include "QWidgetType.h"
#include "QActionType.h"
#include "QIconType.h"
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include "QEventType.h"
#include "QRectType.h"
#include "QWebPageType.h"
#include "QUrlType.h"
#include "QPointType.h"
#include "QByteArrayType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

//----------------------------------------------------------------------
//  INHERITABLE TYPE IMPLEMENTATION



//----------------------------------------------------------------------
//  Mu Type CONSTRUCTORS

QWebFrameType::QWebFrameType(Context* c, const char* name, Class* super, Class* super2)
: Class(c, name, vectorOf2(super, super2))
{
}

QWebFrameType::~QWebFrameType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

static Pointer
QWebFrame_QWebFrame_QObject(Thread& NODE_THREAD, Pointer obj)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

    if (!widget)
    {
        return 0;
    }
    else if (QWebFrame* w = object<QWebFrame>(widget))
    {
        QWebFrameType* type = 
            c->findSymbolOfTypeByQualifiedName<QWebFrameType>(c->internName("qt.QWebFrame"), false);
        ClassInstance* o = ClassInstance::allocate(type);
        setobject(o, w);
        return o;
    }
    else
    {
        throw BadCastException();
    }
}

static NODE_IMPLEMENTATION(castFromObject, Pointer)
{
    NODE_RETURN( QWebFrame_QWebFrame_QObject(NODE_THREAD, NODE_ARG(0, Pointer)) );
}

void qt_QWebFrame_addToJavaScriptWindowObject_void_QWebFrame_string_QObject_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_name, Pointer param_object, int param_own)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    const QString  arg1 = qstring(param_name);
    QObject * arg2 = object<QObject>(param_object);
    QWebFrame::ValueOwnership arg3 = (QWebFrame::ValueOwnership)(param_own);
    arg0->addToJavaScriptWindowObject(arg1, arg2, arg3);
}

Pointer qt_QWebFrame_frameName_string_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return makestring(c,arg0->frameName());
}

Pointer qt_QWebFrame_geometry_QRect_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return makeqtype<QRectType>(c,arg0->geometry(),"qt.QRect");
}

void qt_QWebFrame_load_void_QWebFrame_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_url);
    arg0->load(arg1);
}

Pointer qt_QWebFrame_page_QWebPage_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return makeinstance<QWebPageType>(c, arg0->page(), "qt.QWebPage");
}

Pointer qt_QWebFrame_parentFrame_QWebFrame_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return makeinstance<QWebFrameType>(c, arg0->parentFrame(), "qt.QWebFrame");
}

Pointer qt_QWebFrame_pos_QPoint_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return makeqtype<QPointType>(c,arg0->pos(),"qt.QPoint");
}

void qt_QWebFrame_scroll_void_QWebFrame_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    int arg1 = (int)(param_dx);
    int arg2 = (int)(param_dy);
    arg0->scroll(arg1, arg2);
}

Pointer qt_QWebFrame_scrollBarGeometry_QRect_QWebFrame_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
    return makeqtype<QRectType>(c,arg0->scrollBarGeometry(arg1),"qt.QRect");
}

int qt_QWebFrame_scrollBarMaximum_int_QWebFrame_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
    return arg0->scrollBarMaximum(arg1);
}

int qt_QWebFrame_scrollBarMinimum_int_QWebFrame_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
    return arg0->scrollBarMinimum(arg1);
}

int qt_QWebFrame_scrollBarPolicy_int_QWebFrame_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
    return int(arg0->scrollBarPolicy(arg1));
}

int qt_QWebFrame_scrollBarValue_int_QWebFrame_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
    return arg0->scrollBarValue(arg1);
}

void qt_QWebFrame_scrollToAnchor_void_QWebFrame_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_anchor)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    const QString  arg1 = qstring(param_anchor);
    arg0->scrollToAnchor(arg1);
}

void qt_QWebFrame_setContent_void_QWebFrame_QByteArray_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_data, Pointer param_mimeType, Pointer param_baseUrl)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    const QByteArray  arg1 = getqtype<QByteArrayType>(param_data);
    const QString  arg2 = qstring(param_mimeType);
    const QUrl  arg3 = getqtype<QUrlType>(param_baseUrl);
    arg0->setContent(arg1, arg2, arg3);
}

void qt_QWebFrame_setFocus_void_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    arg0->setFocus();
}

void qt_QWebFrame_setHtml_void_QWebFrame_string_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_html, Pointer param_baseUrl)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    const QString  arg1 = qstring(param_html);
    const QUrl  arg2 = getqtype<QUrlType>(param_baseUrl);
    arg0->setHtml(arg1, arg2);
}

void qt_QWebFrame_setScrollBarPolicy_void_QWebFrame_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation, int param_policy)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
    Qt::ScrollBarPolicy arg2 = (Qt::ScrollBarPolicy)(param_policy);
    arg0->setScrollBarPolicy(arg1, arg2);
}

void qt_QWebFrame_setScrollBarValue_void_QWebFrame_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation, int param_value)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
    int arg2 = (int)(param_value);
    arg0->setScrollBarValue(arg1, arg2);
}

void qt_QWebFrame_setTextSizeMultiplier_void_QWebFrame_double(Mu::Thread& NODE_THREAD, Pointer param_this, double param_factor)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    qreal arg1 = (double)(param_factor);
    arg0->setTextSizeMultiplier(arg1);
}

double qt_QWebFrame_textSizeMultiplier_double_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return arg0->textSizeMultiplier();
}

Pointer qt_QWebFrame_toHtml_string_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return makestring(c,arg0->toHtml());
}

Pointer qt_QWebFrame_toPlainText_string_QWebFrame(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    return makestring(c,arg0->toPlainText());
}

bool qt_QWebFrame_event_bool_QWebFrame_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    QEvent * arg1 = getqpointer<QEventType>(param_e);
    return arg0->event(arg1);
}

bool qt_QWebFrame_eventFilter_bool_QWebFrame_QObject_QEvent(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched, Pointer param_event)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebFrame* arg0 = object<QWebFrame>(param_this);
    QObject * arg1 = object<QObject>(param_watched);
    QEvent * arg2 = getqpointer<QEventType>(param_event);
    return arg0->eventFilter(arg1, arg2);
}


static NODE_IMPLEMENTATION(_n_addToJavaScriptWindowObject0, void)
{
    qt_QWebFrame_addToJavaScriptWindowObject_void_QWebFrame_string_QObject_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer), NODE_ARG(3, int));
}

static NODE_IMPLEMENTATION(_n_frameName0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_frameName_string_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_geometry0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_geometry_QRect_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_load0, void)
{
    qt_QWebFrame_load_void_QWebFrame_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_page0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_page_QWebPage_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_parentFrame0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_parentFrame_QWebFrame_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_pos0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_pos_QPoint_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_scroll0, void)
{
    qt_QWebFrame_scroll_void_QWebFrame_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_scrollBarGeometry0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_scrollBarGeometry_QRect_QWebFrame_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_scrollBarMaximum0, int)
{
    NODE_RETURN(qt_QWebFrame_scrollBarMaximum_int_QWebFrame_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_scrollBarMinimum0, int)
{
    NODE_RETURN(qt_QWebFrame_scrollBarMinimum_int_QWebFrame_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_scrollBarPolicy0, int)
{
    NODE_RETURN(qt_QWebFrame_scrollBarPolicy_int_QWebFrame_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_scrollBarValue0, int)
{
    NODE_RETURN(qt_QWebFrame_scrollBarValue_int_QWebFrame_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_scrollToAnchor0, void)
{
    qt_QWebFrame_scrollToAnchor_void_QWebFrame_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setContent0, void)
{
    qt_QWebFrame_setContent_void_QWebFrame_QByteArray_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
}

static NODE_IMPLEMENTATION(_n_setFocus0, void)
{
    qt_QWebFrame_setFocus_void_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_setHtml0, void)
{
    qt_QWebFrame_setHtml_void_QWebFrame_string_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer));
}

static NODE_IMPLEMENTATION(_n_setScrollBarPolicy0, void)
{
    qt_QWebFrame_setScrollBarPolicy_void_QWebFrame_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_setScrollBarValue0, void)
{
    qt_QWebFrame_setScrollBarValue_void_QWebFrame_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_setTextSizeMultiplier0, void)
{
    qt_QWebFrame_setTextSizeMultiplier_void_QWebFrame_double(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
}

static NODE_IMPLEMENTATION(_n_textSizeMultiplier0, double)
{
    NODE_RETURN(qt_QWebFrame_textSizeMultiplier_double_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_toHtml0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_toHtml_string_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_toPlainText0, Pointer)
{
    NODE_RETURN(qt_QWebFrame_toPlainText_string_QWebFrame(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_event0, bool)
{
    NODE_RETURN(qt_QWebFrame_event_bool_QWebFrame_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
{
    NODE_RETURN(qt_QWebFrame_eventFilter_bool_QWebFrame_QObject_QEvent(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}



void
QWebFrameType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),


               new Function(c, tn, castFromObject, Cast,
                            Compiled, QWebFrame_QWebFrame_QObject,
                            Return, ftn,
                            Parameters,
                            new Param(c, "object", "qt.QObject"),
                            End),

               EndArguments );

addSymbols(
    // enums
    // member functions
    new Function(c, "addToJavaScriptWindowObject", _n_addToJavaScriptWindowObject0, None, Compiled, qt_QWebFrame_addToJavaScriptWindowObject_void_QWebFrame_string_QObject_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "name", "string"), new Param(c, "object", "qt.QObject"), new Param(c, "own", "int"), End),
    // PROP: baseUrl (QUrl; QWebFrame this)
    // MISSING: childFrames ("QList<QWebFrame *>"; QWebFrame this)
    // PROP: contentsSize (QSize; QWebFrame this)
    // MISSING: documentElement ("QWebElement"; QWebFrame this)
    // MISSING: findAllElements ("QWebElementCollection"; QWebFrame this, string selectorQuery)
    // MISSING: findFirstElement ("QWebElement"; QWebFrame this, string selectorQuery)
    new Function(c, "frameName", _n_frameName0, None, Compiled, qt_QWebFrame_frameName_string_QWebFrame, Return, "string", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    new Function(c, "geometry", _n_geometry0, None, Compiled, qt_QWebFrame_geometry_QRect_QWebFrame, Return, "qt.QRect", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    // PROP: hasFocus (bool; QWebFrame this)
    // MISSING: hitTestContent ("QWebHitTestResult"; QWebFrame this, QPoint pos)
    // PROP: icon (QIcon; QWebFrame this)
    new Function(c, "load", _n_load0, None, Compiled, qt_QWebFrame_load_void_QWebFrame_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "url", "qt.QUrl"), End),
    // MISSING: load (void; QWebFrame this, "const QNetworkRequest &" req, flags QNetworkAccessManager::Operation operation, QByteArray body)
    // MISSING: metaData ("QMultiMap<QString, QString>"; QWebFrame this)
    new Function(c, "page", _n_page0, None, Compiled, qt_QWebFrame_page_QWebPage_QWebFrame, Return, "qt.QWebPage", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    new Function(c, "parentFrame", _n_parentFrame0, None, Compiled, qt_QWebFrame_parentFrame_QWebFrame_QWebFrame, Return, "qt.QWebFrame", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    new Function(c, "pos", _n_pos0, None, Compiled, qt_QWebFrame_pos_QPoint_QWebFrame, Return, "qt.QPoint", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    // PROP: requestedUrl (QUrl; QWebFrame this)
    new Function(c, "scroll", _n_scroll0, None, Compiled, qt_QWebFrame_scroll_void_QWebFrame_int_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
    new Function(c, "scrollBarGeometry", _n_scrollBarGeometry0, None, Compiled, qt_QWebFrame_scrollBarGeometry_QRect_QWebFrame_int, Return, "qt.QRect", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "orientation", "int"), End),
    new Function(c, "scrollBarMaximum", _n_scrollBarMaximum0, None, Compiled, qt_QWebFrame_scrollBarMaximum_int_QWebFrame_int, Return, "int", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "orientation", "int"), End),
    new Function(c, "scrollBarMinimum", _n_scrollBarMinimum0, None, Compiled, qt_QWebFrame_scrollBarMinimum_int_QWebFrame_int, Return, "int", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "orientation", "int"), End),
    new Function(c, "scrollBarPolicy", _n_scrollBarPolicy0, None, Compiled, qt_QWebFrame_scrollBarPolicy_int_QWebFrame_int, Return, "int", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "orientation", "int"), End),
    new Function(c, "scrollBarValue", _n_scrollBarValue0, None, Compiled, qt_QWebFrame_scrollBarValue_int_QWebFrame_int, Return, "int", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "orientation", "int"), End),
    // PROP: scrollPosition (QPoint; QWebFrame this)
    new Function(c, "scrollToAnchor", _n_scrollToAnchor0, None, Compiled, qt_QWebFrame_scrollToAnchor_void_QWebFrame_string, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "anchor", "string"), End),
    // MISSING: securityOrigin ("QWebSecurityOrigin"; QWebFrame this)
    new Function(c, "setContent", _n_setContent0, None, Compiled, qt_QWebFrame_setContent_void_QWebFrame_QByteArray_string_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "data", "qt.QByteArray"), new Param(c, "mimeType", "string"), new Param(c, "baseUrl", "qt.QUrl"), End),
    new Function(c, "setFocus", _n_setFocus0, None, Compiled, qt_QWebFrame_setFocus_void_QWebFrame, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    new Function(c, "setHtml", _n_setHtml0, None, Compiled, qt_QWebFrame_setHtml_void_QWebFrame_string_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "html", "string"), new Param(c, "baseUrl", "qt.QUrl"), End),
    new Function(c, "setScrollBarPolicy", _n_setScrollBarPolicy0, None, Compiled, qt_QWebFrame_setScrollBarPolicy_void_QWebFrame_int_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "orientation", "int"), new Param(c, "policy", "int"), End),
    new Function(c, "setScrollBarValue", _n_setScrollBarValue0, None, Compiled, qt_QWebFrame_setScrollBarValue_void_QWebFrame_int_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "orientation", "int"), new Param(c, "value", "int"), End),
    // PROP: setScrollPosition (void; QWebFrame this, QPoint pos)
    new Function(c, "setTextSizeMultiplier", _n_setTextSizeMultiplier0, None, Compiled, qt_QWebFrame_setTextSizeMultiplier_void_QWebFrame_double, Return, "void", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "factor", "double"), End),
    // PROP: setUrl (void; QWebFrame this, QUrl url)
    // PROP: setZoomFactor (void; QWebFrame this, double factor)
    new Function(c, "textSizeMultiplier", _n_textSizeMultiplier0, None, Compiled, qt_QWebFrame_textSizeMultiplier_double_QWebFrame, Return, "double", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    // PROP: title (string; QWebFrame this)
    new Function(c, "toHtml", _n_toHtml0, None, Compiled, qt_QWebFrame_toHtml_string_QWebFrame, Return, "string", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    new Function(c, "toPlainText", _n_toPlainText0, None, Compiled, qt_QWebFrame_toPlainText_string_QWebFrame, Return, "string", Parameters, new Param(c, "this", "qt.QWebFrame"), End),
    // PROP: url (QUrl; QWebFrame this)
    // PROP: zoomFactor (double; QWebFrame this)
    new MemberFunction(c, "event", _n_event0, None, Compiled, qt_QWebFrame_event_bool_QWebFrame_QEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "e", "qt.QEvent"), End),
    new MemberFunction(c, "eventFilter", _n_eventFilter0, None, Compiled, qt_QWebFrame_eventFilter_bool_QWebFrame_QObject_QEvent, Return, "bool", Parameters, new Param(c, "this", "qt.QWebFrame"), new Param(c, "watched", "qt.QObject"), new Param(c, "event", "qt.QEvent"), End),
    // MISSING: metaObject ("const QMetaObject *"; QWebFrame this)
    // MISSING: childEvent (void; QWebFrame this, "QChildEvent *" event) // protected
    // MISSING: connectNotify (void; QWebFrame this, "const QMetaMethod &" signal) // protected
    // NOT INHERITABLE PROTECTED: customEvent (void; QWebFrame this, QEvent event) // protected
    // MISSING: disconnectNotify (void; QWebFrame this, "const QMetaMethod &" signal) // protected
    // NOT INHERITABLE PROTECTED: timerEvent (void; QWebFrame this, QTimerEvent event) // protected
    // static functions
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);


    const char** propExclusions = 0;

    populate(this, QWebFrame::staticMetaObject, propExclusions);
}

} // Mu
