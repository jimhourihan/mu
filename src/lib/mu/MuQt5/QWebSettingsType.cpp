//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#include "qtUtils.h"
#include "QWebSettingsType.h"
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtWebKit/QtWebKit>
#include <QtWebKitWidgets/QtWebKitWidgets>
#include <QtNetwork/QtNetwork>
#include "QWidgetType.h"
#include "QActionType.h"
#include "QIconType.h"
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include "QIconType.h"
#include "QUrlType.h"
#include "QPixmapType.h"

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

QWebSettingsType::QWebSettingsType(Context* c, const char* name, Class* super)
    : Class(c, name, super)
{
}

QWebSettingsType::~QWebSettingsType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

Pointer qt_QWebSettings_cssMediaType_string_QWebSettings(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    return makestring(c,arg0->cssMediaType());
}

Pointer qt_QWebSettings_defaultTextEncoding_string_QWebSettings(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    return makestring(c,arg0->defaultTextEncoding());
}

Pointer qt_QWebSettings_fontFamily_string_QWebSettings_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_which)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::FontFamily arg1 = (QWebSettings::FontFamily)(param_which);
    return makestring(c,arg0->fontFamily(arg1));
}

int qt_QWebSettings_fontSize_int_QWebSettings_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_type)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::FontSize arg1 = (QWebSettings::FontSize)(param_type);
    return arg0->fontSize(arg1);
}

Pointer qt_QWebSettings_localStoragePath_string_QWebSettings(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    return makestring(c,arg0->localStoragePath());
}

void qt_QWebSettings_resetAttribute_void_QWebSettings_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_attribute)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::WebAttribute arg1 = (QWebSettings::WebAttribute)(param_attribute);
    arg0->resetAttribute(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_resetFontFamily_void_QWebSettings_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_which)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::FontFamily arg1 = (QWebSettings::FontFamily)(param_which);
    arg0->resetFontFamily(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_resetFontSize_void_QWebSettings_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_type)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::FontSize arg1 = (QWebSettings::FontSize)(param_type);
    arg0->resetFontSize(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setAttribute_void_QWebSettings_int_bool(Mu::Thread& NODE_THREAD, Pointer param_this, int param_attribute, bool param_on)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::WebAttribute arg1 = (QWebSettings::WebAttribute)(param_attribute);
    bool arg2 = (bool)(param_on);
    arg0->setAttribute(arg1, arg2);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setCSSMediaType_void_QWebSettings_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_type)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    const QString  arg1 = qstring(param_type);
    arg0->setCSSMediaType(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setDefaultTextEncoding_void_QWebSettings_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_encoding)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    const QString  arg1 = qstring(param_encoding);
    arg0->setDefaultTextEncoding(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setFontFamily_void_QWebSettings_int_string(Mu::Thread& NODE_THREAD, Pointer param_this, int param_which, Pointer param_family)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::FontFamily arg1 = (QWebSettings::FontFamily)(param_which);
    const QString  arg2 = qstring(param_family);
    arg0->setFontFamily(arg1, arg2);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setFontSize_void_QWebSettings_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_type, int param_size)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::FontSize arg1 = (QWebSettings::FontSize)(param_type);
    int arg2 = (int)(param_size);
    arg0->setFontSize(arg1, arg2);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setLocalStoragePath_void_QWebSettings_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    const QString  arg1 = qstring(param_path);
    arg0->setLocalStoragePath(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setThirdPartyCookiePolicy_void_QWebSettings_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_policy)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::ThirdPartyCookiePolicy arg1 = (QWebSettings::ThirdPartyCookiePolicy)(param_policy);
    arg0->setThirdPartyCookiePolicy(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

void qt_QWebSettings_setUserStyleSheetUrl_void_QWebSettings_QUrl(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_location)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    const QUrl  arg1 = getqtype<QUrlType>(param_location);
    arg0->setUserStyleSheetUrl(arg1);
    setqpointer<QWebSettingsType>(param_this,arg0);
}

bool qt_QWebSettings_testAttribute_bool_QWebSettings_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_attribute)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    QWebSettings::WebAttribute arg1 = (QWebSettings::WebAttribute)(param_attribute);
    return arg0->testAttribute(arg1);
}

int qt_QWebSettings_thirdPartyCookiePolicy_int_QWebSettings(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    return int(arg0->thirdPartyCookiePolicy());
}

Pointer qt_QWebSettings_userStyleSheetUrl_QUrl_QWebSettings(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings * arg0 = getqpointer<QWebSettingsType>(param_this);
    return makeqtype<QUrlType>(c,arg0->userStyleSheetUrl(),"qt.QUrl");
}

void qt_QWebSettings_clearIconDatabase_void(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings::clearIconDatabase();
}

void qt_QWebSettings_clearMemoryCaches_void(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings::clearMemoryCaches();
}

void qt_QWebSettings_enablePersistentStorage_void_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    QWebSettings::enablePersistentStorage(arg0);
}

Pointer qt_QWebSettings_globalSettings_QWebSettings(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makeqpointer<QWebSettingsType>(c,QWebSettings::globalSettings(),"qt.QWebSettings");
}

Pointer qt_QWebSettings_iconDatabasePath_string(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestring(c,QWebSettings::iconDatabasePath());
}

Pointer qt_QWebSettings_iconForUrl_QIcon_QUrl(Mu::Thread& NODE_THREAD, Pointer param_url)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QUrl  arg0 = getqtype<QUrlType>(param_url);
    return makeqtype<QIconType>(c,QWebSettings::iconForUrl(arg0),"qt.QIcon");
}

int qt_QWebSettings_maximumPagesInCache_int(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return QWebSettings::maximumPagesInCache();
}

int64 qt_QWebSettings_offlineStorageDefaultQuota_int64(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return QWebSettings::offlineStorageDefaultQuota();
}

Pointer qt_QWebSettings_offlineStoragePath_string(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestring(c,QWebSettings::offlineStoragePath());
}

Pointer qt_QWebSettings_offlineWebApplicationCachePath_string(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestring(c,QWebSettings::offlineWebApplicationCachePath());
}

int64 qt_QWebSettings_offlineWebApplicationCacheQuota_int64(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return QWebSettings::offlineWebApplicationCacheQuota();
}

void qt_QWebSettings_setIconDatabasePath_void_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    QWebSettings::setIconDatabasePath(arg0);
}

void qt_QWebSettings_setMaximumPagesInCache_void_int(Mu::Thread& NODE_THREAD, int param_pages)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    int arg0 = (int)(param_pages);
    QWebSettings::setMaximumPagesInCache(arg0);
}

void qt_QWebSettings_setObjectCacheCapacities_void_int_int_int(Mu::Thread& NODE_THREAD, int param_cacheMinDeadCapacity, int param_cacheMaxDead, int param_totalCapacity)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    int arg0 = (int)(param_cacheMinDeadCapacity);
    int arg1 = (int)(param_cacheMaxDead);
    int arg2 = (int)(param_totalCapacity);
    QWebSettings::setObjectCacheCapacities(arg0, arg1, arg2);
}

void qt_QWebSettings_setOfflineStorageDefaultQuota_void_int64(Mu::Thread& NODE_THREAD, int64 param_maximumSize)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    qint64 arg0 = (int64)(param_maximumSize);
    QWebSettings::setOfflineStorageDefaultQuota(arg0);
}

void qt_QWebSettings_setOfflineStoragePath_void_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    QWebSettings::setOfflineStoragePath(arg0);
}

void qt_QWebSettings_setOfflineWebApplicationCachePath_void_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    QWebSettings::setOfflineWebApplicationCachePath(arg0);
}

void qt_QWebSettings_setOfflineWebApplicationCacheQuota_void_int64(Mu::Thread& NODE_THREAD, int64 param_maximumSize)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    qint64 arg0 = (int64)(param_maximumSize);
    QWebSettings::setOfflineWebApplicationCacheQuota(arg0);
}

void qt_QWebSettings_setWebGraphic_void_int_QPixmap(Mu::Thread& NODE_THREAD, int param_type, Pointer param_graphic)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings::WebGraphic arg0 = (QWebSettings::WebGraphic)(param_type);
    const QPixmap  arg1 = getqtype<QPixmapType>(param_graphic);
    QWebSettings::setWebGraphic(arg0, arg1);
}

Pointer qt_QWebSettings_webGraphic_QPixmap_int(Mu::Thread& NODE_THREAD, int param_type)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebSettings::WebGraphic arg0 = (QWebSettings::WebGraphic)(param_type);
    return makeqtype<QPixmapType>(c,QWebSettings::webGraphic(arg0),"qt.QPixmap");
}


static NODE_IMPLEMENTATION(_n_cssMediaType0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_cssMediaType_string_QWebSettings(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_defaultTextEncoding0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_defaultTextEncoding_string_QWebSettings(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fontFamily0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_fontFamily_string_QWebSettings_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_fontSize0, int)
{
    NODE_RETURN(qt_QWebSettings_fontSize_int_QWebSettings_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_localStoragePath0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_localStoragePath_string_QWebSettings(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_resetAttribute0, void)
{
    qt_QWebSettings_resetAttribute_void_QWebSettings_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_resetFontFamily0, void)
{
    qt_QWebSettings_resetFontFamily_void_QWebSettings_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_resetFontSize0, void)
{
    qt_QWebSettings_resetFontSize_void_QWebSettings_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_setAttribute0, void)
{
    qt_QWebSettings_setAttribute_void_QWebSettings_int_bool(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, bool));
}

static NODE_IMPLEMENTATION(_n_setCSSMediaType0, void)
{
    qt_QWebSettings_setCSSMediaType_void_QWebSettings_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setDefaultTextEncoding0, void)
{
    qt_QWebSettings_setDefaultTextEncoding_void_QWebSettings_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setFontFamily0, void)
{
    qt_QWebSettings_setFontFamily_void_QWebSettings_int_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, Pointer));
}

static NODE_IMPLEMENTATION(_n_setFontSize0, void)
{
    qt_QWebSettings_setFontSize_void_QWebSettings_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_setLocalStoragePath0, void)
{
    qt_QWebSettings_setLocalStoragePath_void_QWebSettings_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setThirdPartyCookiePolicy0, void)
{
    qt_QWebSettings_setThirdPartyCookiePolicy_void_QWebSettings_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_setUserStyleSheetUrl0, void)
{
    qt_QWebSettings_setUserStyleSheetUrl_void_QWebSettings_QUrl(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_testAttribute0, bool)
{
    NODE_RETURN(qt_QWebSettings_testAttribute_bool_QWebSettings_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_thirdPartyCookiePolicy0, int)
{
    NODE_RETURN(qt_QWebSettings_thirdPartyCookiePolicy_int_QWebSettings(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_userStyleSheetUrl0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_userStyleSheetUrl_QUrl_QWebSettings(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_clearIconDatabase0, void)
{
    qt_QWebSettings_clearIconDatabase_void(NODE_THREAD);
}

static NODE_IMPLEMENTATION(_n_clearMemoryCaches0, void)
{
    qt_QWebSettings_clearMemoryCaches_void(NODE_THREAD);
}

static NODE_IMPLEMENTATION(_n_enablePersistentStorage0, void)
{
    qt_QWebSettings_enablePersistentStorage_void_string(NODE_THREAD, NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_globalSettings0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_globalSettings_QWebSettings(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_iconDatabasePath0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_iconDatabasePath_string(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_iconForUrl0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_iconForUrl_QIcon_QUrl(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_maximumPagesInCache0, int)
{
    NODE_RETURN(qt_QWebSettings_maximumPagesInCache_int(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_offlineStorageDefaultQuota0, int64)
{
    NODE_RETURN(qt_QWebSettings_offlineStorageDefaultQuota_int64(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_offlineStoragePath0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_offlineStoragePath_string(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_offlineWebApplicationCachePath0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_offlineWebApplicationCachePath_string(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_offlineWebApplicationCacheQuota0, int64)
{
    NODE_RETURN(qt_QWebSettings_offlineWebApplicationCacheQuota_int64(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_setIconDatabasePath0, void)
{
    qt_QWebSettings_setIconDatabasePath_void_string(NODE_THREAD, NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_setMaximumPagesInCache0, void)
{
    qt_QWebSettings_setMaximumPagesInCache_void_int(NODE_THREAD, NODE_ARG(0, int));
}

static NODE_IMPLEMENTATION(_n_setObjectCacheCapacities0, void)
{
    qt_QWebSettings_setObjectCacheCapacities_void_int_int_int(NODE_THREAD, NODE_ARG(0, int), NODE_ARG(1, int), NODE_ARG(2, int));
}

static NODE_IMPLEMENTATION(_n_setOfflineStorageDefaultQuota0, void)
{
    qt_QWebSettings_setOfflineStorageDefaultQuota_void_int64(NODE_THREAD, NODE_ARG(0, int64));
}

static NODE_IMPLEMENTATION(_n_setOfflineStoragePath0, void)
{
    qt_QWebSettings_setOfflineStoragePath_void_string(NODE_THREAD, NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_setOfflineWebApplicationCachePath0, void)
{
    qt_QWebSettings_setOfflineWebApplicationCachePath_void_string(NODE_THREAD, NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_setOfflineWebApplicationCacheQuota0, void)
{
    qt_QWebSettings_setOfflineWebApplicationCacheQuota_void_int64(NODE_THREAD, NODE_ARG(0, int64));
}

static NODE_IMPLEMENTATION(_n_setWebGraphic0, void)
{
    qt_QWebSettings_setWebGraphic_void_int_QPixmap(NODE_THREAD, NODE_ARG(0, int), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_webGraphic0, Pointer)
{
    NODE_RETURN(qt_QWebSettings_webGraphic_QPixmap_int(NODE_THREAD, NODE_ARG(0, int)));
}



void
QWebSettingsType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),

               new MemberVariable(c, "native", "qt.NativeObject"),

               EndArguments );


addSymbols(
    new Alias(c, "FontFamily", "int"),
      new SymbolicConstant(c, "StandardFont", "int", Value(int(QWebSettings::StandardFont))),
      new SymbolicConstant(c, "FixedFont", "int", Value(int(QWebSettings::FixedFont))),
      new SymbolicConstant(c, "SerifFont", "int", Value(int(QWebSettings::SerifFont))),
      new SymbolicConstant(c, "SansSerifFont", "int", Value(int(QWebSettings::SansSerifFont))),
      new SymbolicConstant(c, "CursiveFont", "int", Value(int(QWebSettings::CursiveFont))),
      new SymbolicConstant(c, "FantasyFont", "int", Value(int(QWebSettings::FantasyFont))),
    new Alias(c, "FontSize", "int"),
      new SymbolicConstant(c, "MinimumFontSize", "int", Value(int(QWebSettings::MinimumFontSize))),
      new SymbolicConstant(c, "MinimumLogicalFontSize", "int", Value(int(QWebSettings::MinimumLogicalFontSize))),
      new SymbolicConstant(c, "DefaultFontSize", "int", Value(int(QWebSettings::DefaultFontSize))),
      new SymbolicConstant(c, "DefaultFixedFontSize", "int", Value(int(QWebSettings::DefaultFixedFontSize))),
    new Alias(c, "ThirdPartyCookiePolicy", "int"),
      new SymbolicConstant(c, "AlwaysAllowThirdPartyCookies", "int", Value(int(QWebSettings::AlwaysAllowThirdPartyCookies))),
      new SymbolicConstant(c, "AlwaysBlockThirdPartyCookies", "int", Value(int(QWebSettings::AlwaysBlockThirdPartyCookies))),
      new SymbolicConstant(c, "AllowThirdPartyWithExistingCookies", "int", Value(int(QWebSettings::AllowThirdPartyWithExistingCookies))),
    new Alias(c, "WebAttribute", "int"),
      new SymbolicConstant(c, "AutoLoadImages", "int", Value(int(QWebSettings::AutoLoadImages))),
      new SymbolicConstant(c, "DnsPrefetchEnabled", "int", Value(int(QWebSettings::DnsPrefetchEnabled))),
      new SymbolicConstant(c, "JavascriptEnabled", "int", Value(int(QWebSettings::JavascriptEnabled))),
      new SymbolicConstant(c, "JavaEnabled", "int", Value(int(QWebSettings::JavaEnabled))),
      new SymbolicConstant(c, "PluginsEnabled", "int", Value(int(QWebSettings::PluginsEnabled))),
      new SymbolicConstant(c, "PrivateBrowsingEnabled", "int", Value(int(QWebSettings::PrivateBrowsingEnabled))),
      new SymbolicConstant(c, "JavascriptCanOpenWindows", "int", Value(int(QWebSettings::JavascriptCanOpenWindows))),
      new SymbolicConstant(c, "JavascriptCanCloseWindows", "int", Value(int(QWebSettings::JavascriptCanCloseWindows))),
      new SymbolicConstant(c, "JavascriptCanAccessClipboard", "int", Value(int(QWebSettings::JavascriptCanAccessClipboard))),
      new SymbolicConstant(c, "DeveloperExtrasEnabled", "int", Value(int(QWebSettings::DeveloperExtrasEnabled))),
      new SymbolicConstant(c, "SpatialNavigationEnabled", "int", Value(int(QWebSettings::SpatialNavigationEnabled))),
      new SymbolicConstant(c, "LinksIncludedInFocusChain", "int", Value(int(QWebSettings::LinksIncludedInFocusChain))),
      new SymbolicConstant(c, "ZoomTextOnly", "int", Value(int(QWebSettings::ZoomTextOnly))),
      new SymbolicConstant(c, "PrintElementBackgrounds", "int", Value(int(QWebSettings::PrintElementBackgrounds))),
      new SymbolicConstant(c, "OfflineStorageDatabaseEnabled", "int", Value(int(QWebSettings::OfflineStorageDatabaseEnabled))),
      new SymbolicConstant(c, "OfflineWebApplicationCacheEnabled", "int", Value(int(QWebSettings::OfflineWebApplicationCacheEnabled))),
      new SymbolicConstant(c, "LocalStorageEnabled", "int", Value(int(QWebSettings::LocalStorageEnabled))),
      new SymbolicConstant(c, "LocalStorageDatabaseEnabled", "int", Value(int(QWebSettings::LocalStorageDatabaseEnabled))),
      new SymbolicConstant(c, "LocalContentCanAccessRemoteUrls", "int", Value(int(QWebSettings::LocalContentCanAccessRemoteUrls))),
      new SymbolicConstant(c, "LocalContentCanAccessFileUrls", "int", Value(int(QWebSettings::LocalContentCanAccessFileUrls))),
      new SymbolicConstant(c, "XSSAuditingEnabled", "int", Value(int(QWebSettings::XSSAuditingEnabled))),
      new SymbolicConstant(c, "AcceleratedCompositingEnabled", "int", Value(int(QWebSettings::AcceleratedCompositingEnabled))),
      new SymbolicConstant(c, "TiledBackingStoreEnabled", "int", Value(int(QWebSettings::TiledBackingStoreEnabled))),
      new SymbolicConstant(c, "FrameFlatteningEnabled", "int", Value(int(QWebSettings::FrameFlatteningEnabled))),
      new SymbolicConstant(c, "SiteSpecificQuirksEnabled", "int", Value(int(QWebSettings::SiteSpecificQuirksEnabled))),
      new SymbolicConstant(c, "ScrollAnimatorEnabled", "int", Value(int(QWebSettings::ScrollAnimatorEnabled))),
      new SymbolicConstant(c, "CaretBrowsingEnabled", "int", Value(int(QWebSettings::CaretBrowsingEnabled))),
      new SymbolicConstant(c, "NotificationsEnabled", "int", Value(int(QWebSettings::NotificationsEnabled))),
    new Alias(c, "WebGraphic", "int"),
      new SymbolicConstant(c, "MissingImageGraphic", "int", Value(int(QWebSettings::MissingImageGraphic))),
      new SymbolicConstant(c, "MissingPluginGraphic", "int", Value(int(QWebSettings::MissingPluginGraphic))),
      new SymbolicConstant(c, "DefaultFrameIconGraphic", "int", Value(int(QWebSettings::DefaultFrameIconGraphic))),
      new SymbolicConstant(c, "TextAreaSizeGripCornerGraphic", "int", Value(int(QWebSettings::TextAreaSizeGripCornerGraphic))),
      new SymbolicConstant(c, "DeleteButtonGraphic", "int", Value(int(QWebSettings::DeleteButtonGraphic))),
      new SymbolicConstant(c, "InputSpeechButtonGraphic", "int", Value(int(QWebSettings::InputSpeechButtonGraphic))),
      new SymbolicConstant(c, "SearchCancelButtonGraphic", "int", Value(int(QWebSettings::SearchCancelButtonGraphic))),
      new SymbolicConstant(c, "SearchCancelButtonPressedGraphic", "int", Value(int(QWebSettings::SearchCancelButtonPressedGraphic))),
    EndArguments);

addSymbols(
    // enums
    // member functions
    new Function(c, "cssMediaType", _n_cssMediaType0, None, Compiled, qt_QWebSettings_cssMediaType_string_QWebSettings, Return, "string", Parameters, new Param(c, "this", "qt.QWebSettings"), End),
    new Function(c, "defaultTextEncoding", _n_defaultTextEncoding0, None, Compiled, qt_QWebSettings_defaultTextEncoding_string_QWebSettings, Return, "string", Parameters, new Param(c, "this", "qt.QWebSettings"), End),
    new Function(c, "fontFamily", _n_fontFamily0, None, Compiled, qt_QWebSettings_fontFamily_string_QWebSettings_int, Return, "string", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "which", "int"), End),
    new Function(c, "fontSize", _n_fontSize0, None, Compiled, qt_QWebSettings_fontSize_int_QWebSettings_int, Return, "int", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "type", "int"), End),
    new Function(c, "localStoragePath", _n_localStoragePath0, None, Compiled, qt_QWebSettings_localStoragePath_string_QWebSettings, Return, "string", Parameters, new Param(c, "this", "qt.QWebSettings"), End),
    new Function(c, "resetAttribute", _n_resetAttribute0, None, Compiled, qt_QWebSettings_resetAttribute_void_QWebSettings_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "attribute", "int"), End),
    new Function(c, "resetFontFamily", _n_resetFontFamily0, None, Compiled, qt_QWebSettings_resetFontFamily_void_QWebSettings_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "which", "int"), End),
    new Function(c, "resetFontSize", _n_resetFontSize0, None, Compiled, qt_QWebSettings_resetFontSize_void_QWebSettings_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "type", "int"), End),
    new Function(c, "setAttribute", _n_setAttribute0, None, Compiled, qt_QWebSettings_setAttribute_void_QWebSettings_int_bool, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "attribute", "int"), new Param(c, "on", "bool"), End),
    new Function(c, "setCSSMediaType", _n_setCSSMediaType0, None, Compiled, qt_QWebSettings_setCSSMediaType_void_QWebSettings_string, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "type", "string"), End),
    new Function(c, "setDefaultTextEncoding", _n_setDefaultTextEncoding0, None, Compiled, qt_QWebSettings_setDefaultTextEncoding_void_QWebSettings_string, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "encoding", "string"), End),
    new Function(c, "setFontFamily", _n_setFontFamily0, None, Compiled, qt_QWebSettings_setFontFamily_void_QWebSettings_int_string, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "which", "int"), new Param(c, "family", "string"), End),
    new Function(c, "setFontSize", _n_setFontSize0, None, Compiled, qt_QWebSettings_setFontSize_void_QWebSettings_int_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "type", "int"), new Param(c, "size", "int"), End),
    new Function(c, "setLocalStoragePath", _n_setLocalStoragePath0, None, Compiled, qt_QWebSettings_setLocalStoragePath_void_QWebSettings_string, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "path", "string"), End),
    new Function(c, "setThirdPartyCookiePolicy", _n_setThirdPartyCookiePolicy0, None, Compiled, qt_QWebSettings_setThirdPartyCookiePolicy_void_QWebSettings_int, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "policy", "int"), End),
    new Function(c, "setUserStyleSheetUrl", _n_setUserStyleSheetUrl0, None, Compiled, qt_QWebSettings_setUserStyleSheetUrl_void_QWebSettings_QUrl, Return, "void", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "location", "qt.QUrl"), End),
    new Function(c, "testAttribute", _n_testAttribute0, None, Compiled, qt_QWebSettings_testAttribute_bool_QWebSettings_int, Return, "bool", Parameters, new Param(c, "this", "qt.QWebSettings"), new Param(c, "attribute", "int"), End),
    new Function(c, "thirdPartyCookiePolicy", _n_thirdPartyCookiePolicy0, None, Compiled, qt_QWebSettings_thirdPartyCookiePolicy_int_QWebSettings, Return, "int", Parameters, new Param(c, "this", "qt.QWebSettings"), End),
    new Function(c, "userStyleSheetUrl", _n_userStyleSheetUrl0, None, Compiled, qt_QWebSettings_userStyleSheetUrl_QUrl_QWebSettings, Return, "qt.QUrl", Parameters, new Param(c, "this", "qt.QWebSettings"), End),
    // static functions
    new Function(c, "clearIconDatabase", _n_clearIconDatabase0, None, Compiled, qt_QWebSettings_clearIconDatabase_void, Return, "void", End),
    new Function(c, "clearMemoryCaches", _n_clearMemoryCaches0, None, Compiled, qt_QWebSettings_clearMemoryCaches_void, Return, "void", End),
    new Function(c, "enablePersistentStorage", _n_enablePersistentStorage0, None, Compiled, qt_QWebSettings_enablePersistentStorage_void_string, Return, "void", Parameters, new Param(c, "path", "string"), End),
    new Function(c, "globalSettings", _n_globalSettings0, None, Compiled, qt_QWebSettings_globalSettings_QWebSettings, Return, "qt.QWebSettings", End),
    new Function(c, "iconDatabasePath", _n_iconDatabasePath0, None, Compiled, qt_QWebSettings_iconDatabasePath_string, Return, "string", End),
    new Function(c, "iconForUrl", _n_iconForUrl0, None, Compiled, qt_QWebSettings_iconForUrl_QIcon_QUrl, Return, "qt.QIcon", Parameters, new Param(c, "url", "qt.QUrl"), End),
    new Function(c, "maximumPagesInCache", _n_maximumPagesInCache0, None, Compiled, qt_QWebSettings_maximumPagesInCache_int, Return, "int", End),
    new Function(c, "offlineStorageDefaultQuota", _n_offlineStorageDefaultQuota0, None, Compiled, qt_QWebSettings_offlineStorageDefaultQuota_int64, Return, "int64", End),
    new Function(c, "offlineStoragePath", _n_offlineStoragePath0, None, Compiled, qt_QWebSettings_offlineStoragePath_string, Return, "string", End),
    new Function(c, "offlineWebApplicationCachePath", _n_offlineWebApplicationCachePath0, None, Compiled, qt_QWebSettings_offlineWebApplicationCachePath_string, Return, "string", End),
    new Function(c, "offlineWebApplicationCacheQuota", _n_offlineWebApplicationCacheQuota0, None, Compiled, qt_QWebSettings_offlineWebApplicationCacheQuota_int64, Return, "int64", End),
    new Function(c, "setIconDatabasePath", _n_setIconDatabasePath0, None, Compiled, qt_QWebSettings_setIconDatabasePath_void_string, Return, "void", Parameters, new Param(c, "path", "string"), End),
    new Function(c, "setMaximumPagesInCache", _n_setMaximumPagesInCache0, None, Compiled, qt_QWebSettings_setMaximumPagesInCache_void_int, Return, "void", Parameters, new Param(c, "pages", "int"), End),
    new Function(c, "setObjectCacheCapacities", _n_setObjectCacheCapacities0, None, Compiled, qt_QWebSettings_setObjectCacheCapacities_void_int_int_int, Return, "void", Parameters, new Param(c, "cacheMinDeadCapacity", "int"), new Param(c, "cacheMaxDead", "int"), new Param(c, "totalCapacity", "int"), End),
    new Function(c, "setOfflineStorageDefaultQuota", _n_setOfflineStorageDefaultQuota0, None, Compiled, qt_QWebSettings_setOfflineStorageDefaultQuota_void_int64, Return, "void", Parameters, new Param(c, "maximumSize", "int64"), End),
    new Function(c, "setOfflineStoragePath", _n_setOfflineStoragePath0, None, Compiled, qt_QWebSettings_setOfflineStoragePath_void_string, Return, "void", Parameters, new Param(c, "path", "string"), End),
    new Function(c, "setOfflineWebApplicationCachePath", _n_setOfflineWebApplicationCachePath0, None, Compiled, qt_QWebSettings_setOfflineWebApplicationCachePath_void_string, Return, "void", Parameters, new Param(c, "path", "string"), End),
    new Function(c, "setOfflineWebApplicationCacheQuota", _n_setOfflineWebApplicationCacheQuota0, None, Compiled, qt_QWebSettings_setOfflineWebApplicationCacheQuota_void_int64, Return, "void", Parameters, new Param(c, "maximumSize", "int64"), End),
    new Function(c, "setWebGraphic", _n_setWebGraphic0, None, Compiled, qt_QWebSettings_setWebGraphic_void_int_QPixmap, Return, "void", Parameters, new Param(c, "type", "int"), new Param(c, "graphic", "qt.QPixmap"), End),
    new Function(c, "webGraphic", _n_webGraphic0, None, Compiled, qt_QWebSettings_webGraphic_QPixmap_int, Return, "qt.QPixmap", Parameters, new Param(c, "type", "int"), End),
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);

}

} // Mu
