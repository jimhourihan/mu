//
//  Copyright (c) 2009, Jim Hourihan
//  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//     * Redistributions of source code must retain the above
//       copyright notice, this list of conditions and the following
//       disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials
//       provided with the distribution.
//
//     * Neither the name of the software nor the names of its
//       contributors may be used to endorse or promote products
//       derived from this software without specific prior written
//       permission.
// 
//  THIS SOFTWARE IS PROVIDED BY Jim Hourihan ''AS IS'' AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL Jim Hourihan BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
//  DAMAGE.
//
#ifndef __MuQt__QTabBarType__h__
#define __MuQt__QTabBarType__h__
#include <iostream>
#include <Mu/Class.h>
#include <Mu/Process.h>
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtNetwork/QtNetwork>
#include <QtWebKit/QtWebKit>
#include <QtWebKitWidgets/QtWebKitWidgets>
#include <QtSvg/QtSvg>
#include <MuQt5/Bridge.h>

namespace Mu {
class MuQt_QTabBar;

//
//  NOTE: file generated by qt2mu.py
//

class QTabBarType : public Class
{
  public:

    typedef MuQt_QTabBar MuQtType;
    typedef QTabBar QtType;

    //
    //  Constructors
    //

    QTabBarType(Context* context, 
           const char* name,
           Class* superClass = 0,
           Class* superClass2 = 0);

    virtual ~QTabBarType();

    static bool isInheritable() { return true; }
    static inline ClassInstance* cachedInstance(const MuQtType*);

    //
    //  Class API
    //

    virtual void load();

    MemberFunction* _func[37];
};

// Inheritable object

class MuQt_QTabBar : public QTabBar
{
  public:
    virtual ~MuQt_QTabBar();
    MuQt_QTabBar(Pointer muobj, const CallEnvironment*, QWidget * parent) ;
    virtual QSize minimumSizeHint() const;
    virtual QSize sizeHint() const;
  protected:
    virtual QSize minimumTabSizeHint(int index) const;
    virtual void tabInserted(int index) ;
    virtual void tabLayoutChange() ;
    virtual void tabRemoved(int index) ;
    virtual QSize tabSizeHint(int index) const;
    virtual void changeEvent(QEvent * event) ;
    virtual bool event(QEvent * event_) ;
    virtual void hideEvent(QHideEvent * _p12) ;
    virtual void keyPressEvent(QKeyEvent * event) ;
    virtual void mouseMoveEvent(QMouseEvent * event) ;
    virtual void mousePressEvent(QMouseEvent * event) ;
    virtual void mouseReleaseEvent(QMouseEvent * event) ;
    virtual void paintEvent(QPaintEvent * _p13) ;
    virtual void resizeEvent(QResizeEvent * _p14) ;
    virtual void showEvent(QShowEvent * _p12) ;
    virtual void wheelEvent(QWheelEvent * event) ;
  public:
    virtual bool hasHeightForWidth() const;
    virtual int heightForWidth(int w) const;
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;
  protected:
    virtual void closeEvent(QCloseEvent * event) ;
    virtual void contextMenuEvent(QContextMenuEvent * event) ;
    virtual void dragEnterEvent(QDragEnterEvent * event) ;
    virtual void dragLeaveEvent(QDragLeaveEvent * event) ;
    virtual void dragMoveEvent(QDragMoveEvent * event) ;
    virtual void dropEvent(QDropEvent * event) ;
    virtual void enterEvent(QEvent * event) ;
    virtual void focusInEvent(QFocusEvent * event) ;
    virtual bool focusNextPrevChild(bool next) ;
    virtual void focusOutEvent(QFocusEvent * event) ;
    virtual void keyReleaseEvent(QKeyEvent * event) ;
    virtual void leaveEvent(QEvent * event) ;
    virtual void mouseDoubleClickEvent(QMouseEvent * event) ;
    virtual void moveEvent(QMoveEvent * event) ;
    virtual void tabletEvent(QTabletEvent * event) ;
    virtual int metric(PaintDeviceMetric m) const;
  public:
    QSize minimumTabSizeHint_pub(int index) const { return minimumTabSizeHint(index); }
    QSize minimumTabSizeHint_pub_parent(int index) const { return QTabBar::minimumTabSizeHint(index); }
    void tabInserted_pub(int index)  { tabInserted(index); }
    void tabInserted_pub_parent(int index)  { QTabBar::tabInserted(index); }
    void tabLayoutChange_pub()  { tabLayoutChange(); }
    void tabLayoutChange_pub_parent()  { QTabBar::tabLayoutChange(); }
    void tabRemoved_pub(int index)  { tabRemoved(index); }
    void tabRemoved_pub_parent(int index)  { QTabBar::tabRemoved(index); }
    QSize tabSizeHint_pub(int index) const { return tabSizeHint(index); }
    QSize tabSizeHint_pub_parent(int index) const { return QTabBar::tabSizeHint(index); }
    void changeEvent_pub(QEvent * event)  { changeEvent(event); }
    void changeEvent_pub_parent(QEvent * event)  { QTabBar::changeEvent(event); }
    bool event_pub(QEvent * event_)  { return event(event_); }
    bool event_pub_parent(QEvent * event_)  { return QTabBar::event(event_); }
    void hideEvent_pub(QHideEvent * _p12)  { hideEvent(_p12); }
    void hideEvent_pub_parent(QHideEvent * _p12)  { QTabBar::hideEvent(_p12); }
    void keyPressEvent_pub(QKeyEvent * event)  { keyPressEvent(event); }
    void keyPressEvent_pub_parent(QKeyEvent * event)  { QTabBar::keyPressEvent(event); }
    void mouseMoveEvent_pub(QMouseEvent * event)  { mouseMoveEvent(event); }
    void mouseMoveEvent_pub_parent(QMouseEvent * event)  { QTabBar::mouseMoveEvent(event); }
    void mousePressEvent_pub(QMouseEvent * event)  { mousePressEvent(event); }
    void mousePressEvent_pub_parent(QMouseEvent * event)  { QTabBar::mousePressEvent(event); }
    void mouseReleaseEvent_pub(QMouseEvent * event)  { mouseReleaseEvent(event); }
    void mouseReleaseEvent_pub_parent(QMouseEvent * event)  { QTabBar::mouseReleaseEvent(event); }
    void paintEvent_pub(QPaintEvent * _p13)  { paintEvent(_p13); }
    void paintEvent_pub_parent(QPaintEvent * _p13)  { QTabBar::paintEvent(_p13); }
    void resizeEvent_pub(QResizeEvent * _p14)  { resizeEvent(_p14); }
    void resizeEvent_pub_parent(QResizeEvent * _p14)  { QTabBar::resizeEvent(_p14); }
    void showEvent_pub(QShowEvent * _p12)  { showEvent(_p12); }
    void showEvent_pub_parent(QShowEvent * _p12)  { QTabBar::showEvent(_p12); }
    void wheelEvent_pub(QWheelEvent * event)  { wheelEvent(event); }
    void wheelEvent_pub_parent(QWheelEvent * event)  { QTabBar::wheelEvent(event); }
    void closeEvent_pub(QCloseEvent * event)  { closeEvent(event); }
    void closeEvent_pub_parent(QCloseEvent * event)  { QTabBar::closeEvent(event); }
    void contextMenuEvent_pub(QContextMenuEvent * event)  { contextMenuEvent(event); }
    void contextMenuEvent_pub_parent(QContextMenuEvent * event)  { QTabBar::contextMenuEvent(event); }
    void dragEnterEvent_pub(QDragEnterEvent * event)  { dragEnterEvent(event); }
    void dragEnterEvent_pub_parent(QDragEnterEvent * event)  { QTabBar::dragEnterEvent(event); }
    void dragLeaveEvent_pub(QDragLeaveEvent * event)  { dragLeaveEvent(event); }
    void dragLeaveEvent_pub_parent(QDragLeaveEvent * event)  { QTabBar::dragLeaveEvent(event); }
    void dragMoveEvent_pub(QDragMoveEvent * event)  { dragMoveEvent(event); }
    void dragMoveEvent_pub_parent(QDragMoveEvent * event)  { QTabBar::dragMoveEvent(event); }
    void dropEvent_pub(QDropEvent * event)  { dropEvent(event); }
    void dropEvent_pub_parent(QDropEvent * event)  { QTabBar::dropEvent(event); }
    void enterEvent_pub(QEvent * event)  { enterEvent(event); }
    void enterEvent_pub_parent(QEvent * event)  { QTabBar::enterEvent(event); }
    void focusInEvent_pub(QFocusEvent * event)  { focusInEvent(event); }
    void focusInEvent_pub_parent(QFocusEvent * event)  { QTabBar::focusInEvent(event); }
    bool focusNextPrevChild_pub(bool next)  { return focusNextPrevChild(next); }
    bool focusNextPrevChild_pub_parent(bool next)  { return QTabBar::focusNextPrevChild(next); }
    void focusOutEvent_pub(QFocusEvent * event)  { focusOutEvent(event); }
    void focusOutEvent_pub_parent(QFocusEvent * event)  { QTabBar::focusOutEvent(event); }
    void keyReleaseEvent_pub(QKeyEvent * event)  { keyReleaseEvent(event); }
    void keyReleaseEvent_pub_parent(QKeyEvent * event)  { QTabBar::keyReleaseEvent(event); }
    void leaveEvent_pub(QEvent * event)  { leaveEvent(event); }
    void leaveEvent_pub_parent(QEvent * event)  { QTabBar::leaveEvent(event); }
    void mouseDoubleClickEvent_pub(QMouseEvent * event)  { mouseDoubleClickEvent(event); }
    void mouseDoubleClickEvent_pub_parent(QMouseEvent * event)  { QTabBar::mouseDoubleClickEvent(event); }
    void moveEvent_pub(QMoveEvent * event)  { moveEvent(event); }
    void moveEvent_pub_parent(QMoveEvent * event)  { QTabBar::moveEvent(event); }
    void tabletEvent_pub(QTabletEvent * event)  { tabletEvent(event); }
    void tabletEvent_pub_parent(QTabletEvent * event)  { QTabBar::tabletEvent(event); }
    int metric_pub(PaintDeviceMetric m) const { return metric(m); }
    int metric_pub_parent(PaintDeviceMetric m) const { return QTabBar::metric(m); }
  public:
    const QTabBarType* _baseType;
    ClassInstance* _obj;
    const CallEnvironment* _env;
};

inline ClassInstance* QTabBarType::cachedInstance(const QTabBarType::MuQtType* obj) { return obj->_obj; }

} // Mu

#endif // __MuQt__QTabBarType__h__
